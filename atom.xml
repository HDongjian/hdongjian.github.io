<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H-Dongjian</title>
  
  <subtitle>前端小学生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-15T03:51:39.357Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>H-Dongjian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>钉钉小程序&amp;H5微应用</title>
    <link href="http://yoursite.com/2019/10/14/dingtalk_program/"/>
    <id>http://yoursite.com/2019/10/14/dingtalk_program/</id>
    <published>2019-10-14T07:47:06.691Z</published>
    <updated>2019-10-15T03:51:39.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="钉钉开放平台"><a href="#钉钉开放平台" class="headerlink" title="钉钉开放平台"></a>钉钉开放平台</h1><p><a href="https://ding-doc.dingtalk.com" target="_blank" rel="noopener">开放平台官网</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>钉钉开放平台一共有四种接入方式</p><p><img src="/2019/10/14/dingtalk_program/1.png" alt="1538030321083"></p><ul><li>企业内部开发：支持小程序以及H5微应用</li><li>第三方企业应用：支持小程序以及微应用</li><li>第三方个人应用：支持小程序</li><li>移动接入应用</li></ul><h2 id="钉钉开发者平台"><a href="#钉钉开发者平台" class="headerlink" title="钉钉开发者平台"></a>钉钉开发者平台</h2><p><a href="https://open-dev.dingtalk.com/#/index" target="_blank" rel="noopener">平台官网</a></p><p>必须是团队管理员才能登陆</p><h1 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h1><ul><li>1.如果需要真机调试需要创建团队（钉钉直接搜索团队）</li><li>2.下载IDE<ul><li><a href="https://ding-doc.dingtalk.com/doc#/kn6zg7/zunrdk" target="_blank" rel="noopener">IDE地址</a></li></ul></li><li>3.开发文档 <ul><li><a href="https://ding-doc.dingtalk.com/doc#/dev/yqm3sq" target="_blank" rel="noopener">地址</a></li></ul></li><li>4.小程序和H5微应用区别<br><img src="/2019/10/14/dingtalk_program/2.png" alt="1538030321083"></li></ul><h1 id="小程序开发"><a href="#小程序开发" class="headerlink" title="小程序开发"></a>小程序开发</h1><p>开发一个案例项目</p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><ul><li>新建项目</li></ul><p><img src="/2019/10/14/dingtalk_program/3.png" alt="1538030321083"></p><ul><li>目录结构</li></ul><p><img src="/2019/10/14/dingtalk_program/4.png" alt="1538030321083"></p><ul><li><p>配置系统名称</p></li><li><p><code>app.json</code>用于全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><ul><li><code>window</code>属性用于设置通用的的状态栏、导航条、标题、窗口背景色。</li></ul></li><li>配置代码</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="attr">"defaultTitle"</span>: <span class="string">"吃啥"</span>,</span><br><span class="line">    <span class="attr">"titleBarColor"</span>: <span class="string">"#f04a3e"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑主页"><a href="#编辑主页" class="headerlink" title="编辑主页"></a>编辑主页</h2><p>主页的主要功能是随机选择食物名称以及配置食物列表入口，需要展示名称以及两个按钮（选餐、挑战）</p><h3 id="视图层编写"><a href="#视图层编写" class="headerlink" title="视图层编写"></a>视图层编写</h3><p>视图文件的后缀名是<code>axml</code>，定义了页面的标签结构。</p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- axml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    food:<span class="string">'点击下方按钮开始'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>setData函数用于将数据从逻辑层发送到视图层，同时改变对应的this.data的值。</p><p>注意：</p><ul><li>直接修改<code>this.data</code>无效，无法改变页面的状态，还会造成数据不一致。</li><li>请尽量避免一次设置过多的数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setData(&#123;</span><br><span class="line">  switchFlag: !<span class="keyword">this</span>.data.switchFlag</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 有点小坑</span></span><br></pre></td></tr></table></figure><h3 id="为组件增加属性"><a href="#为组件增加属性" class="headerlink" title="为组件增加属性"></a>为组件增加属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">"food-name"</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="书写样式"><a href="#书写样式" class="headerlink" title="书写样式"></a>书写样式</h3><p>rpx（responsive pixel）可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.food-name</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时模拟器使用的是<code>iphone6</code>的宽高，盒子高度为<code>25px</code>，浏览器计算后，高度为<code>0.5rem</code></p><p>每个页面中的根元素为 page，需要设置高度或者背景色时，可以利用这个元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>小程序提供了原生组件，主要有容器，表单，基础内容，导航，媒体，画布等分组</li><li>根据需求使用原生的<code>button</code>组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"choose-button"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>&#123;&#123;switchFlag?'结束':'开始'&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 与vue类似，支持变量以及js语句 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以使用<code>class</code>增加属性，并进行样式覆盖</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>在<code>axml</code>中为组件绑定事件和变量但未在<code>js</code>未声明的时候不会报错，触发事件也不会，开发的时候要注意</li></ul><p><code>button</code>支持以下事件（<code>view</code>也支持）</p><p><img src="/2019/10/14/dingtalk_program/5.png" alt="1538030321083"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onTap</span>=<span class="string">"clickControl"</span> <span class="attr">class</span>=<span class="string">"choose-button"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>&#123;&#123;switchFlag?'结束':'开始'&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    food:<span class="string">'点击下方按钮开始'</span>,</span><br><span class="line">    switchFlag:<span class="literal">false</span>,</span><br><span class="line">    foodList:[<span class="string">'麻辣烫'</span>,<span class="string">'麻辣香锅'</span>,<span class="string">'麻辣猪蹄'</span>,<span class="string">'麻辣鸡翅'</span>,<span class="string">'换点清淡的'</span>,<span class="string">'素三鲜'</span>,<span class="string">'这个也挺油'</span>,<span class="string">'烧个青菜'</span>,<span class="string">'炖个肘子'</span>,<span class="string">'好吃'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  clickControl()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 下方是回调函数</span></span><br><span class="line">  onLoad(query) &#123;</span><br><span class="line">    <span class="comment">// 页面加载</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady() &#123;</span><br><span class="line">    <span class="comment">// 页面加载完成</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>事件内部的<code>this</code>指向与<code>vue</code>基本一致，为这个组件的实例对象<br><img src="/2019/10/14/dingtalk_program/6.png" alt="1538030321083"></p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dd.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">'../config/config'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>dd.navigateTo</code>保留当前页面，跳转到应用内的某个指定页面，可以使用 dd.navigateBack 返回到原来页面。</li><li><code>dd.redirectTo</code>关闭当前页面，跳转到应用内的某个指定页面。</li><li><code>dd.navigateBack</code> 关闭当前页面，返回上一级或多级页面。可通过 getCurrentPages 获取当前的页面栈信息，决定需要返回几层。</li><li><code>dd.reLaunch</code> 关闭当前所有页面，跳转到应用内的某个指定页面。</li></ul><h2 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h2><p>配置页面主要功能是展示食物列表，增加食物，删除食物操作</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">onLongTap</span>=<span class="string">"delectFood"</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-value</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span> <span class="attr">a:for</span>=<span class="string">"&#123;&#123;foodList&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.foodName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在组件上使用a:for属性可以绑定一个数组，然后就可以使用数组中各项的数据重复渲染该组件。</p></li><li><p><code>a:key</code>的值以两种形式来提供。</p><ul><li>（1）字符串，代表在for循环的<code>array</code>中<code>item</code>的某个属性。该属性的值需要是列表中唯一的字符串或数字，并且不能动态的改变。</li><li>（2）保留关键字<code>*this</code>，代表在<code>for</code>循环中的<code>item</code>本身，表示需要<code>item</code>本身是唯一的字符串或者数字，比如当数据改变触发渲染层重新执行渲染的时候，会校正带有<code>key</code>的组件，框架会确保他们重新被排序，而不是重新创建，确保使组件保持自身的状态，并且提高列表渲染时的效率。</li></ul></li><li><p><code>key</code> 是比 <code>a:key</code> 更通用的写法，里面可以填充任意表达式和字符串。</p></li></ul><h3 id="请求获取数据"><a href="#请求获取数据" class="headerlink" title="请求获取数据"></a>请求获取数据</h3><p><a href="https://ding-doc.dingtalk.com/doc#/dev/httprequest" target="_blank" rel="noopener">官网案例</a></p><p>为了方便使用，做了一层封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">'http://localhost:3005'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ddRequest</span>(<span class="params">method = <span class="string">"GET"</span>, url, data, onComplete</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    dd.httpRequest(&#123;</span><br><span class="line">      url: baseUrl + url,</span><br><span class="line">      method: method,</span><br><span class="line">      data: data,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> <span class="comment">// 使用这个能正常获取数据</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        resolve(res.data)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (onComplete &amp;&amp; <span class="keyword">typeof</span> onComplete == <span class="string">"function"</span>) &#123;</span><br><span class="line">          onComplete(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">ajax(<span class="string">"GET"</span>, <span class="string">'/test/food/list'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  self.setData(&#123;</span><br><span class="line">    foodList: res.data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取系统信息"><a href="#获取系统信息" class="headerlink" title="获取系统信息"></a>获取系统信息</h3><p><img src="/2019/10/14/dingtalk_program/7.png" alt="1538030321083"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dd.getSystemInfo(&#123;</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      systemInfo: res</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据系统信息计算列表高度，底部展示添加按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"height:&#123;&#123;systemInfo.windowHeight?systemInfo.windowHeight-70:500&#125;&#125;px"</span> <span class="attr">class</span>=<span class="string">"food"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">a:for</span>=<span class="string">"&#123;&#123;foodList&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.foodName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现input的双向数据绑定"><a href="#实现input的双向数据绑定" class="headerlink" title="实现input的双向数据绑定"></a>实现input的双向数据绑定</h3><ul><li>1.为<code>input</code>绑定<code>value</code>属性，设置默认值；</li><li>2.为<code>input</code>绑定<code>input</code>事件，检测值改变并设置；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;inputValue&#125;&#125;"</span> <span class="attr">onInput</span>=<span class="string">"bindKeyInput"</span> <span class="attr">name</span>=<span class="string">"input"</span> <span class="attr">placeholder</span>=<span class="string">"输入名称"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  inputValue: <span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line">bindKeyInput(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    inputValue: e.detail.value,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交操作"><a href="#提交操作" class="headerlink" title="提交操作"></a>提交操作</h3><p>本部分功能基本以上都有说明，除了提示框以及提示信息</p><p><a href="https://ding-doc.dingtalk.com/doc#/dev/ui-feedback" target="_blank" rel="noopener">交互反馈</a></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>为列表项增加长摁删除操作</p><ul><li>为每一行绑定长摁事件<code>onLongTap</code></li><li>为每一行绑定数据<code>data-value=&quot;&quot;</code></li><li>在长摁事件中通过<code>e</code>获取数据进行操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">onLongTap</span>=<span class="string">"delectFood"</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">data-value</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span> <span class="attr">a:for</span>=<span class="string">"&#123;&#123;foodList&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.foodName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delectFood(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.dataset.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本次主要从基本业务出发，按照正常开发逻辑查找小程序提供的基本功能，分别实现了配置系统、视图层编写<code>view</code>、数据绑定、增加属性、样式编写、组件使用、添加事件、导航跳转、数据请求、列表渲染、获取系统信息、数据的双向绑定等，除此之外小程序还提供了以下主要功能（参考开发文档）</p><ul><li>框架层面<ul><li>自定义组件</li></ul></li><li>组件<ul><li>轮播图</li><li>各种表单</li><li>图标</li><li>进度条</li><li>图片</li><li>打开第三方链接</li></ul></li><li>API<ul><li>上传下载</li><li>WebSocket</li><li>录音</li><li>视频</li><li>免登陆</li><li>导航栏</li><li>下拉刷新</li><li>画布</li><li>键盘</li><li>位置</li><li>缓存</li><li>蓝牙</li><li>震动</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;钉钉开放平台&quot;&gt;&lt;a href=&quot;#钉钉开放平台&quot; class=&quot;headerlink&quot; title=&quot;钉钉开放平台&quot;&gt;&lt;/a&gt;钉钉开放平台&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ding-doc.dingtalk.com&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="钉钉" scheme="http://yoursite.com/tags/%E9%92%89%E9%92%89/"/>
    
  </entry>
  
  <entry>
    <title>服务器配置</title>
    <link href="http://yoursite.com/2019/10/14/virtual_config/"/>
    <id>http://yoursite.com/2019/10/14/virtual_config/</id>
    <published>2019-10-14T01:45:42.263Z</published>
    <updated>2019-10-14T02:08:18.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于apt"><a href="#关于apt" class="headerlink" title="关于apt"></a>关于apt</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>高级包装工具（英语：Advanced Packaging Tools,简称：APT）是Debian及其衍生发行版（如：ubuntu）的软件包管理器。APT可以自动下载，配置，安装二进制或者源代码格式的软 件包，因此简化了 Unix系统上管理软件的过程,apt-get命令一般需要root权限执行，所以一般跟着sudo命令。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><code>apt-get update</code>  更新软件列表信息（注意只是更新列表，并未更新程序，后接apt-get upgrade）</p></li><li><p><code>apt-get upgrade</code>   更新程序</p></li><li><p><code>apt-get dist</code>-upgrade  版本升级</p></li><li><p><code>apt-get install</code> packagename（安装程序包）</p></li><li><p><code>apt-get remove</code> packagename (卸载程序）</p></li><li><p><code>apt-cache search</code> packagename（搜索程序包）</p></li><li><p><code>apt-get clean</code>  删除所有已下载的包文件</p></li><li><p><code>apt-get autoclean</code>   删除已下载的旧包文件</p></li><li><p><code>apt-get autoremove</code>  卸载所有自动安装且不再使用的软件包</p></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="0-Waiting-for-headers"><a href="#0-Waiting-for-headers" class="headerlink" title="0% [Waiting for headers]"></a><code>0% [Waiting for headers]</code></h3><p><code>apt-get clean</code><br><code>apt-get update</code></p><h3 id="apt-命令不可用"><a href="#apt-命令不可用" class="headerlink" title="apt 命令不可用"></a>apt 命令不可用</h3><p><code>apt-get update</code></p>]]></content>
    
    <summary type="html">
    
      基于nginx的ubuntu系统，配置nginx、mysql，搭建node.js环境
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>linux相关常用命令</title>
    <link href="http://yoursite.com/2019/08/05/linux_command/"/>
    <id>http://yoursite.com/2019/08/05/linux_command/</id>
    <published>2019-08-05T05:55:48.666Z</published>
    <updated>2019-10-14T07:43:22.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><ul><li><code>cd /</code> 是跳转到根目录 <ul><li>根目录是所有用户共享的目录</li></ul></li><li><code>cd ~</code> 是跳转到当前用户的家目录 <ul><li>如果是root用户，cd ~ 相当于 cd /root</li><li>如果是普通用户，cd ~ 相当于cd /home/当前用户名</li></ul></li><li><code>cd /home</code> 相当于查看有多少普通用户的家目录<ul><li>因为所有的普通用户的父目录都是home目录</li></ul></li><li><code>pwd</code> 查看路径</li><li><code>ll</code> 查看所有文件</li><li><code>wget</code> 下载</li><li><code>sudo passwd root</code> 重置密码</li><li><code>su</code> 管理员</li><li><code>tar -zxvf apache-tomcat-9.0.22.tar.gz</code> 解压tar文件</li><li><code>mkdir</code> 创建文件夹</li><li><code>scp wenjianming root@192.168.0.11:/home</code>文件传输</li><li><code>sudo service ssh restart</code> 重启ssh服务</li><li><code>sudo bash</code> 切换管理员权限</li></ul><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><ul><li><code>vim server.xml</code> 打开文件</li><li>按o进行编辑</li><li>ESC键跳到命令模式</li><li>:w保存文件但不退出vi 编辑</li><li>:w! 强制保存，不退出vi 编辑</li><li>:w file将修改另存到file中，不退出vi 编辑 </li><li>:wq保存文件并退出vi 编辑</li><li>:wq!强制保存文件并退出vi 编辑</li><li>q:不保存文件并退出vi 编辑</li><li>:q!不保存文件并强制退出vi 编辑</li><li>:e!放弃所有修改，从上次保存文件开始在编辑</li></ul><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><ul><li><code>./nginx -c /usr/local/nginx/conf/nginx.conf</code> 启动nginx</li><li><code>ps -ef|grep nginx</code> 查看启动状态</li><li><code>nginx -s reload|reopen|stop|quit</code> 重新加载配置|重启|停止|退出 nginx</li></ul><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><ul><li><code>node server.js</code> 查看服务</li></ul><h1 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h1><ul><li><code>pm2 start app.js</code>              # 启动app.js应用程序</li><li><code>pm2 start app.js -i 4</code>         # cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡</li><li><code>pm2 start app.js --name=&quot;api&quot;</code> # 启动应用程序并命名为 “api”</li><li><code>pm2 start app.js --watch</code>      # 当文件变化时自动重启应用</li><li><code>pm2 start script.sh</code>          # 启动 bash 脚本</li><li><code>pm2 list</code>                      # 列表 PM2 启动的所有的应用程序</li><li><code>pm2 monit</code>                     # 显示每个应用程序的CPU和内存占用情况</li><li><code>pm2 show [app-name]</code>           # 显示应用程序的所有信息</li><li><code>pm2 logs</code>                     # 显示所有应用程序的日志</li><li><code>pm2 logs [app-name]</code>           # 显示指定应用程序的日志</li><li><code>pm2 flush</code></li><li><code>pm2 stop all</code>                  # 停止所有的应用程序</li><li><code>pm2 stop 0</code>                   # 停止 id为 0的指定应用程序</li><li><code>pm2 restart all</code>             # 重启所有应用</li><li><code>pm2 reload all</code>             # 重启 cluster mode下的所有应用</li><li><code>pm2 gracefulReload all</code>        # Graceful reload all apps in cluster mode</li><li><code>pm2 delete all</code>               # 关闭并删除所有应用</li><li><code>pm2 delete 0</code>                 # 删除指定应用 id 0</li><li><code>pm2 scale api 10</code>             # 把名字叫api的应用扩展到10个实例</li><li><code>pm2 reset [app-name]</code>         # 重置重启数量</li><li><code>pm2 startup</code>                   # 创建开机自启动命令</li><li><code>pm2 save</code>                   # 保存当前应用列表</li><li><code>pm2 resurrect</code>               # 重新加载保存的应用列表</li></ul><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="mysql命令模式"><a href="#mysql命令模式" class="headerlink" title="mysql命令模式"></a>mysql命令模式</h2><ul><li><p><code>mysql -u root -p</code> 进入mysql编辑模式</p></li><li><p><code>desc table_name;</code> 查表的字段信息（不包含字段内容）</p></li><li><code>show columns from table_name;</code>   同上</li><li><code>show create table table_name;</code>  查表字段信息和字符集信息</li><li><code>select * from table_name;</code>  查表所有内容</li><li><code>select * from table_name where id=？;</code>  查指定行</li><li><code>select field_name from table_name;</code> 查指定列，field意为字段</li><li><code>select * from table_name where field_name like &quot;%???%&quot;;</code>  根据字段内容的近似值查找指定行</li><li><code>select field_name1,field_name2 from table_name;</code> 查指定字段的多个列</li><li><p><code>update table_name set field_name=&quot;abc&quot; where id=?;</code>   修改指定字段的内容</p></li><li><p><code>show databases;</code> 查看有哪些数据库</p></li><li><code>use database_name;</code> 进入数据库</li><li><code>create database_name;</code> 创建数据库</li><li><p><code>show tables;</code> 查看数据库内有哪些表</p></li><li><p><code>flush privileges;</code> 刷新</p></li><li><code>exit</code>  退出</li></ul><h2 id="linux下查看mysql服务的两种方式："><a href="#linux下查看mysql服务的两种方式：" class="headerlink" title="linux下查看mysql服务的两种方式："></a>linux下查看mysql服务的两种方式：</h2><p><code>ps -ef|grep mysql</code><br><code>netstat -nlp</code></p><h2 id="linux下启动mysql服务的两种方式："><a href="#linux下启动mysql服务的两种方式：" class="headerlink" title="linux下启动mysql服务的两种方式："></a>linux下启动mysql服务的两种方式：</h2><p><code>cd /usr/bin</code><br><code>./mysqld_safe &amp;</code><br><code>service mysql start</code><br><code>service mysql restart</code></p><h2 id="linux下关闭mysql服务的两种方式："><a href="#linux下关闭mysql服务的两种方式：" class="headerlink" title="linux下关闭mysql服务的两种方式："></a>linux下关闭mysql服务的两种方式：</h2><p>命令行方式：<br><code>mysqladmin -u root shutdown</code></p><p>服务方式：<br><code>service mysql stop</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd /&lt;/code&gt; 是跳转到根目录 &lt;ul&gt;
&lt;li&gt;根目录是所有用户共享的目录&lt;/li
      
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>vue-navigation</title>
    <link href="http://yoursite.com/2019/07/08/vue-navigation/"/>
    <id>http://yoursite.com/2019/07/08/vue-navigation/</id>
    <published>2019-07-08T09:12:59.089Z</published>
    <updated>2019-07-08T10:36:27.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于vue-navigation"><a href="#关于vue-navigation" class="headerlink" title="关于vue-navigation"></a>关于vue-navigation</h1><ul><li>A page navigation library, record routes and cache pages, like native app navigation. 一个页面导航库，记录路由并缓存页面，像原生APP导航一样。<blockquote><p>github——zack24q</p></blockquote></li></ul><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-- src                         //根路径</span><br><span class="line">  |-- components             </span><br><span class="line">    |-- Navigation.js           //组件</span><br><span class="line">  |-- index.js                  //入口</span><br><span class="line">  |-- navigator.js              //方法</span><br><span class="line">  |-- routes.js                 //缓存</span><br><span class="line">  |-- utils.js                  //工具</span><br></pre></td></tr></table></figure><h1 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h1><h2 id="初始化index-js"><a href="#初始化index-js" class="headerlink" title="初始化index.js"></a>初始化<code>index.js</code></h2><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Navigation <span class="keyword">from</span> <span class="string">'vue-navigation'</span></span><br><span class="line">Vue.use(Navigation, &#123;router, store, <span class="string">'moduleName'</span>, <span class="string">'keyName'</span>&#125;)</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install: <span class="function">(<span class="params">Vue, &#123; router, store, moduleName = <span class="string">'navigation'</span>, keyName = <span class="string">'VNK'</span> &#125; = &#123;&#125;</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>moduleName</code>默认参数<code>navigation</code>：<code>store</code>中缓存的路由名称</li><li><code>keyName</code>默认参数<code>VNK</code>：路径中<code>query</code>的<code>key</code></li></ul><h2 id="初始化navigation-js"><a href="#初始化navigation-js" class="headerlink" title="初始化navigation.js"></a>初始化<code>navigation.js</code></h2><p>初始化<code>index.js</code>之后，随即就会初始化<code>bus</code>以及<code>navigation.js</code></p><ul><li><code>bus</code>主要是在触发<code>navigation</code>中的前进、后退等方法的时候通知触发回调事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"><span class="keyword">this</span>.$navigation.on(<span class="string">'forward'</span>, (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'forward to'</span>, to, <span class="string">'from '</span>, <span class="keyword">from</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$navigation.on(<span class="string">'back'</span>, (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'back to'</span>, to, <span class="string">'from '</span>, <span class="keyword">from</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.$navigation.on(<span class="string">'replace'</span>, (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'replace to'</span>, to, <span class="string">'from '</span>, <span class="keyword">from</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>navigation</code>中主要是对前进，后退等方法的封装，其中会涉及到通过<code>store</code>以及<code>sessionStorage</code>做的路由缓存和<code>bus</code>方法的调用</li></ul><h2 id="初始化组件components-Navigation-js"><a href="#初始化组件components-Navigation-js" class="headerlink" title="初始化组件components/Navigation.js"></a>初始化组件<code>components/Navigation.js</code></h2><p>app.vue(根路径)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><h2 id="全局前置守卫beforeEach"><a href="#全局前置守卫beforeEach" class="headerlink" title="全局前置守卫beforeEach"></a>全局前置守卫<code>beforeEach</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">  router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!to.query[keyName]) &#123;</span><br><span class="line">      <span class="keyword">const</span> query = &#123; ...to.query &#125;</span><br><span class="line">      <span class="comment">// go to the same route will be set the same key</span></span><br><span class="line">      <span class="keyword">if</span> (to.path === <span class="keyword">from</span>.path &amp;&amp; isObjEqual(</span><br><span class="line">        &#123; ...to.query, [keyName]: <span class="literal">null</span> &#125;,</span><br><span class="line">        &#123; ...from.query, [keyName]: <span class="literal">null</span> &#125;,</span><br><span class="line">      ) &amp;&amp; <span class="keyword">from</span>.query[keyName]) &#123;</span><br><span class="line">        query[keyName] = <span class="keyword">from</span>.query[keyName]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        query[keyName] = genKey()</span><br><span class="line">      &#125;</span><br><span class="line">      next(&#123; <span class="attr">name</span>: to.name, <span class="attr">params</span>: to.params, query, <span class="attr">replace</span>: replaceFlag || !<span class="keyword">from</span>.query[keyName] &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>判断前后路由是否一致，如果一直，获取<code>from</code>的路由版本号，不进行版本更新</li><li>如果不一致，获取新的<code>keyName</code>并且放置到新的路由地址中</li></ul><h2 id="全局后置钩子afterEach"><a href="#全局后置钩子afterEach" class="headerlink" title="全局后置钩子afterEach"></a>全局后置钩子<code>afterEach</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">  router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    navigator.record(to, <span class="keyword">from</span>, replaceFlag)</span><br><span class="line">    replaceFlag = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// navigation.js</span></span><br><span class="line"><span class="keyword">const</span> record = <span class="function">(<span class="params">toRoute, fromRoute, replaceFlag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = getKey(toRoute, keyName)</span><br><span class="line">  <span class="keyword">if</span> (replaceFlag) &#123;</span><br><span class="line">    replace(name, toRoute, fromRoute)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> toIndex = Routes.lastIndexOf(name)</span><br><span class="line">    <span class="keyword">if</span> (toIndex === <span class="number">-1</span>) &#123;</span><br><span class="line">      forward(name, toRoute, fromRoute)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toIndex === Routes.length - <span class="number">1</span>) &#123;</span><br><span class="line">      refresh(toRoute, fromRoute)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      back(Routes.length - <span class="number">1</span> - toIndex, toRoute, fromRoute)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>触发路由后置函数 <code>afterEach</code>,调用<code>navigator</code>的<code>record</code>方法</li><li><code>Routes</code>为<code>store</code>以及<code>sessionStorage</code>做的路由缓存</li><li>根据<code>Routes</code>中缓存判断是前进，还是后退，还是刷新，调用不同的事件</li><li><p><code>forward</code>中向缓存新增一条记录，记录的结果如下，并且触发<code>store</code>的<code>navigation/FORWARD</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"index?a28ae28e"</span>,<span class="string">"list?ff674e47"</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>refresh</code>触发<code>store</code>的<code>navigation/REFRESH</code>方法</p></li><li><code>back</code>触发<code>store</code>的<code>navigation/BACK</code>方法，删除一条记录</li></ul><h2 id="components-Navigation-js"><a href="#components-Navigation-js" class="headerlink" title="components/Navigation.js"></a>components/Navigation.js</h2><ul><li><p>在<code>Navigation</code>中检测了缓存<code>routes</code>的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  routes(val) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.cache) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!matches(val, key)) &#123;</span><br><span class="line">        <span class="keyword">const</span> vnode = <span class="keyword">this</span>.cache[key]</span><br><span class="line">        vnode &amp;&amp; vnode.componentInstance.$destroy()</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.cache[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>会根据<code>routes</code>中的变化，改变<code>cache</code>的缓存</p></li><li>在<code>render</code>函数中根据<code>cache</code>的缓存渲染组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.cache[key]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode.key === <span class="keyword">this</span>.cache[key].key) &#123;</span><br><span class="line">    <span class="comment">// restore vnode from cache</span></span><br><span class="line">    vnode.componentInstance = <span class="keyword">this</span>.cache[key].componentInstance</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// replace vnode to cache</span></span><br><span class="line">    <span class="keyword">this</span>.cache[key].componentInstance.$destroy()</span><br><span class="line">    <span class="keyword">this</span>.cache[key] = vnode</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// cache new vnode</span></span><br><span class="line">  <span class="keyword">this</span>.cache[key] = vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="关于路由版本号keyName"><a href="#关于路由版本号keyName" class="headerlink" title="关于路由版本号keyName"></a>关于路由版本号<code>keyName</code></h2><ul><li>只有在前往的页面路径没有<code>keyName</code>并且不是刷新操作的情况下才会生成新的<code>keyName</code>;</li><li>页面是否读取缓存是由路径以及<code>genKey</code>的值来决定的</li><li>页面返回会清除上一个页面的缓存</li><li>刷新页面<code>keyName</code>的值不会发生改变，但是因为组件的缓存是由一个变量<code>cacha</code>来实现的，所以依旧会触发<code>created</code>方法</li></ul><h2 id="关于路由不设置name属性路径没有keyName参数的问题"><a href="#关于路由不设置name属性路径没有keyName参数的问题" class="headerlink" title="关于路由不设置name属性路径没有keyName参数的问题"></a>关于路由不设置<code>name</code>属性路径没有<code>keyName</code>参数的问题</h2><ul><li><p>不设置<code>name</code>页面依旧会缓存，只不过缓存的数据是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"/?undefined"</span>,<span class="string">"/list?undefined"</span>]</span><br></pre></td></tr></table></figure></li><li><p>原因是在全局前置钩子<code>beforeEach</code>中调用<code>next</code>函数的时候，用的是路由<code>name</code>字段，如果没有该字段，设置的<code>query</code>就无效，在<code>afterEach</code>中就无法获取<code>keyName</code>导致缓存为<code>undefined</code>，此种情况下虽然缓存依旧有效，但是不太安全</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>关于其他的地方，比如<code>replace</code>方法，<code>navigation</code>提供的<code>getRoutes</code>和<code>cleanRoutes</code>因为跟主要功能关系不大，未做详细说明</li><li><code>navigation</code>在没有<code>store</code>缓存的情况下会使用<code>sessionStorage</code>作为缓存路径</li><li>无论是<code>store</code>和<code>sessionStorage</code>都没有对组件进行缓存，所以页面刷新必定会引起组件的重新加载</li></ul>]]></content>
    
    <summary type="html">
    
      vue-navigation原理的基本解析；vue-navigation的实现逻辑；vue-navigation中学到的东西
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Less常用方法</title>
    <link href="http://yoursite.com/2019/06/17/less/"/>
    <id>http://yoursite.com/2019/06/17/less/</id>
    <published>2019-06-17T02:51:29.374Z</published>
    <updated>2019-06-18T06:49:22.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路径引入"><a href="#路径引入" class="headerlink" title="路径引入"></a>路径引入</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variables</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/white-sand.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Variables</span></span><br><span class="line"><span class="variable">@themes:</span> <span class="string">"../../src/themes"</span>;</span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"@&#123;themes&#125;/tidal-wave.less"</span>;</span><br></pre></td></tr></table></figure><h1 id="属性代替"><a href="#属性代替" class="headerlink" title="属性代替"></a>属性代替</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@property:</span> color;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  <span class="attribute">@&#123;property&#125;</span>: <span class="number">#0ee</span>;</span><br><span class="line">  <span class="selector-tag">background-</span><span class="variable">@&#123;property&#125;</span>: <span class="selector-id">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="延伸选择器"><a href="#延伸选择器" class="headerlink" title="延伸选择器"></a>延伸选择器</h1><h2 id="初步用法"><a href="#初步用法" class="headerlink" title="初步用法"></a>初步用法</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.inline)</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span>,</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比混入"><a href="#对比混入" class="headerlink" title="对比混入"></a>对比混入</h2><p>示例 - 使用mixin：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-inline-block</span>() &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thing1</span> &#123;</span><br><span class="line">  <span class="selector-class">.my-inline-block</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thing2</span> &#123;</span><br><span class="line">  <span class="selector-class">.my-inline-block</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.thing1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thing2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-inline-block</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thing1</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.my-inline-block)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thing2</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.my-inline-block)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-inline-block</span>,</span><br><span class="line"><span class="selector-class">.thing1</span>,</span><br><span class="line"><span class="selector-class">.thing2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Mixins中的选择器"><a href="#Mixins中的选择器" class="headerlink" title="Mixins中的选择器"></a>Mixins中的选择器</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-hover-mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="selector-class">.my-hover-mixin</span>();</span><br><span class="line">&#125;</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line"><span class="attribute">button</span>:hover &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="属性循环"><a href="#属性循环" class="headerlink" title="属性循环"></a>属性循环</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.loop</span>(<span class="variable">@counter</span>) <span class="keyword">when</span> (<span class="variable">@counter</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.loop</span>((<span class="variable">@counter</span> - <span class="number">1</span>));    <span class="comment">// next iteration</span></span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">10px</span> * <span class="variable">@counter</span>); <span class="comment">// code for each iteration</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.loop</span>(<span class="number">5</span>); <span class="comment">// launch the loop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类名循环"><a href="#类名循环" class="headerlink" title="类名循环"></a>类名循环</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.generate-columns</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, <span class="variable">@i</span>: <span class="number">1</span>) <span class="keyword">when</span> (<span class="variable">@i</span> =&lt; <span class="variable">@n</span>) &#123;</span><br><span class="line">  <span class="selector-class">.column-</span><span class="variable">@&#123;i&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="variable">@i</span> * <span class="number">100%</span> / <span class="variable">@n</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.generate-columns</span>(<span class="variable">@n</span>, (<span class="variable">@i</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.column-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="父选择器"><a href="#父选择器" class="headerlink" title="父选择器"></a>父选择器</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span>:hover &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-ok</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"ok.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-cancel</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"cancel.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-custom</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"custom.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button-ok</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"ok.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-cancel</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"cancel.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-custom</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"custom.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      less的一些基本用法
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>常用方法库</title>
    <link href="http://yoursite.com/2019/05/22/lib/"/>
    <id>http://yoursite.com/2019/05/22/lib/</id>
    <published>2019-05-22T01:22:51.465Z</published>
    <updated>2019-06-17T01:24:25.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="多行最后一行-···"><a href="#多行最后一行-···" class="headerlink" title="多行最后一行 ···"></a>多行最后一行 ···</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.answer-body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="获取设备像素比"><a href="#获取设备像素比" class="headerlink" title="获取设备像素比"></a>获取设备像素比</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.devicePixelRatio</span><br></pre></td></tr></table></figure><h2 id="获取浏览器信息"><a href="#获取浏览器信息" class="headerlink" title="获取浏览器信息"></a>获取浏览器信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 关于事件参数对象的工具的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">evtTools = &#123;</span><br><span class="line">    <span class="comment">//事件参数</span></span><br><span class="line">    evt: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.event ? <span class="built_in">window</span>.event : e;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//页面向左卷曲出去的距离</span></span><br><span class="line">    left: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//页面向上卷曲出去的距离</span></span><br><span class="line">    top: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop || <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//事件参数对象中的属性封装---可视区域的横坐标</span></span><br><span class="line">    clientX: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.evt(e).clientX;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//事件参数对象中的属性封装---可视区域的纵坐标</span></span><br><span class="line">    clientY: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.evt(e).clientY;</span><br><span class="line">    &#125;,</span><br><span class="line">    pageX: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.evt(e).pageX ? <span class="keyword">this</span>.evt(e).pageX : <span class="keyword">this</span>.left() + <span class="keyword">this</span>.clientX(e);</span><br><span class="line">    &#125;,</span><br><span class="line">    pageY: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.evt(e).pageY ? <span class="keyword">this</span>.evt(e).pageY : <span class="keyword">this</span>.top() + <span class="keyword">this</span>.clientY(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 当浏览器的宽度发生变化,就获取浏览器(页面可视区域的宽度)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">getClient = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.body.clientWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="number">0</span>,</span><br><span class="line">        height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取元素的样式属性"><a href="#获取元素的样式属性" class="headerlink" title="获取元素的样式属性"></a>获取元素的样式属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取元素的样式属性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">getStyle = <span class="function">(<span class="params">element, attr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = element.currentStyle ? element.currentStyle[attr] : <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[attr];</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="string">"auto"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="绑定解绑事件"><a href="#绑定解绑事件" class="headerlink" title="绑定解绑事件"></a>绑定解绑事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 为元素绑定多个属性的兼容代码</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">addEventListener = <span class="function">(<span class="params">element, type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (element.addEventListener) != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (element.attachEvent) != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        element.attachEvent(<span class="string">"on"</span> + type, fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">"on"</span> + type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 解绑兼容函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">removeEventListener = <span class="function">(<span class="params">element, type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (element.removeEventListener) != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        element.removeEventListener(type, fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (element.detachEvent) != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        element.detachEvent(<span class="string">"on"</span> + type, fn)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">"on"</span> + click] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据类型校验"><a href="#数据类型校验" class="headerlink" title="数据类型校验"></a>数据类型校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object String]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Number]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDate</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Date]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object RegExp]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="去掉最后一个字符"><a href="#去掉最后一个字符" class="headerlink" title="去掉最后一个字符"></a>去掉最后一个字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=s.substring(<span class="number">0</span>,s.length<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="获取路由路径"><a href="#获取路由路径" class="headerlink" title="获取路由路径"></a>获取路由路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.hash.match(<span class="regexp">/#(\S*)\?[\S]*/</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><h2 id="正则查找所有console"><a href="#正则查找所有console" class="headerlink" title="正则查找所有console"></a>正则查找所有console</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((.*))</span><br></pre></td></tr></table></figure><h2 id="ESlint配置"><a href="#ESlint配置" class="headerlink" title="ESlint配置"></a>ESlint配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"extensions.ignoreRecommendations"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"wrap_attributes"</span>: <span class="string">"force-aligned"</span>,</span><br><span class="line">        <span class="attr">"prettyhtml"</span>: &#123;</span><br><span class="line">            <span class="attr">"printWidth"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">"singleQuote"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"wrapAttributes"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"sortAttributes"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">        <span class="attr">"*.vue"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="attr">"*.less"</span>: <span class="string">"less"</span>,</span><br><span class="line">        <span class="attr">"*.cjson"</span>: <span class="string">"jsonc"</span>,</span><br><span class="line">        <span class="attr">"*.wxss"</span>: <span class="string">"css"</span>,</span><br><span class="line">        <span class="attr">"*.wxs"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="attr">"*.js"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="attr">"*.swig"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"*.styl"</span>: <span class="string">"css"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"git.enableSmartCommit"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"breadcrumbs.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"javascript.updateImportsOnFileMove.enabled"</span>: <span class="string">"always"</span>,</span><br><span class="line">    <span class="attr">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">        <span class="attr">"wxml"</span>: <span class="string">"html"</span>,</span><br><span class="line">        <span class="attr">"javascript"</span>: <span class="string">"javascriptreact"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"minapp-vscode.disableAutoConfig"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">"editor.fontWeight"</span>: <span class="string">"100"</span>,</span><br><span class="line">    <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"git.confirmSync"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    // "editor.renderWhitespace": "boundary",</span><br><span class="line">    // "editor.cursorBlinking": "smooth",</span><br><span class="line">    "editor.minimap.enabled": true,</span><br><span class="line">    "editor.minimap.renderCharacters": false,</span><br><span class="line">    "window.title": "$&#123;dirty&#125;$&#123;activeEditorMedium&#125;$&#123;separator&#125;$&#123;rootName&#125;",</span><br><span class="line">    // "editor.codeLens": true,</span><br><span class="line">    // 配置文件关联，以便启用对应的提示</span><br><span class="line">    // 配置emmet是否启用tab展开缩写</span><br><span class="line">    "emmet.triggerExpansionOnTab": true,</span><br><span class="line">    // 配置emmet对文件类型的支持</span><br><span class="line">    "emmet.syntaxProfiles": &#123;</span><br><span class="line">        "javascript": "jsx",</span><br><span class="line">        "vue": "html",</span><br><span class="line">        "vue-html": "html"</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否开启eslint检测</span><br><span class="line">    "eslint.enable": true,</span><br><span class="line">    // 文件保存时是否根据eslint进行格式化</span><br><span class="line">    "eslint.autoFixOnSave": true,</span><br><span class="line">    // eslint配置文件</span><br><span class="line">    "eslint.options": &#123;</span><br><span class="line">        "extensions": [</span><br><span class="line">            ".js",</span><br><span class="line">            <span class="string">".vue"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    // eslint能够识别的文件后缀类型</span><br><span class="line">    "eslint.validate": [</span><br><span class="line">        "javascript",</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        "html",</span><br><span class="line">        "vue",</span><br><span class="line">        <span class="string">"jsx"</span></span><br><span class="line">    ],</span><br><span class="line">    "search.exclude": &#123;</span><br><span class="line">        "**/node_modules": true,</span><br><span class="line">        "**/bower_components": true,</span><br><span class="line">        "**/dist": true</span><br><span class="line">    &#125;,</span><br><span class="line">    "workbench.colorTheme": "Solarized Dark",</span><br><span class="line">    // 格式化快捷键（默认）：Shift+Alt+F</span><br><span class="line">    // prettier进行格式化时，开启eslint支持</span><br><span class="line">    // "prettier.eslintIntegration": true,</span><br><span class="line">    // // 是否使用单引号</span><br><span class="line">    // "prettier.singleQuote": true,</span><br><span class="line">    "line-counter.excludes": [</span><br><span class="line">        "**/build/**",</span><br><span class="line">        "**/.vscode/**",</span><br><span class="line">        <span class="string">"**/node_modules/**"</span></span><br><span class="line">    ],</span><br><span class="line">    "terminal.integrated.rendererType": "dom",</span><br><span class="line">    "search.followSymlinks": false,</span><br><span class="line">    "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">    "vetur.format.defaultFormatter.ts": "vscode-typescript"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])) <span class="comment">//[1,2,3,4]</span></span><br><span class="line">[...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])] <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><h2 id="是否包含某值"><a href="#是否包含某值" class="headerlink" title="是否包含某值"></a>是否包含某值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">//false</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>) <span class="comment">//-1 如果存在换回索引</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].find(<span class="function">(<span class="params">item</span>)=&gt;</span>item===<span class="number">3</span>)) <span class="comment">//3 如果数组中无值返回undefined</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(<span class="function">(<span class="params">item</span>)=&gt;</span>item===<span class="number">3</span>)) <span class="comment">//2 如果数组中无值返回-1</span></span><br></pre></td></tr></table></figure><h2 id="类数组转换"><a href="#类数组转换" class="headerlink" title="类数组转换"></a>类数组转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">//arguments是类数组(伪数组)</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">[...arguments]</span><br></pre></td></tr></table></figure><h2 id="提取对象key"><a href="#提取对象key" class="headerlink" title="提取对象key"></a>提取对象key</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;) <span class="comment">//['name','age']</span></span><br></pre></td></tr></table></figure><h2 id="提取对象value"><a href="#提取对象value" class="headerlink" title="提取对象value"></a>提取对象value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;) <span class="comment">//['张三',14]</span></span><br></pre></td></tr></table></figure><h2 id="提取对象key和value"><a href="#提取对象key和value" class="headerlink" title="提取对象key和value"></a>提取对象key和value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.entries(&#123;<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="number">14</span>&#125;) <span class="comment">//[[name,'张三'],[age,14]]</span></span><br></pre></td></tr></table></figure><h2 id="将提取的key和value放回去"><a href="#将提取的key和value放回去" class="headerlink" title="将提取的key和value放回去"></a>将提取的key和value放回去</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.fromEntries([name,<span class="string">'张三'</span>],[age,<span class="number">14</span>]) <span class="comment">//ES10的api,Chrome不支持 , firebox输出&#123;name:'张三',age:14&#125;</span></span><br></pre></td></tr></table></figure><h2 id="每一项设置值"><a href="#每一项设置值" class="headerlink" title="每一项设置值"></a>每一项设置值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].fill(<span class="literal">false</span>) <span class="comment">//[false,false,false] </span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="每一项是否满足"><a href="#每一项是否满足" class="headerlink" title="每一项是否满足"></a>每一项是否满足</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="有一项满足"><a href="#有一项满足" class="headerlink" title="有一项满足"></a>有一项满足</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].some(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="过滤数组"><a href="#过滤数组" class="headerlink" title="过滤数组"></a>过滤数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">2</span>&#125;) <span class="comment">//[3]</span></span><br></pre></td></tr></table></figure><h2 id="按照索引删除元素"><a href="#按照索引删除元素" class="headerlink" title="按照索引删除元素"></a>按照索引删除元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].splice(index,<span class="number">1</span>) <span class="comment">//[1,3]</span></span><br></pre></td></tr></table></figure><h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">英文名: <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span></span><br><span class="line">中文名: <span class="regexp">/^[\u4E00-\u9FA5]&#123;2,4&#125;$/</span></span><br><span class="line">密码: <span class="regexp">/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,18&#125;$/</span></span><br><span class="line">邮箱: <span class="regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/</span></span><br><span class="line">手机号: <span class="regexp">/^[1][0-9]&#123;10&#125;$/</span></span><br><span class="line">身份证号: <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      常用的Array、String、Object、Number等处理方法，常用正则表达式写法，浏览器方法的兼容写法，获取各种浏览器数据方法，包括ES6写法等
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3初始化项目</title>
    <link href="http://yoursite.com/2019/04/28/vue-cli3_start/"/>
    <id>http://yoursite.com/2019/04/28/vue-cli3_start/</id>
    <published>2019-04-28T05:45:43.644Z</published>
    <updated>2019-10-14T07:43:24.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h1 id="创建配置"><a href="#创建配置" class="headerlink" title="创建配置"></a>创建配置</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-app</span><br></pre></td></tr></table></figure><h2 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line"><span class="meta">&gt;</span> 1 (babel, eslint)</span><br><span class="line">  default (babel, eslint)</span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><ul><li>保存过的配置</li><li>默认配置</li><li>自定义配置</li></ul><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Babel</span><br><span class="line"> (*) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"><span class="meta">&gt;</span>( ) Vuex</span><br><span class="line"> (*) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> (*) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><p>可以直接按数字键1,2,3,4进行选择</p><ul><li>Babel：将ES6编译成ES5</li><li>TypeScript：JS超集，主要是类型检查</li><li>Router和Vuex，路由和状态管理</li><li>Linter/ Formatter：代码检查工具</li><li>CSS Pre-processors：css预编译 (稍后会对这里进行配置)</li><li>Unit Testing：单元测试，开发过程中前端对代码进行自运行测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use class-style component syntax? (Y/n) y</span><br></pre></td></tr></table></figure><p>是否使用Class风格装饰器？<br>即原本是：home = new Vue()创建vue实例<br>使用装饰器后：class home extends Vue{}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use Babel alongside TypeScript for auto-detected polyfills? (Y/n) y</span><br></pre></td></tr></table></figure><p>使用Babel与TypeScript一起用于自动检测的填充? yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) y</span><br></pre></td></tr></table></figure><p>路由使用历史模式? 这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)</span><br><span class="line"><span class="meta">&gt;</span> Sass/SCSS (with dart-sass)</span><br><span class="line">  Sass/SCSS (with node-sass)</span><br><span class="line">  Less</span><br><span class="line">  Stylus</span><br></pre></td></tr></table></figure><p>使用什么css预编译器？ 看个人习惯</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line"><span class="meta">&gt;</span> TSLint</span><br><span class="line">  ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">  ESLint + Standard config</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><p>tslint: typescript格式验证工具<br>eslint w…: 只进行报错提醒；<br>eslint + A…: 不严谨模式；<br>eslint + S…: 正常模式；<br>eslint + P…: 严格模式；</p><p>建议选择正常模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line"><span class="meta">&gt;</span>(*) Lint on save</span><br><span class="line"> ( ) Lint and fix on commit</span><br></pre></td></tr></table></figure><p>代码检查方式</p><ul><li>保存时检查</li><li>提交时检查并修复</li></ul><h1 id="启动打包配置"><a href="#启动打包配置" class="headerlink" title="启动打包配置"></a>启动打包配置</h1><p>可以在项目最外层新建<code>vue.confi.js</code>来配置端口，代理等配置，具体可以参照<a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装vue-cli&quot;&gt;&lt;a href=&quot;#安装vue-cli&quot; class=&quot;headerlink&quot; title=&quot;安装vue-cli&quot;&gt;&lt;/a&gt;安装vue-cli&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>CG-FLOW-FE-ELE组件说明文档</title>
    <link href="http://yoursite.com/2019/04/25/cg-flow-fe-ele/"/>
    <id>http://yoursite.com/2019/04/25/cg-flow-fe-ele/</id>
    <published>2019-04-25T07:23:45.981Z</published>
    <updated>2019-06-21T01:29:22.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于cg-flow-fe-ele"><a href="#关于cg-flow-fe-ele" class="headerlink" title="关于cg-flow-fe-ele"></a>关于cg-flow-fe-ele</h1><h2 id="主要技术点"><a href="#主要技术点" class="headerlink" title="主要技术点"></a>主要技术点</h2><ul><li>Vue</li><li>ElementUi</li><li>Axios(可选)</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>cg-flow-fe-ele（以下简称flow）包括6个组件，主要作用为已注册工作流展示，工作流编辑&amp;添加，进程展示（待处理，已处理，处理历史），以及进程展示</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>flow的框架基于<code>Vue</code>,UI基于<code>Elementui</code>,请求基于<code>Axios</code>，在使用flow之前保证项目已经依赖三者</li><li>flow所有组件主要基于<code>Web</code>端，进程展示组件兼容移动端</li><li>各个组件的具体要求参数会在下方详细说明</li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  Flow <span class="keyword">from</span> <span class="string">'cg-flow-fe-ele'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'cg-flow-fe-ele/dist/cg-flow-fe-ele.css'</span></span><br><span class="line"><span class="keyword">const</span> theme = &#123;</span><br><span class="line">  fs:<span class="string">'mini'</span>,  <span class="comment">//可选值medium / small / mini</span></span><br><span class="line">  color:<span class="string">'red'</span> <span class="comment">// red</span></span><br><span class="line">&#125;</span><br><span class="line">Vue.use(Flow, &#123; api, web, theme &#125;)</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul><li><code>api&amp;web</code>主要服务于<code>axios</code>,如果项目内已经配置了<code>axios</code>,这两个参数非必传;</li><li><code>theme</code>参数有两个<code>fs</code>和<code>color</code><ul><li><code>fs</code>：可选值medium / small / mini，设置input、下拉框select、按钮button的大小</li><li><code>color</code>:可选值red，设置主题色</li></ul></li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="工作流列表"><a href="#工作流列表" class="headerlink" title="工作流列表"></a>工作流列表</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>组件名称：<code>approval-list</code><br>基本使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">approval-list</span> <span class="attr">path</span>=<span class="string">'FlowEdit'</span>&gt;</span><span class="tag">&lt;/<span class="name">approval-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">path</td><td style="text-align:center">详情所在组件路由query参数</td><td style="text-align:center">如果使用了header以及flow-list的slot，此参数可以不传</td></tr></tbody></table><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th><th style="text-align:center">参数</th></tr></thead><tbody><tr><td style="text-align:center">header</td><td style="text-align:center">头部</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">flow-list</td><td style="text-align:center">表格列表</td><td style="text-align:center">flowList：列表数据</td></tr></tbody></table><h2 id="进行中流程详情展示"><a href="#进行中流程详情展示" class="headerlink" title="进行中流程详情展示"></a>进行中流程详情展示</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>组件名称：<code>processess-detail</code><br>基本使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">processess-detail</span> <span class="attr">backgroundColor</span>=<span class="string">"#fff"</span> <span class="attr">nodeWidth</span>=<span class="string">"300"</span> <span class="attr">:processId</span>=<span class="string">"processDetail.processId"</span> <span class="attr">container</span> = <span class="string">"div"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">processess-detail</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">类型</th><th style="text-align:center">可选值</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">processId</td><td style="text-align:center">进程列表的 processId参数（必传）</td><td style="text-align:center">String</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">backgroundColor</td><td style="text-align:center">背景色</td><td style="text-align:center">String</td><td style="text-align:center">所有16进制颜色</td><td style="text-align:center">#f5f5f7</td></tr><tr><td style="text-align:center">container</td><td style="text-align:center">组件所在容器类型</td><td style="text-align:center">String</td><td style="text-align:center">div/window</td><td style="text-align:center">window</td></tr><tr><td style="text-align:center">nodeWidth</td><td style="text-align:center">节点宽度</td><td style="text-align:center">String</td><td style="text-align:center"></td><td style="text-align:center">200</td></tr><tr><td style="text-align:center">unprocessedType</td><td style="text-align:center">展示未处理节点样式</td><td style="text-align:center">String</td><td style="text-align:center">default/simple/none</td><td style="text-align:center">default</td></tr></tbody></table><h3 id="插槽-1"><a href="#插槽-1" class="headerlink" title="插槽"></a>插槽</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th><th style="text-align:center">参数1</th><th style="text-align:center">参数2</th></tr></thead><tbody><tr><td style="text-align:center">control-size</td><td style="text-align:center">控制流程大小比例</td><td style="text-align:center">size：为目前流程大小（%）</td><td style="text-align:center">function：change 控制size大小；参数：add（String）增加、sub（String）减小</td></tr><tr><td style="text-align:center">header</td><td style="text-align:center">节点头部</td><td style="text-align:center">row：节点数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">节点内容</td><td style="text-align:center">row：节点数据</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">line</td><td style="text-align:center">节点连接线</td><td style="text-align:center">row：节点数据</td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      cg-flow-fe-ele组件的相关说明文档,主要包括作用，图例，使用方式，参数说明，使用场景等的介绍
    
    </summary>
    
      <category term="Lib" scheme="http://yoursite.com/categories/Lib/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTML&amp;CSS</title>
    <link href="http://yoursite.com/2019/03/06/html_css/"/>
    <id>http://yoursite.com/2019/03/06/html_css/</id>
    <published>2019-03-06T02:07:03.509Z</published>
    <updated>2019-05-22T01:21:57.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>盒模型的组成大家肯定都懂，由里向外content,padding,border,margin.</p><p>盒模型是有两种标准的，一个是标准模型，一个是IE模型。</p><p><img src="/2019/03/06/html_css/1.png" alt="1542077018582"><br><img src="/2019/03/06/html_css/2.png" alt="1542077018582"></p><p>在标准模型中，盒模型的宽高只是内容（content）的宽高，</p><p>而在IE模型中盒模型的宽高是内容(content)+填充(padding)+边框(border)的总宽高。</p><h2 id="css如何设置两种模型"><a href="#css如何设置两种模型" class="headerlink" title="css如何设置两种模型"></a>css如何设置两种模型</h2><p>这里用到了CSS3 的属性 box-sizing</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标准模型 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:content-box</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*IE模型*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span><br></pre></td></tr></table></figure><h1 id="rem布局最终方案"><a href="#rem布局最终方案" class="headerlink" title="rem布局最终方案"></a>rem布局最终方案</h1><p>Rem布局方案</p><p>通过上面可以得出最好的弹性布局方案是，rem+js方案，同时还要解决noscript问题，解决字体问题，解决屏幕过宽问题</p><p>但是上面的方案还有个问题，就是分成100份的话，假设屏幕宽度320，此时html大小是3.2px，但浏览器支持最小字体大小是12px，怎么办？那就分成10份呗，只要把上面的100都换成10就好了</p><p>下面给一个完整的例子，css的计算没有使用预处理器，这个很简单</p><p>html代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rem布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>开启JavaScript，获得更好的体验<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">        宽度为屏幕宽度的50%，字体大小1.2em</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s1"</span>&gt;</span></span><br><span class="line">            字体大小1.2.em</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span></span><br><span class="line">        宽度为屏幕宽度的40%，字体大小默认</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span></span><br><span class="line">            字体大小1.2em</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">32px</span>; <span class="comment">/* 320/10 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 修正字体大小 */</span></span><br><span class="line">    <span class="comment">/* 防止页面过宽 */</span></span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10rem</span>;</span><br><span class="line">    <span class="comment">/* 防止页面过宽 */</span></span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">1px</span> dashed green;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* js被禁止的回退方案 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">32px</span>&#125;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;<span class="attribute">font-size</span>: <span class="number">16px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">481px</span>) and (max-width:<span class="number">640px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">48px</span>&#125;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;<span class="attribute">font-size</span>: <span class="number">18px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">641px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">64px</span>&#125;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">noscript</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6e9c6</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#dff0d8</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c763d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* js被禁止的回退方案 */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.p1</span>, <span class="selector-class">.p2</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5rem</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/* 字体使用em */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/* 字体使用em */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span> <span class="comment">/* 字体使用em */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">w, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> documentElement = <span class="built_in">document</span>.documentElement</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientWidth = documentElement.clientWidth</span><br><span class="line">    <span class="comment">// 屏幕宽度大于780，不在放大</span></span><br><span class="line">    clientWidth = clientWidth &lt; <span class="number">780</span> ? clientWidth : <span class="number">780</span></span><br><span class="line">    documentElement.style.fontSize = clientWidth / <span class="number">15</span> + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, callback)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>, callback)</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>)</span><br></pre></td></tr></table></figure><p>750设计图的情况下使用方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">500rem</span>/<span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS样式格式化代码"><a href="#CSS样式格式化代码" class="headerlink" title="CSS样式格式化代码"></a>CSS样式格式化代码</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css清除默认样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">'黑体'</span>, sans-serif;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#F9F9F9</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*a的默认下划线和字体颜色| 移动端点击蓝边*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: @primary-color ;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span>,</span><br><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">b</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=button]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=file]</span>,</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*解决苹果手机默认的背景透明*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'黑体'</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="search"]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-search-cancel-button</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*li里浮动,li不浮动，去3像素bug*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*a包img：去蓝色边框*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*a包img：去3像素bug*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">tr</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      包括CSS盒模型、BFC、常用布局方案、移动端适配等
    
    </summary>
    
      <category term="HTML/CSS Base" scheme="http://yoursite.com/categories/HTML-CSS-Base/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于JS插件</title>
    <link href="http://yoursite.com/2019/02/27/plugin_base/"/>
    <id>http://yoursite.com/2019/02/27/plugin_base/</id>
    <published>2019-02-27T02:01:09.616Z</published>
    <updated>2019-03-01T08:54:33.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>很早之前就想写一个方法库，用于项目中数据处理，数据验证方面，后来写了一个，使用的是ES6的<code>Class</code>方法，使用<code>import</code>模块化，这就局限于了支持ES6的前提，而且不支持其他模块，无法静态引入，而且很多方法使用繁琐，也不是很满意，就打算研究一下JS插件的一般写法，然后做一下完善；</p><h1 id="JS插件实现步骤"><a href="#JS插件实现步骤" class="headerlink" title="JS插件实现步骤"></a>JS插件实现步骤</h1><h2 id="关于构造函数"><a href="#关于构造函数" class="headerlink" title="关于构造函数"></a>关于构造函数</h2><p>最早写JS插件的时候，用的最多的是构造函数<code>Function</code>，使用方式基本以静态引入为主；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plugins</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Plugins.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于闭包"><a href="#关于闭包" class="headerlink" title="关于闭包"></a>关于闭包</h2><p>我们的plugin对象，是定义在全局域里面的。我们知道，js变量的调用，从全局作用域上找查的速度会比在私有作用域里面慢得多得多。所以，我们最好将插件逻辑写在一个私有作用域中。<br>实现私有作用域，最好的办法就是使用闭包。可以把插件当做一个函数，插件内部的变量及函数的私有变量，为了在调用插件后依旧能使用其功能，闭包的作用就是延长函数(插件)内部变量的生命周期，使得插件函数可以重复调用，而不影响用户自身作用域。<br>故需将插件的所有功能写在一个立即执行函数中：</p><ul><li>最开始的<code>if</code>判断是喂了防止命名冲突（最好和开发伙伴定好命名规则，比如每个方法开头标注代表字母等）</li><li>在定义插件之前添加一个分号，可以解决js合并时可能会产生的错误问题；</li><li>undefined在老一辈的浏览器是不被支持的，直接使用会报错，js框架要考虑到兼容性，因此增加一个形参undefined，就算有人把外面的 undefined 定义了，里面的 undefined 依然不受影响；</li><li>把window对象作为参数传入，是避免了函数执行的时候到外部去查找。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">w, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Plugins) &#123; </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Plugins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Plugins.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        w.Plugins = Plugins;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><h2 id="关于Window"><a href="#关于Window" class="headerlink" title="关于Window"></a>关于Window</h2><p>以上例子中我把<code>window</code>作为<code>global</code>顶级对象传入插件，但是如果此插件并不是用在浏览器中，比如在<code>node</code>中可以访问到<code>global</code>顶级对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">    "use strict"</span> <span class="comment">//使用js严格模式检查，使语法更规范</span></span><br><span class="line">    <span class="keyword">var</span> _global;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Plugins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Plugins.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后将插件对象暴露给全局对象</span></span><br><span class="line">    _global = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">'this'</span>); &#125;());</span><br><span class="line">    !(<span class="string">'Plugins'</span> <span class="keyword">in</span> _global) &amp;&amp; (_global.Plugins = Plugins)</span><br><span class="line"></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>关于<code>(0, eval)(&#39;this&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">'this'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>在这里的(0,eval) 返回的是eval函数，在这里为什么要用(0,eval),当然，正常情况(非IE)下，可以直接使用eval()，但是在部分低版本的ie中，不可以直接运行eval，所以可以使用 (0,eval)；</p><h2 id="关于模块化"><a href="#关于模块化" class="headerlink" title="关于模块化"></a>关于模块化</h2><p>一般项目除了静态引入JS插件以外，还需要需要支持一定模块化规范<code>common.js</code>、<code>AMD</code>、<code>CMD</code>，所以在配置插件的时候也需要注意模块化的设置</p><p>为什么需要代码模块化？</p><p>如果是多个人一起开发一个大型的插件,多人合作，肯定会产生多个文件，每个人负责一个小功能，那么如何才能将所有人开发的代码集合起来呢？这是一个讨厌的问题。要实现协作开发插件，必须具备如下条件：</p><ul><li><p>每功能互相之间的依赖必须要明确，则必须严格按照依赖的顺序进行合并或者加载</p></li><li><p>每个子功能分别都要是一个闭包，并且将公共的接口暴露到共享域也即是一个被主函数暴露的公共对象</p></li></ul><p>以上需求也可能通过按需引入JS实现，比较繁琐，而且不能实现按需加载；</p><p>综合以上，需要我们插件也实现模块化的机制,只要判断是否存在加载器，如果存在加载器，我们就使用加载器，如果不存在加载器。我们就使用顶级域对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">    "use strict"</span> <span class="comment">//使用js严格模式检查，使语法更规范</span></span><br><span class="line">    <span class="keyword">var</span> _global;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Plugins</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Plugins.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后将插件对象暴露给全局对象</span></span><br><span class="line">    _global = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">'this'</span>); &#125;());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = Plugins;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> Plugins; &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _global.Plugins = Plugins;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h1 id="jQuery插件源码"><a href="#jQuery插件源码" class="headerlink" title="jQuery插件源码"></a>jQuery插件源码</h1><p>在实现插件的基本功能之后，把<code>jquery</code>源码抽出来一部分，主要是通过模块化、顶级对象和以上代码对比；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//严格模式</span></span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断是否支持common.js，可以理解为判断是否是node环境*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断顶级对象中是否有document</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">module</span>.exports = global.document ?</span><br><span class="line">            factory(global, <span class="literal">true</span>) :</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!w.document) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"jQuery requires a window with a document"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> factory(w);</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        factory(global);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">window, noGlobal</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">"3.3.1"</span>,</span><br><span class="line">        jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line"></span><br><span class="line">        jquery: version,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span>: jQuery,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置支持AMD规范</span><br><span class="line"></span><br><span class="line">    if (typeof define === "function" &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(<span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> jQuery;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!noGlobal) &#123;</span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一般开发插件的基本设计模式，如何支持模块化等
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="plugin" scheme="http://yoursite.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中间层项目概览</title>
    <link href="http://yoursite.com/2019/02/22/node_middle/"/>
    <id>http://yoursite.com/2019/02/22/node_middle/</id>
    <published>2019-02-22T01:19:25.164Z</published>
    <updated>2019-02-22T06:39:57.721Z</updated>
    
    <content type="html"><![CDATA[<p>解决SEO问题和页面渲染问题；</p><h1 id="开发技术架构"><a href="#开发技术架构" class="headerlink" title="开发技术架构"></a>开发技术架构</h1><h2 id="架构图解"><a href="#架构图解" class="headerlink" title="架构图解"></a>架构图解</h2><p><img src="/2019/02/22/node_middle/1.png" alt="架构"></p><h2 id="技术讲解"><a href="#技术讲解" class="headerlink" title="技术讲解"></a>技术讲解</h2><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p><h4 id="与express对比"><a href="#与express对比" class="headerlink" title="与express对比"></a>与express对比</h4><p>koa是一个比express更精简，使用node新特性的中间件框架，相比之前express就是一个庞大的框架</p><ul><li>如果你喜欢diy，很潮，可以考虑koa，它有足够的扩展和中间件，而且自己写很简单</li><li>如果你想简单点，找一个框架啥都有，那么先express</li><li>团队成本问题，如果他们连express都不会，上来就koa，学习曲线太陡，不合适</li><li>目前基于express的快读开发框架需要一段时间迁移到koa</li></ul><h3 id="bcrypt"><a href="#bcrypt" class="headerlink" title="bcrypt"></a>bcrypt</h3><p>一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。</p><h3 id="Nodemailer"><a href="#Nodemailer" class="headerlink" title="Nodemailer"></a>Nodemailer</h3><p>是 Node.js 应用程序的一个模块，可以方便地发送电子邮件。<br>该项目于 2010 年开始，至今已经相当稳定，这也是如今大多数 Node.js 用户默认情况下发送邮件的解决方案。</p><h3 id="apollo-server"><a href="#apollo-server" class="headerlink" title="apollo-server"></a>apollo-server</h3><p>一个在nodejs上构建grqphql服务端的web中间件。支持express，koa ，hapi等框架。</p><h3 id="Handlebars"><a href="#Handlebars" class="headerlink" title="Handlebars"></a>Handlebars</h3><p>JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。它采用”Logic-less template”（无逻辑模版）的思路，在加载时被预编译，而不是到了客户端执行到代码时再去编译， 这样可以保证模板加载和运行的速度。<br>简单的说就是：Handlebars是一个很好的前后端的分离的方案</p><h1 id="项目所需介绍"><a href="#项目所需介绍" class="headerlink" title="项目所需介绍"></a>项目所需介绍</h1><h2 id="Nunjucks"><a href="#Nunjucks" class="headerlink" title="Nunjucks"></a>Nunjucks</h2><p><a href="https://nunjucks.bootcss.com/" target="_blank" rel="noopener">中文文档</a></p><p>JavaScript 专用的功能丰富、强大的模板引擎。</p><h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h2><p><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">中文文档</a></p><p>一个一致性、模块化、高性能的 JavaScript 实用工具库。</p><p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。<br>Lodash 的模块化方法 非常适用于：</p><ul><li>遍历 array、object 和 string</li><li>对值进行操作和检测</li><li>创建符合功能的函数</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>mongodb: <a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">数据库软件</a></p></blockquote><blockquote><p>jsonplaceholder：<a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">api接口</a></p></blockquote><blockquote><p>Postman:<a href="https://www.getpostman.com/apps" target="_blank" rel="noopener">接口测试下载软件</a></p></blockquote><blockquote><p>svg-captcha:<a href="https://github.com/lemonce/svg-captcha/blob/1.x/README_CN.md" target="_blank" rel="noopener">验证码工具</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      此项目是基于Node.js中间层服务端渲染解决方案，基于当下比较流行的微服务前后端分离的开发方案；
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期详解</title>
    <link href="http://yoursite.com/2019/01/23/vue_lifeCycle/"/>
    <id>http://yoursite.com/2019/01/23/vue_lifeCycle/</id>
    <published>2019-01-23T02:48:57.305Z</published>
    <updated>2019-01-23T05:57:14.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue()"></a>new Vue()</h1><p>这时<code>new</code>了一个<code>Vue</code> 的实例对象，此时，就会进入组件的创建过程</p><h1 id="init-Events-amp-Lifecycle"><a href="#init-Events-amp-Lifecycle" class="headerlink" title="init Events&amp;Lifecycle"></a>init Events&amp;Lifecycle</h1><p>初始化组件、事件和声明周期，当执行完这一步，组件的声明周期函数，就都已经初始化好了，等待依次去调用</p><h1 id="beforeCreated"><a href="#beforeCreated" class="headerlink" title="beforeCreated"></a>beforeCreated</h1><p>这时第一个生命周期函数，此时，组件的<code>data</code>和<code>methods</code>以及dom结构，都还没有初始化，此时什么都做不了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeCreate-data:'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeCreate-methods:'</span> + <span class="keyword">this</span>.get)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeCreate-dom:'</span> + <span class="keyword">this</span>.$el)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// beforeCreate-data:undefined</span></span><br><span class="line"><span class="comment">// index.html:30 beforeCreate-methods:undefined</span></span><br><span class="line"><span class="comment">// index.html:31 beforeCreate-dom:undefined</span></span><br></pre></td></tr></table></figure><h1 id="init-injections-amp-reacitvity"><a href="#init-injections-amp-reacitvity" class="headerlink" title="init injections &amp; reacitvity"></a>init injections &amp; reacitvity</h1><p>这个阶段中，正在初始化<code>data</code>和<code>methods</code>中的数据以及方法</p><h1 id="created"><a href="#created" class="headerlink" title="created"></a>created</h1><p>这是组件创建阶段的第二个生命周期，此时组件的<code>data</code>和<code>methods</code>已经可用了，但是页面还没有渲染出来，在生命周期中，我们经常用来调用<code>Ajax</code>请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"======================================="</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'created-data:'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'created-methods:'</span> + <span class="keyword">this</span>.get)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'created-dom:'</span> + <span class="keyword">this</span>.$el)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// created-data:122</span></span><br><span class="line"><span class="comment">// index.html:36 created-methods:function () &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// index.html:37 created-dom:undefined</span></span><br></pre></td></tr></table></figure><h1 id="Has-‘el’-option-or-not"><a href="#Has-‘el’-option-or-not" class="headerlink" title="Has ‘el’ option or not"></a>Has ‘el’ option or not</h1><h2 id="has"><a href="#has" class="headerlink" title="has"></a>has</h2><p>如果正常有<code>el</code>属性，正常渲染页面，解析执行模板的指令，当所有直径解析完毕之后，我们的模板页面就会渲染到内存中；</p><h2 id="no"><a href="#no" class="headerlink" title="no"></a>no</h2><p>如果没有<code>el</code>属性，那么就会等到<code>vm.$mount(el)</code>方法调用之后才会正常执行渲染页面</p><blockquote><p>注意：此时用户依然看不到页面内容</p></blockquote><h1 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h1><p>当模板在内存中编译完成，会立即执行实例创建阶段的第三个生命周期函数，此时内存中的模板结构，还没有真正渲染到页面上，此时页面上也看不到真实的数据，此时用户看到的只是一个模板页面而已</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"======================================="</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeMount-data:'</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeMount-methods:'</span> + <span class="keyword">this</span>.get)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeMount-dom:'</span> + <span class="keyword">this</span>.$el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// beforeMount-data:122</span></span><br><span class="line"><span class="comment">// index.html:42 beforeMount-methods:function () &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// index.html:43 beforeMount-dom:[object HTMLDivElement]</span></span><br></pre></td></tr></table></figure><h1 id="Create-vm-el-and-replace-‘el’-with-it"><a href="#Create-vm-el-and-replace-‘el’-with-it" class="headerlink" title="Create vm.$el and replace ‘el’ with it"></a>Create vm.$el and replace ‘el’ with it</h1><p>正在把内存渲染好的模板结构，替换到页面上</p><h1 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h1><p>此刻已经渲染完毕</p><h1 id="关于数据更新"><a href="#关于数据更新" class="headerlink" title="关于数据更新"></a>关于数据更新</h1><p>组件运行的生命周期函数，会根据<code>data</code>的数据变化，有选择的触发0次或者N次</p><h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><p>当执行<code>beforeUpdata</code>运行中声明周期函数的时候，数据肯定是最新的，但是页面上的数据还是旧的</p><h2 id="Vitual-Dom-re-render-and-patch"><a href="#Vitual-Dom-re-render-and-patch" class="headerlink" title="Vitual Dom re-render and patch"></a>Vitual Dom re-render and patch</h2><p>正在根据最新的data数据，重新渲染模板内容，并把渲染好的模板结构，替换到页面上</p><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>页面已经完成了更新，此时，data数据是最新的，同时，页面上呈现的数据也是最新的</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li>拿到最新的data数据</li><li>根据最新的data数据，在内存中，重新渲染一颗新的DOM树</li><li>把旧的页面移除，同时渲染新的DOM树</li></ol><h1 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h1><p>当执行此函数的时候，组件即将被销毁，但是组件还是正常可以使用的，<code>data</code>和<code>mehods</code>等数据方法依旧可以调用</p><h1 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h1><p>组件已经完成销毁，<code>data</code>和<code>mehods</code>等数据方法不可以用了</p><h1 id="声明周期图示"><a href="#声明周期图示" class="headerlink" title="声明周期图示"></a>声明周期图示</h1><p><img src="/2019/01/23/vue_lifeCycle/lifecycle.png" alt="声明周期"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;new-Vue&quot;&gt;&lt;a href=&quot;#new-Vue&quot; class=&quot;headerlink&quot; title=&quot;new Vue()&quot;&gt;&lt;/a&gt;new Vue()&lt;/h1&gt;&lt;p&gt;这时&lt;code&gt;new&lt;/code&gt;了一个&lt;code&gt;Vue&lt;/code&gt; 的实例对象，此时
      
    
    </summary>
    
      <category term="Framework" scheme="http://yoursite.com/categories/Framework/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】前端知识汇总</title>
    <link href="http://yoursite.com/2019/01/22/develop_question/"/>
    <id>http://yoursite.com/2019/01/22/develop_question/</id>
    <published>2019-01-22T03:30:03.049Z</published>
    <updated>2019-04-26T01:43:42.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：<a href="https://juejin.im/post/5c414bbe518825247c724268" target="_blank" rel="noopener">世界顶级公司的前端面试都问些什么</a><br>面试集锦：<a href="https://juejin.im/post/5c64d15d6fb9a049d37f9c20#heading-9" target="_blank" rel="noopener">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)</a><br>面试集锦：<a href="https://juejin.im/post/5c67773a5188256284529d8c#heading-121" target="_blank" rel="noopener">JavaScript知识点整理</a></p></blockquote><p>我们会在开发以及常见面试中遇到一些问题，关于这些问题，个人准备了一个这样的集锦，涉及CSS,JS,常用框架等；</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p><a href="https://hdongjian.github.io/2019/03/06/html_css/" target="_blank" rel="noopener">盒模型详解</a></p><p>页面渲染时，dom 元素所采用的 布局模型。可通过box-sizing进行设置。根据计算宽高的区域可分为：</p><ul><li>content-box (W3C 标准盒模型)</li><li>border-box (IE 盒模型)</li><li>padding-box</li><li>margin-box (浏览器未实现)</li></ul><h2 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h2><p><a href="https://blog.csdn.net/freshlover/article/details/12132801" target="_blank" rel="noopener">CSS hack详解</a></p><h3 id="什么是CSS-hack"><a href="#什么是CSS-hack" class="headerlink" title="什么是CSS hack"></a>什么是CSS hack</h3><p>由于不同厂商的流览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p><h3 id="CSS-hack的原理"><a href="#CSS-hack的原理" class="headerlink" title="CSS hack的原理"></a>CSS hack的原理</h3><p>由于不同的浏览器和浏览器各版本对CSS的支持及解析结果不一样，以及CSS优先级对浏览器展现效果的影响，我们可以据此针对不同的浏览器情景来应用不同的CSS。</p><h3 id="CSS-hack分类"><a href="#CSS-hack分类" class="headerlink" title="CSS hack分类"></a>CSS hack分类</h3><p>CSS Hack大致有3种表现形式，CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。</p><ul><li>属性前缀法(即类内部Hack)：例如 IE6能识别下划线”<em>“和星号” <em> “，IE7能识别星号” </em> “，但不能识别下划线”</em>“，IE6~IE10都认识”\9”，但firefox前述三个都不能认识。</li><li>选择器前缀法(即选择器Hack)：例如 IE6能识别<em>html .class{}，IE7能识别</em>+html .class{}或者*:first-child+html .class{}。</li><li>IE条件注释法(即HTML条件注释Hack)：针对所有IE(注：IE10+已经不再支持条件注释)： <!--[if IE]>IE浏览器显示的内容 <![endif]-->，针对IE6及以下版本： <!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->。这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。</li></ul><h2 id="移动端布局—rem"><a href="#移动端布局—rem" class="headerlink" title="移动端布局—rem"></a>移动端布局—rem</h2><p><a href="https://blog.csdn.net/qq_36263601/article/details/78366710" target="_blank" rel="noopener">rem详解</a></p><h3 id="rem是什么？"><a href="#rem是什么？" class="headerlink" title="rem是什么？"></a>rem是什么？</h3><p>rem（font size of the root element）是指相对于根元素的字体大小的单位。简单的说它就是一个相对单位。<br>看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。<br>它们之间其实很相似，只不过rem计算的规则是依赖根元素,em是依赖父元素计算。</p><h3 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h3><p>原理是，先按定高宽设计出来页面，然后转换为rem单位，<br>配合js查询屏幕大小来改变html的font-size，<br>最终做出所谓的完美自适应。（100%还原）</p><h3 id="rem原理"><a href="#rem原理" class="headerlink" title="rem原理"></a>rem原理</h3><p>rem布局的本质是等比缩放，一般是基于宽度；</p><p>比如一个750的设计图，我们可以分成50分，每一份为<code>15px</code>，如果一个<code>div</code>宽度要求<code>30px</code>,设置宽度的时候只需要</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">15px</span>&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">width</span>: <span class="number">2rem</span>&#125; <span class="comment">/*30px/15*/</span></span><br></pre></td></tr></table></figure><p>当然也可以通过<code>js</code>来设置根元素<code>html</code>的字体大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规情况</span></span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEle = doc.documentElement,</span><br><span class="line">        evt = <span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>,</span><br><span class="line">        fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> width = docEle.clientWidth;</span><br><span class="line">            width &amp;&amp; (docEle.style.fontSize = <span class="number">20</span> * (width / <span class="number">320</span>) + <span class="string">"px"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">    win.addEventListener(evt, fn, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">"DOMContentLoaded"</span>, fn, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">&#125;(<span class="built_in">document</span>, <span class="built_in">window</span>));</span><br></pre></td></tr></table></figure><h3 id="优化方案vw-vh"><a href="#优化方案vw-vh" class="headerlink" title="优化方案vw,vh"></a>优化方案vw,vh</h3><p>让页面元素随着页面宽度变化，需要一个新的单位x，x等于屏幕宽度的百分之一，css3带来了rem的同时，也带来了vw和vh</p><blockquote><p>vw —— 视口宽度的 1/100；vh —— 视口高度的 1/100 —— MDN</p></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>vw的兼容性不如rem好，使用之前要看下</li></ul><table><thead><tr><th>兼容性</th><th>Ios</th><th>安卓</th></tr></thead><tbody><tr><td>rem</td><td>4.1+</td><td>2.1+</td></tr><tr><td>vw</td><td>6.1+</td><td>4.4+</td></tr></tbody></table><ul><li>另外，在使用弹性布局时，一般会限制最大宽度，比如在pc端查看我们的页面，此时vw就无法力不从心了，因为除了width有max-width，其他单位都没有，而rem可以通过控制html根元素的font-size最大值，而轻松解决这个问题</li></ul><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="字体的问题"><a href="#字体的问题" class="headerlink" title="字体的问题"></a>字体的问题</h4><p>字体大小并不能使用rem，字体的大小和字体宽度，并不成线性关系，所以字体大小不能使用rem；由于设置了根元素字体的大小，会影响所有没有设置字体大小的元素，因为字体大小是会继承的<br>我们可以在body上做字体修正，比如把body字体大小设置为16px，但如果用户自己设置了更大的字体，此时用户的设置将失效，比如合理的方式是，将其设置为用户的默认字体大小<br>可以通过修改body字体的大小来实现，同时所有设置字体大小的地方都是用em单位，对就是em，因为只有em才能实现</p><h4 id="屏幕过宽"><a href="#屏幕过宽" class="headerlink" title="屏幕过宽"></a>屏幕过宽</h4><p>一般我们都会设置一个最大宽度，大于这个宽度的话页面居中，两边留白</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">clientWidth = clientWidth &lt; <span class="number">780</span> ? clientWidth : <span class="number">780</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = clientWidth / <span class="number">100</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure><p>设置body的宽度为100rem，并水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123; margin: auto; width: 100rem &#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>主要是根据项目中常用以及考虑到<code>JavaScript</code>的深度需要，总结一下问题</p><h2 id="关于原型链"><a href="#关于原型链" class="headerlink" title="关于原型链"></a>关于原型链</h2><p>原型链是由原型对象组成，每个对象都有 <strong>proto</strong> 属性，指向了创建该对象的构造函数的原型，<strong>proto</strong> 将对象连接起来组成了原型链。是一个用来实现继承和共享属性的有限的对象链。</p><ul><li>属性查找机制: 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象Object.prototype，如还是没找到，则输出undefined；</li></ul><ul><li>属性修改机制: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: b.prototype.x = 2；但是这样会造成所有继承于该对象的实例的属性发生改变。</li></ul><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p>主要针对ES6的个人见解</p><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><h3 id="async-await相比于promise的优势"><a href="#async-await相比于promise的优势" class="headerlink" title="async,await相比于promise的优势"></a>async,await相比于promise的优势</h3><p>优势在于处理then的调用链，能够更清晰准确的写出代码<br>缺点：await将异步代码改造成同步，如果多个异步代码之间没有依赖性却使用了await会导致性能降低</p><h3 id="对async，await的理解，内部原理"><a href="#对async，await的理解，内部原理" class="headerlink" title="对async，await的理解，内部原理"></a>对async，await的理解，内部原理</h3><p>async就是将函数返回值使用Promise.resolve()包裹一下，和then中处理返回值一样，并且async只能搭配await使用<br>await其实就是generator加上Promise的语法糖，且内部实现了自动执行generator</p>]]></content>
    
    <summary type="html">
    
      常见的基本CSS、JS、HTML、框架基础、网络安全、结构算法常见问题
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>CSS3</title>
    <link href="http://yoursite.com/2019/01/22/css3/"/>
    <id>http://yoursite.com/2019/01/22/css3/</id>
    <published>2019-01-22T01:10:02.059Z</published>
    <updated>2019-01-22T01:12:45.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/01/22/css3/home.jpg" alt="1542077018582"></p>]]></content>
    
    <summary type="html">
    
      关于css3新属性的方法汇总：渐变、变换、过渡、动画、伸缩盒子等
    
    </summary>
    
      <category term="HTML/CSS Base" scheme="http://yoursite.com/categories/HTML-CSS-Base/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于图片处理的唠唠叨叨</title>
    <link href="http://yoursite.com/2019/01/21/dealwith_pic/"/>
    <id>http://yoursite.com/2019/01/21/dealwith_pic/</id>
    <published>2019-01-21T02:21:50.496Z</published>
    <updated>2019-01-21T05:45:44.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下代码是以vue语法为主，如果使用其他框架，请更改语法</p></blockquote><h1 id="图片上传并获取图片方法"><a href="#图片上传并获取图片方法" class="headerlink" title="图片上传并获取图片方法"></a>图片上传并获取图片方法</h1><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>本方法是获取图片的文件流，通过formData方法处理图片参数以文件流方式传递到后台（同样支持文件）;</p><ol><li><p>为<code>input</code>绑定<code>change</code>事件，并绑定<code>accept</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/jpg,image/png,image/svg"</span> @<span class="attr">change</span>=<span class="string">"uploadImg($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>change</code>方法获取图片</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uploadImg(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> event = e ? e : <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> obj = event.srcElement ? event.srcElement : event.target;</span><br><span class="line">    <span class="comment">//obj.files[0]为获取的图片文件流</span></span><br><span class="line">    <span class="comment">// getObjectURL方法上传图片方法</span></span><br><span class="line">    <span class="keyword">var</span> srcs = <span class="keyword">this</span>.getObjectURL(obj.files[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//清除input的方法，防止change事件不触发</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.input.value = <span class="string">""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="获取上传的图片"><a href="#获取上传的图片" class="headerlink" title="获取上传的图片"></a>获取上传的图片</h2><p>如果在图片上传之前需要预览图片，可以通过以下方法获取图片，<code>url</code>绑定到<code>img</code>标签即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getObjectURL(file) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.createObjectURL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.createObjectURL(file)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.URL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.URL.createObjectURL(file)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.webkitURL.createObjectURL(file)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断图片链接是否有效"><a href="#判断图片链接是否有效" class="headerlink" title="判断图片链接是否有效"></a>判断图片链接是否有效</h1><ul><li>场景：如果后台返回图片链接，如果有效则展示，无效的话不展示</li><li>原理：通过img标签引入图片，可以通过<code>img</code>的<code>onload</code>（有效）和<code>onerror</code>（无效）回调来区分</li></ul><blockquote><p>注意回调方法是异步的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> checkImgExists(imgurl) &#123;</span><br><span class="line">    <span class="keyword">var</span> ImgObj = <span class="keyword">new</span> Image();</span><br><span class="line">    ImgObj.src = imgurl;</span><br><span class="line"></span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    image.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h1><h2 id="图片压缩-1"><a href="#图片压缩-1" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>方法有点长，懒得分了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param &#123;文件&#125; file </span></span><br><span class="line"><span class="comment">    * @param &#123;配置属性&#125; options </span></span><br><span class="line"><span class="comment">    * @param &#123;回调函数&#125; callback </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">loopPhotoCompress(file, options, callback) &#123;</span><br><span class="line">    options.size = <span class="number">1</span>;<span class="comment">//此处的单位为MB</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> imgtype = <span class="string">'image/jpeg'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用FileReader读取文件</span></span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 将图片读取为base64</span></span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> base64 = evt.target.result;</span><br><span class="line">        <span class="comment">// 创建图片对象</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="comment">// 用图片对象加载读入的base64</span></span><br><span class="line">        img.src = base64;</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>,</span><br><span class="line">                canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>),</span><br><span class="line">                ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">            canvas.setAttribute(<span class="string">'width'</span>, that.width);</span><br><span class="line">            canvas.setAttribute(<span class="string">'height'</span>, that.height);</span><br><span class="line">            <span class="comment">// 将图片画入canvas</span></span><br><span class="line">            ctx.drawImage(that, <span class="number">0</span>, <span class="number">0</span>, that.width, that.height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 压缩到指定体积以下（M）</span></span><br><span class="line">            <span class="keyword">if</span> (options.size) &#123;</span><br><span class="line">                <span class="keyword">var</span> scale = <span class="number">0.9</span>;</span><br><span class="line">                (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">scale</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (base64.length / <span class="number">1024</span> / <span class="number">1024</span> &gt; options.size &amp;&amp; scale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        base64 = canvas.toDataURL(imgtype, scale);</span><br><span class="line">                        scale = scale - <span class="number">0.1</span>;</span><br><span class="line">                        f(scale);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback(self.convertBase64UrlToBlob(base64, file));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(scale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.scale) &#123;</span><br><span class="line">                <span class="comment">// 按比率压缩</span></span><br><span class="line">                base64 = canvas.toDataURL(imgtype, options.scale);</span><br><span class="line">                callback(self.convertBase64UrlToBlob(base64, file));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="base64转file文件流"><a href="#base64转file文件流" class="headerlink" title="base64转file文件流"></a>base64转file文件流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将以base64的图片url数据转换为Blob</span></span><br><span class="line"><span class="comment">    * @param urlData</span></span><br><span class="line"><span class="comment">    *用url方式表示的base64图片数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">convertBase64UrlToBlob(urlData, file) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = urlData.split(<span class="string">','</span>),</span><br><span class="line">        mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">        n = bstr.length,</span><br><span class="line">        u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], file.name, &#123; <span class="attr">type</span>: file.type &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片增加马赛克"><a href="#图片增加马赛克" class="headerlink" title="图片增加马赛克"></a>图片增加马赛克</h1><ul><li>获取图片写入到<code>canvas</code>，通过检测鼠标的落下，移动、抬起事件，获取矩形</li><li>通过<code>getImageData</code>方法获取图片像素点数组</li><li>通过改变数据中像素点的颜色（不同像素点交换颜色）<code>setXY</code>方法</li></ul><blockquote><p><code>getImageData</code>此方法对于跨域图片，浏览器会进行拦截，服务器需要设置允许跨域访问</p></blockquote><p>文件：<a href="/2019/01/21/dealwith_pic/toMosic.vue">图片增加马赛克</a></p>]]></content>
    
    <summary type="html">
    
      图片处理方法集锦，包括图片上传、图片压缩、图片增加马赛克等方法
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="Pic Deal" scheme="http://yoursite.com/tags/Pic-Deal/"/>
    
  </entry>
  
  <entry>
    <title>Date的那些事</title>
    <link href="http://yoursite.com/2019/01/21/dealwith_time/"/>
    <id>http://yoursite.com/2019/01/21/dealwith_time/</id>
    <published>2019-01-21T02:12:31.499Z</published>
    <updated>2019-01-21T05:45:52.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateToString</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (date &amp;&amp; date <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> yyyy = date.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> mm = date.getMonth() &lt; <span class="number">9</span> ? <span class="string">"0"</span> + (date.getMonth() + <span class="number">1</span>) : (date.getMonth() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> dd = date.getDate() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getDate() : date.getDate();</span><br><span class="line">    <span class="keyword">var</span> hh = date.getHours() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getHours() : date.getHours();</span><br><span class="line">    <span class="keyword">var</span> min = date.getMinutes() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getMinutes() : date.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> ss = date.getSeconds() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getSeconds() : date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.concat(yyyy).concat(<span class="string">'-'</span>).concat(mm).concat(<span class="string">'-'</span>).concat(dd).concat(<span class="string">'-'</span>).concat(ss);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟moment插件"><a href="#模拟moment插件" class="headerlink" title="模拟moment插件"></a>模拟moment插件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 格式化时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">myMoment = <span class="function">(<span class="params">date = <span class="keyword">new</span> <span class="built_in">Date</span>(</span>).<span class="params">getTime</span><span class="params">()</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.date = <span class="keyword">new</span> <span class="built_in">Date</span>(date)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输入格式化格式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">formate = <span class="function">(<span class="params">formatStr = <span class="string">'YYYY-MM-DD HH:mm:ss'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">this</span>.date</span><br><span class="line">    <span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line">    <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.getDate()</span><br><span class="line">    <span class="keyword">const</span> week = date.getDay()</span><br><span class="line">    <span class="keyword">const</span> hour = date.getHours()</span><br><span class="line">    <span class="keyword">const</span> minute = date.getMinutes()</span><br><span class="line">    <span class="keyword">const</span> second = date.getSeconds()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> formatStr.replace(<span class="regexp">/Y&#123;2,4&#125;|M&#123;1,2&#125;|D&#123;1,2&#125;|d&#123;1,4&#125;|H&#123;1,2&#125;|m&#123;1,2&#125;|s&#123;1,2&#125;/g</span>, (match) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YY'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(year).slice(<span class="number">-2</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YYY'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YYYY'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(year)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(month)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'MM'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(month).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(day)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DD'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(day).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(week)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'dd'</span>:</span><br><span class="line">                <span class="keyword">return</span> weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'ddd'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'周'</span> + weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'dddd'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'星期'</span> + weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'H'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(hour)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'HH'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(hour).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(minute)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'mm'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(minute).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(second)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'ss'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(second).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> match</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取当前日期的周边"><a href="#获取当前日期的周边" class="headerlink" title="获取当前日期的周边"></a>获取当前日期的周边</h1><h2 id="今天"><a href="#今天" class="headerlink" title="今天"></a>今天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showToDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    M = <span class="built_in">Number</span>(Nowdate.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Nowdate.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + Nowdate.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="明天"><a href="#明天" class="headerlink" title="明天"></a>明天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTomorrow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tom = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    tom.setDate(tom.getDate() + <span class="number">1</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(tom.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> tom.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + tom.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本周第一天"><a href="#本周第一天" class="headerlink" title="本周第一天"></a>本周第一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showWeekFirstDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> WeekFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate - (Nowdate.getDay() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(WeekFirstDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> WeekFirstDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + WeekFirstDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本周最后一天"><a href="#本周最后一天" class="headerlink" title="本周最后一天"></a>本周最后一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showWeekLastDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> WeekFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate - (Nowdate.getDay() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">    <span class="keyword">var</span> WeekLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>((WeekFirstDay / <span class="number">1000</span> + <span class="number">6</span> * <span class="number">86400</span>) * <span class="number">1000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(WeekLastDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Nowdate.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + WeekLastDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本月第一天"><a href="#本月第一天" class="headerlink" title="本月第一天"></a>本月第一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMonthFirstDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> MonthFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate.getFullYear(), Nowdate.getMonth(), <span class="number">1</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(MonthFirstDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> MonthFirstDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + MonthFirstDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本月最后一天"><a href="#本月最后一天" class="headerlink" title="本月最后一天"></a>本月最后一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMonthLastDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> MonthNextFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate.getFullYear(), Nowdate.getMonth() + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> MonthLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(MonthNextFirstDay - <span class="number">86400000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(MonthLastDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> MonthLastDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + MonthLastDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于Date方法的运用，格式化，模拟moment插件基本方法，获取当月第一天，当周第一天等方法
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="DateTime" scheme="http://yoursite.com/tags/DateTime/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的面向对象</title>
    <link href="http://yoursite.com/2019/01/18/oop_base/"/>
    <id>http://yoursite.com/2019/01/18/oop_base/</id>
    <published>2019-01-18T05:40:59.163Z</published>
    <updated>2019-01-21T05:48:07.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象（oop）"><a href="#面向对象（oop）" class="headerlink" title="面向对象（oop）"></a>面向对象（oop）</h1><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">'张三'</span>))</span><br></pre></td></tr></table></figure><h3 id="构造器–constructor"><a href="#构造器–constructor" class="headerlink" title="构造器–constructor"></a>构造器–constructor</h3><ul><li><p><strong>构造器：</strong>每一个类中都有一个构造器，如果我们程序员没有手动指定构造器，那么可以认为类内部有一个隐形的，看不见的空构造器类似于<code>constructor(){}</code></p></li><li><p><strong>作用：</strong>就是每当new这个类的时候，必然会优先执行构造器中的代码</p></li></ul><h3 id="静态方法-amp-静态属性"><a href="#静态方法-amp-静态属性" class="headerlink" title="静态方法&amp;静态属性"></a>静态方法&amp;静态属性</h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</p><ul><li>构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonC</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">PersonC.a = <span class="number">1</span>;</span><br><span class="line">PersonC.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Class类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">12</span></span><br><span class="line">    <span class="keyword">static</span> b()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态方法或者静态属性无法通过实例之后的对象来调用，因为这是挂载到类或者构造函数上面的，只能通过<code>Person.a</code>或者<code>PersonC.a</code>来获取或者调用</p><h3 id="实例方法-amp-实例属性"><a href="#实例方法-amp-实例属性" class="headerlink" title="实例方法&amp;实例属性"></a>实例方法&amp;实例属性</h3><p>通过new出来的实例，访问到的属性或者方法，叫做实例方法或者实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonC</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">PersonC.prototype.c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    c()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br></pre></td></tr></table></figure><h3 id="关于super方法"><a href="#关于super方法" class="headerlink" title="关于super方法"></a>关于super方法</h3><p>在以上代码中如果我们在<code>Chiness</code>中值只调用配置<code>constructor</code>函数，就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// missing super() call in constructor</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Chiness &#123;age: undefined, name: undefined&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果我们调用了，不会报错，但是实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code></p><p>就会提醒我们调用super方法</p><ol><li><p>为什么必须调用<code>super</code>?</p><p>答：如果一个子类，通过extends关键字继承了父类，那么，子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p></li></ol><p>  <strong>根据以上说法，如果想在构造器中使用this也必须是在super调用之后</strong></p><ol start="2"><li><p><code>super</code>方法是什么?</p><p>答:<code>super</code>是一个函数，而且它是父类的构造器，子类中的<code>super</code>就是其中父类中，<code>constructor</code>构造器的一个引用</p></li><li><p>为什么调用之后实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code>?</p><p>答:<code>super</code>是一个函数，而且它是父类的构造器,所以如果只调用，不传递参数，所以实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code></p></li></ol><ol start="4"><li>正确用法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age,name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br></pre></td></tr></table></figure><h3 id="关于子类独有属性"><a href="#关于子类独有属性" class="headerlink" title="关于子类独有属性"></a>关于子类独有属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age,name,id)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age,name)</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象（oop）&quot;&gt;&lt;a href=&quot;#面向对象（oop）&quot; class=&quot;headerlink&quot; title=&quot;面向对象（oop）&quot;&gt;&lt;/a&gt;面向对象（oop）&lt;/h1&gt;&lt;h1 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;head
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Bug第一弹</title>
    <link href="http://yoursite.com/2019/01/17/bugs_1/"/>
    <id>http://yoursite.com/2019/01/17/bugs_1/</id>
    <published>2019-01-17T09:19:11.071Z</published>
    <updated>2019-01-17T09:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSO拦截登陆后页面报错"><a href="#SSO拦截登陆后页面报错" class="headerlink" title="SSO拦截登陆后页面报错"></a>SSO拦截登陆后页面报错</h2><h3 id="功能场景"><a href="#功能场景" class="headerlink" title="功能场景"></a>功能场景</h3><p>校验登录通过cookie中特定cookie，如果没有，所有请求会报403，通过axios的钩子函数检测异常跳转到指定登录页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求后的钩子函数</span></span><br><span class="line">HTTP.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(location.href.split('?')[0] + '?' + encodeURIComponent(location.href.split('?')[1]))</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">        Cookie.remove(<span class="string">'userData'</span>)</span><br><span class="line">        localStorage.clear();</span><br><span class="line">        sessionStorage.clear();</span><br><span class="line">        <span class="built_in">console</span>.log(location.href)</span><br><span class="line">        <span class="keyword">if</span> (error.response.data.indexOf(<span class="string">'jumpto'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            location.href = error.response.data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>在指定jumpto跳转，后天未将参数中&amp;符号后面的参数带来，导致页面参数不足报错</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解析url路径？参数，通过incode方法解析，去除&amp;符号，页面在通过decode方法解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求后的钩子函数</span></span><br><span class="line">HTTP.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(location.href.split('?')[0] + '?' + encodeURIComponent(location.href.split('?')[1]))</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">        Cookie.remove(<span class="string">'userData'</span>)</span><br><span class="line">        localStorage.clear();</span><br><span class="line">        sessionStorage.clear();</span><br><span class="line">        <span class="built_in">console</span>.log(location.href)</span><br><span class="line">        <span class="keyword">if</span> (error.response.data.indexOf(<span class="string">'jumpto'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (location.href.indexOf(<span class="string">'/approval'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href.split(<span class="string">'?'</span>)[<span class="number">0</span>] + <span class="string">'?'</span> + <span class="built_in">encodeURIComponent</span>(location.href.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            location.href = error.response.data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="web和app共有页面无法区分设备"><a href="#web和app共有页面无法区分设备" class="headerlink" title="web和app共有页面无法区分设备"></a>web和app共有页面无法区分设备</h2><h3 id="功能场景-1"><a href="#功能场景-1" class="headerlink" title="功能场景"></a>功能场景</h3><p>移动端和app端有相同功能页面，需要判断当前设备，并打开相应页面</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">common.judegWebOrApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> Agents = [<span class="string">"zhushou"</span>, <span class="string">"android"</span>, <span class="string">"iphone"</span>, <span class="string">"symbianos"</span>, <span class="string">"windows phone"</span>, <span class="string">"ipad"</span>, <span class="string">"ipod"</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Agents.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> params = location.href.split(<span class="string">'?'</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> nowPage = location.href.indexOf(<span class="string">'app'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(flag,nowPage)</span><br><span class="line">    <span class="keyword">if</span> (flag &amp;&amp; nowPage &gt;= <span class="number">0</span>) &#123;<span class="comment">//web端</span></span><br><span class="line">        location.href = <span class="string">"/web/approval?"</span>+params;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; nowPage &lt; <span class="number">0</span>) &#123;<span class="comment">//app端</span></span><br><span class="line">        location.href = <span class="string">"/app/approval?"</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现"><a href="#通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现" class="headerlink" title="通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现"></a>通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现</h2><h3 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h3><p>在浏览器中测试没有问题，经过测试，在webview中，获取的高度iphone6s和iphoneSE获取的页面高度比真实高度高64px，导致吸底消失</p><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><p>判断是否是iphone手机，并判断宽度，符合iphone6s以及iphonese尺寸的，采取设置top值而不是botom值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.clientWidth ? <span class="built_in">document</span> : <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">var</span> height = docEl.clientHeight;</span><br><span class="line"><span class="keyword">var</span> width = docEl.clientWidth;</span><br><span class="line"><span class="keyword">var</span> reduce = <span class="number">98</span> / <span class="number">30</span> * width / <span class="number">25</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.xiBot = <span class="keyword">this</span>.$refs.botTab;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.xiBot) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (width == <span class="number">320</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.xiBot.style.top = <span class="number">548</span> - reduce + <span class="string">'px'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">375</span> &amp;&amp; height &lt; <span class="number">690</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.xiBot.style.top = <span class="number">647</span> - reduce + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><h2 id="webview中ios系统页面不出现"><a href="#webview中ios系统页面不出现" class="headerlink" title="webview中ios系统页面不出现"></a>webview中ios系统页面不出现</h2><h3 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h3><p>在app中内嵌网页，安卓端没问题，在ios上会出现偶数次打开页面空白现象，但是页面中去除本身app头部的方法已经执行，也就是说页面正常加载，但是页面呈现空白；</p><h3 id="bug原因-1"><a href="#bug原因-1" class="headerlink" title="bug原因"></a>bug原因</h3><p>在vue的router.beforeEach钩子函数中调用了函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 路由拦截（钩子）*/</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//重置到页面顶端</span></span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//去除桔子堆头部</span></span><br><span class="line">  api.appDelHeader();</span><br><span class="line">  <span class="comment">//判断路径是否是403和选择地址页面</span></span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">'/403'</span> || to.path === <span class="string">'/FoodAddress'</span>) &#123;</span><br><span class="line">    next();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断是否校验checkCode</span></span><br><span class="line">  <span class="keyword">if</span> (api.mall.on) &#123;</span><br><span class="line">    login.checkLogin(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">//失败时候的回调</span></span><br><span class="line">      next(<span class="string">'/403'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;, () =&gt; &#123;<span class="comment">//成功的回调</span></span><br><span class="line">      <span class="keyword">if</span> (!api.checkUA() &amp;&amp; api.mall.isCheckUA) &#123;</span><br><span class="line">        next(<span class="string">'/403'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (localStorage.getItem(<span class="string">'arriveAddress'</span>) &amp;&amp; localStorage.getItem(<span class="string">'menuId'</span>)) &#123; <span class="comment">// 已选择了默认区域</span></span><br><span class="line">        next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'重新获取地址'</span>)</span><br><span class="line">        getArea();<span class="comment">//就是这个方法，实参未传</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得区域列表</span></span><br><span class="line"><span class="keyword">const</span> getArea = <span class="function"><span class="keyword">function</span> (<span class="params">next, to</span>) </span>&#123;</span><br><span class="line">  api.get(&#123;</span><br><span class="line">    data: &#123; <span class="attr">flag</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    url: <span class="string">"/area/queryList"</span>,</span><br><span class="line">    object: Vue,</span><br><span class="line">    errorIfo: <span class="string">"获取区域失败"</span>,</span><br><span class="line">    then: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// data = null;</span></span><br><span class="line">      <span class="keyword">if</span> (data &amp;&amp; data.menuId &amp;&amp; data.arriveAddress) &#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'menuId'</span>, data.menuId);</span><br><span class="line">        localStorage.setItem(<span class="string">'arriveAddress'</span>, data.arriveAddress)</span><br><span class="line">        localStorage.setItem(<span class="string">'floorId'</span>, data.floorId)<span class="comment">//localStorage保存楼层信息</span></span><br><span class="line">        <span class="keyword">if</span> (to.path == <span class="string">'/confirmPrepareMeal'</span>) &#123;</span><br><span class="line">          next();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(<span class="string">'/HomeIndex'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next(<span class="string">'/FoodAddress'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面问题应该导致报错，但是web端测试没问题，安卓没问题，ios偶尔出现，很奇怪</p><h2 id="时间控件国际化无法重新渲染"><a href="#时间控件国际化无法重新渲染" class="headerlink" title="时间控件国际化无法重新渲染"></a>时间控件国际化无法重新渲染</h2><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><p>时间控件可以使用中英文，但是一经渲染，后期无法局部更新，导致点击切换语言按钮时候无法更改控件内容</p><h3 id="解决措施-1"><a href="#解决措施-1" class="headerlink" title="解决措施"></a>解决措施</h3><p>检测中英文切换操作，采用if重新渲染时间控件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$i18n.locale'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataPicker = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.dataPicker = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.showData = <span class="keyword">this</span>.$t(<span class="string">'message.myAppoint.today'</span>);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="ios时间处理失效"><a href="#ios时间处理失效" class="headerlink" title="ios时间处理失效"></a>ios时间处理失效</h2><h3 id="问题场景-1"><a href="#问题场景-1" class="headerlink" title="问题场景"></a>问题场景</h3><p>提交表单需要校验时间，如果时间小于当前时间，则默认取当前时间，此时需要时间戳对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择时间完成</span></span><br><span class="line">chooseTime(time) &#123;</span><br><span class="line">  <span class="keyword">this</span>.cancelTime(time);</span><br><span class="line">  <span class="keyword">this</span>.modalData.timeModal = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.initialCache(<span class="string">"ok"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//控制时间大小</span></span><br><span class="line">cancelTime(time) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.setTimeToSeconds(time) - <span class="keyword">this</span>.setTimeToSeconds() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = time;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">setTimeToSeconds(time) &#123;</span><br><span class="line">  <span class="comment">// var seconds = this.$moment(time).format('YYYY-MM-DD HH:mm');</span></span><br><span class="line">  <span class="comment">// return parseInt(new Date(seconds).getTime());</span></span><br><span class="line">  <span class="keyword">if</span> (time) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="bug原因-2"><a href="#bug原因-2" class="headerlink" title="bug原因"></a>bug原因</h3><p>new Date(‘时间字符串’)，ios对于时间字符串格式支持较少，不支持2018-02-02此格式的数据，支持/不支持-，导致时间戳校验失败</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择时间完成</span></span><br><span class="line">chooseTime(time) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(time)</span><br><span class="line">  time = <span class="keyword">this</span>.$moment(time).format(<span class="string">'YYYY/MM/DD HH:mm:ss'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(time)</span><br><span class="line">  <span class="keyword">this</span>.cancelTime(time);</span><br><span class="line">  <span class="keyword">this</span>.modalData.timeModal = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.initialCache(<span class="string">"ok"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//控制时间大小</span></span><br><span class="line">cancelTime(time) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.setTimeToSeconds(time) - <span class="keyword">this</span>.setTimeToSeconds() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = time;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">setTimeToSeconds(time) &#123;</span><br><span class="line">  <span class="comment">// var seconds = this.$moment(time).format('YYYY-MM-DD HH:mm');</span></span><br><span class="line">  <span class="comment">// return parseInt(new Date(seconds).getTime());</span></span><br><span class="line">  <span class="keyword">if</span> (time) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="超小字符实现方式"><a href="#超小字符实现方式" class="headerlink" title="超小字符实现方式"></a>超小字符实现方式</h2><h3 id="问题场景-2"><a href="#问题场景-2" class="headerlink" title="问题场景"></a>问题场景</h3><p>设计图要求一个按钮字体大小为10px，但是谷歌浏览器最小字符为12px</p><h3 id="实现场景"><a href="#实现场景" class="headerlink" title="实现场景"></a>实现场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.repeat-post &#123;</span><br><span class="line">    border: 1px solid #FC9153;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    height: <span class="number">25</span>px;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    width: <span class="number">65</span>px;</span><br><span class="line">    color: #FC9153;</span><br><span class="line">    transform: scale(<span class="number">.8</span>,<span class="number">.9</span>);<span class="comment">//采用缩放属性实现</span></span><br><span class="line">    transform-origin: left;</span><br></pre></td></tr></table></figure><h2 id="安卓键盘遮挡输入框"><a href="#安卓键盘遮挡输入框" class="headerlink" title="安卓键盘遮挡输入框"></a>安卓键盘遮挡输入框</h2><h3 id="问题场景-3"><a href="#问题场景-3" class="headerlink" title="问题场景"></a>问题场景</h3><p>安卓在获取焦点弹起键盘会自动将也页面上滑，将input框置于可视位置，但是如果body有滚动条的情况下，则input框位置靠下就会被遮挡</p><h3 id="解决措施-2"><a href="#解决措施-2" class="headerlink" title="解决措施"></a>解决措施</h3><p>在input获取焦点的情况下现将页面上移到顶部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//滚动条到初始状态</span><br><span class="line">scollTopZero() &#123;</span><br><span class="line">    document.body.scrollTop = 0;</span><br><span class="line">    document.documentElement.scrollTop = 0;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="取餐时间内无法取餐"><a href="#取餐时间内无法取餐" class="headerlink" title="取餐时间内无法取餐"></a>取餐时间内无法取餐</h2><h3 id="问题场景-4"><a href="#问题场景-4" class="headerlink" title="问题场景"></a>问题场景</h3><p>正常订餐时间是00：00到下午16：30，但是在0点到8点区间无法点餐；<br>问题原因：后台返回的当前时间currentDate是一个日期字符串，与北京时区不同，有8个小时的时间差，前台处理的时候只是取了日期，导致当天8点之前的日期是昨天的时期</p><h3 id="解决措施-3"><a href="#解决措施-3" class="headerlink" title="解决措施"></a>解决措施</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Gray.prototype.toSeconds = <span class="function"><span class="keyword">function</span> (<span class="params">time, currentTime</span>) </span>&#123;</span><br><span class="line">  time = moment(time).format(<span class="string">'HH:mm:ss'</span>);</span><br><span class="line">  currentTime = moment(currentTime).format(<span class="string">'YYYY/MM/DD'</span>);</span><br><span class="line">  <span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(currentTime + <span class="string">' '</span> + time).getTime();</span><br><span class="line">  <span class="keyword">return</span> time2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示时间和取餐时间不一致"><a href="#显示时间和取餐时间不一致" class="headerlink" title="显示时间和取餐时间不一致"></a>显示时间和取餐时间不一致</h2><h3 id="问题场景-5"><a href="#问题场景-5" class="headerlink" title="问题场景"></a>问题场景</h3><p>后台提示的下单时间是00：00到下午4：30 在EP部分有一个的电脑时间显示有误，其他人没有问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thu Mar <span class="number">22</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">21</span>:<span class="number">47</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><h3 id="解决措施-4"><a href="#解决措施-4" class="headerlink" title="解决措施"></a>解决措施</h3><p>导致此问题原因为该人电脑时区设置的是美国，导致浏览器解析new Date的时候和正常时区不一致<br>将电脑时区调整好即可</p><h2 id="IOS系统中div盒子内设置滚动条，偶尔会滑动失效"><a href="#IOS系统中div盒子内设置滚动条，偶尔会滑动失效" class="headerlink" title="IOS系统中div盒子内设置滚动条，偶尔会滑动失效"></a>IOS系统中div盒子内设置滚动条，偶尔会滑动失效</h2><h3 id="问题场景-6"><a href="#问题场景-6" class="headerlink" title="问题场景"></a>问题场景</h3><p>在餐品页面内，有餐品列表，偶尔会出现滑动失效的问题，在苹果手机</p><h3 id="解决措施-5"><a href="#解决措施-5" class="headerlink" title="解决措施"></a>解决措施</h3><ul><li>采用body整体布局</li><li>使用iscroll插件解决</li><li>将此盒子设置为fixed定位</li></ul><h2 id="iphonx的兼容问题"><a href="#iphonx的兼容问题" class="headerlink" title="iphonx的兼容问题"></a>iphonx的兼容问题</h2><h3 id="问题场景-7"><a href="#问题场景-7" class="headerlink" title="问题场景"></a>问题场景</h3><p>一个侧边栏，点击从右侧划出的时候iphonex底部有空白，只有这个是这样的</p><h3 id="解决措施-6"><a href="#解决措施-6" class="headerlink" title="解决措施"></a>解决措施</h3><p>布局问题，原来次侧边栏和遮挡层在一个div中，点击的时候显示此div，并给遮挡层和侧边栏加入动画效果；<br>现在取消外层div即可</p>]]></content>
    
    <summary type="html">
    
      记录几个2017年项目中遇到的几个小问题，主要是安卓ios兼容，web以及移动端之间的问题
    
    </summary>
    
      <category term="Bugs" scheme="http://yoursite.com/categories/Bugs/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】关于Hexo优化</title>
    <link href="http://yoursite.com/2019/01/16/about_hexo/"/>
    <id>http://yoursite.com/2019/01/16/about_hexo/</id>
    <published>2019-01-16T07:44:31.385Z</published>
    <updated>2019-07-08T02:30:45.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li><li>hexo p == hexo publish</li><li>hexo g == hexo generate#生成</li><li>hexo s == hexo server #启动服务预览</li><li>hexo d == hexo deploy#部署</li></ul><h1 id="增加站内搜索功能"><a href="#增加站内搜索功能" class="headerlink" title="增加站内搜索功能"></a>增加站内搜索功能</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在自己博客根目录下（我的目录：D:\workspace\hexo），执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>修改根目录下的_config.yml（我的目录：D:\workspace\hexo_config.yml），在最底部添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>修改主体下的themes\next_config.yml配置文件（我的目录：D:\workspace\hexo\themes\next_config.yml），搜索local_search，修改enable为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>开启本地server<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><h1 id="增加博客置顶功能（自定义排序）"><a href="#增加博客置顶功能（自定义排序）" class="headerlink" title="增加博客置顶功能（自定义排序）"></a>增加博客置顶功能（自定义排序）</h1><h2 id="修改node-modules下代码"><a href="#修改node-modules下代码" class="headerlink" title="修改node_modules下代码"></a>修改node_modules下代码</h2><p>找到<code>node_modules/hexo-generator-index/lib/generator.js</code>文件</p><p>将内部代码替换成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">var</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在文章添加 top 标签可以设置置顶顺序<code>顺序根据top的值来决定</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名</span><br><span class="line">date: 文章发布时间</span><br><span class="line">tags: 文章标签</span><br><span class="line">top: <span class="number">100</span>(文章置顶)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="Next主题设定代码高亮格式"><a href="#Next主题设定代码高亮格式" class="headerlink" title="Next主题设定代码高亮格式"></a>Next主题设定代码高亮格式</h1><p>需要改动的有hexo的配置文件<code>_config.yml</code>，以及next主题的配置文件<code>themes/next/_config.yml</code>文件</p><h2 id="更改hexo的配置文件"><a href="#更改hexo的配置文件" class="headerlink" title="更改hexo的配置文件"></a>更改hexo的配置文件</h2><p>查找<code>highlight</code>关键字，更改一下属性为true<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure></p><h2 id="更改next主题配置文件"><a href="#更改next主题配置文件" class="headerlink" title="更改next主题配置文件"></a>更改next主题配置文件</h2><p>搜索<code>highlight_theme</code>关键字，这个属性有四个值：</p><ul><li>normal  ：默认值</li><li>night   ：黑色</li><li>night eighties ：个人感觉跟第二个差不太多</li><li>night blue     ： 底部是蓝色，跟sublime text3默认配色差不多</li><li>night bright   ： 有点闪瞎眼的感觉</li></ul><p>具体使用哪个看个人喜好吧，本人night</p><h1 id="增加显示文章更新时间"><a href="#增加显示文章更新时间" class="headerlink" title="增加显示文章更新时间"></a>增加显示文章更新时间</h1><p>在next主题的配置文件<code>themes/next/_config.yml</code>文件中搜索<code>post_meta</code>关键字，将属性<code>updated_at</code>该为<code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;hexo n “我的博客” == hexo new “我的博客” #新建文章&lt;/li&gt;
&lt;li&gt;hexo p =
      
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>初识React</title>
    <link href="http://yoursite.com/2019/01/08/n_reactBase/"/>
    <id>http://yoursite.com/2019/01/08/n_reactBase/</id>
    <published>2019-01-08T01:33:02.594Z</published>
    <updated>2019-01-23T07:02:28.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><ul><li>React起源于Facebook的内部项目，因为该公司对市场上所有的JavaScript MVC框架，都不满意，就决定自己写一套，用来架设Instagram(照片交友)的网站，做出来以后，发现这套东西很好用，就在2013年5月开源了；</li><li>Angular1 2009年谷歌</li><li>由于React的设计思想独特，属于革命性的创新，性能出众，代码逻辑却非常简单，所以，越来越多的人开始关注和使用，认为他可能将来是Web开发的主流工具</li><li>清楚两个概念<ol><li>library（库）：小而巧的库，有点事船小好调头，可以很方便的从一个库切换到另外的库，但是代码几乎不会改变；</li><li>framework（框架）：大而全的是框架，框架提供了一整套的解决方案，所以，如果在项目中间，想切换到另外的框架，往往是比较困难的；</li></ol></li></ul><h1 id="前端的三大主流框架"><a href="#前端的三大主流框架" class="headerlink" title="前端的三大主流框架"></a>前端的三大主流框架</h1><ul><li>Angular.js：出来的较早的前端框架，学习曲线比较陡，NG1学起来比较麻烦，NG2-NG5开始，进行了一系列的改革，也提供了组件化开发的概念，从NG2开始，也支持使用了TS进行编辑；</li><li>Vue.js：最火（关注的人比较多）的一门前端框架，它是中国人开发的，对我们来说，文档比较友好一些；</li><li>React.js:最流行（用的人比较多）的一门框架，因为它的设计很优秀；</li></ul><h1 id="React与Vue的对比"><a href="#React与Vue的对比" class="headerlink" title="React与Vue的对比"></a>React与Vue的对比</h1><h2 id="组件化方面"><a href="#组件化方面" class="headerlink" title="组件化方面"></a>组件化方面</h2><ol><li>什么是模块化：从代码的角度来进行分析的，把一些可复用的代码，抽离为单个的模块，便于项目的维护和开发；</li><li>什么是组件化：是从UI界面的角度来进行分析的，把一些可复用的UI元素，抽离为单独的组件，便于醒目的维护和开发；</li><li>组件化的好处：随着项目规模的增大，手里的组件越来越多，很方便的能把现有的组件，拼接为一个完整的页面；</li><li>Vue是如何实现组件化的：通过.vue文件；</li><li>React如何实现组件化：一般都是通过JS来实现的</li></ol><h2 id="开发团队方面"><a href="#开发团队方面" class="headerlink" title="开发团队方面"></a>开发团队方面</h2><ul><li>React是由FaceBook前端官方团队进行维护和更新的，因此，React的维护开发团队，技术实力比较雄厚=</li><li>Vue：第一版，主要是由作者尤雨溪专门进行维护的，当Vue更新到2.x版本之后，也有了以尤雨溪为主的开源小团队，进行维护和开发</li></ul><h2 id="社区方面"><a href="#社区方面" class="headerlink" title="社区方面"></a>社区方面</h2><ul><li>在社区方面，React由于诞生的比较早，所以社区比较强大，一些常见的问题，坑，最优的解决方案，文档，博客，在社区中都是很方便的就能找到；</li><li>Vue是近两年才火起来的，所以他的社区性对于React来说要小一些，可能有的一些坑，没人踩过；</li></ul><h2 id="移动APP开发体验方面"><a href="#移动APP开发体验方面" class="headerlink" title="移动APP开发体验方面"></a>移动APP开发体验方面</h2><ul><li>Vue，结合Weex这门技术，提供了迁移到移动端APP开发的体验</li><li>React 结合ReactNative也提供了无缝迁移到移动App的开发体验</li></ul><h1 id="为什么要学习React"><a href="#为什么要学习React" class="headerlink" title="为什么要学习React"></a>为什么要学习React</h1><ol><li>设计很优秀，一切基于JS并且实现了组件化的思想</li><li>开发团队实力强悍，不必担心断更的情况；</li><li>社区强大，很多问题都能找到直接的解决方案</li><li>提供了无缝转到ReactNative的开发体验，让我们的技术能力得到了拓展，增强了我们的核心竞争力</li><li>很多企业中，前端项目的技术选型采用的是React.js</li></ol><h1 id="React中的几个核心概念"><a href="#React中的几个核心概念" class="headerlink" title="React中的几个核心概念"></a>React中的几个核心概念</h1><h2 id="虚拟DOM（Vitual-Document-Object-Model）"><a href="#虚拟DOM（Vitual-Document-Object-Model）" class="headerlink" title="虚拟DOM（Vitual Document Object Model）"></a>虚拟DOM（Vitual Document Object Model）</h2><ul><li><strong>Dom的本质</strong> 浏览器中的概念，用JS对象来表示页面上的元素，并提供了操作DOM对象的API；</li><li><strong>React中的虚拟DOM</strong> 是框架中的概念，是程序员用JS对象来模拟页面中的DOM和DOM嵌套；</li><li><strong>虚拟DOM的目的</strong> 为了实现页面中，DOM元素的高效更新</li><li><strong>Dom和虚拟DOM的区别</strong><ul><li>DOM：浏览器中提供的概念，用JS对象，表示页面中的元素，并提供了操作元素的API</li><li>虚拟DOM：是框架中的概念，是开发框架的程序员，手动用JS对象来模拟DOM元素和嵌套关系；<ul><li>本质：用JS对象来模拟DOM元素和嵌套关系</li><li>目的：是为了实现页面元素的高效更新；</li></ul></li></ul></li></ul><h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><ul><li><p><strong>tree diff</strong> 新旧两颗DOM树，逐层对比的过程，就是Tree Diff,当整颗DOM逐层对比完毕，则所有需要被按时更新的元素，必然能够找到</p></li><li><p><strong>component diff</strong> 在进行Tree Diff的时候，每一层，组件级别的对比，叫做Component Diff;</p><ul><li>如果对比前后，组件的类型相同，则暂时认为此组件不需要被更新；</li><li>如果对比之后，组件类型不同，则暂时认为此组件不需要被更新</li></ul></li><li><p><strong>element diff</strong> 在进行组件对比的会后，如果两个组件类型相同，则需要进行元素的对比，这叫做element diff；</p></li></ul><h1 id="创建基本的webpack4-x项目"><a href="#创建基本的webpack4-x项目" class="headerlink" title="创建基本的webpack4.x项目"></a>创建基本的webpack4.x项目</h1><ol><li>运行<code>npm init -y</code> 快速初始化项目</li><li>在根目录创建<code>src</code>源代码以及<code>dist</code>产品目录</li><li>在src下创建<code>index.html</code>和<code>main.js</code>(入口文件)</li><li>执行命令安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cnpm i webpack wepack-cli webpack-dev-server html-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="4"><li>新建 <code>webpack.config.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'./dist/bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">"./src/index.html"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>执行命令 <code>webpack-dev-server</code></li></ol><h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><h2 id="JSX语法-1"><a href="#JSX语法-1" class="headerlink" title="JSX语法"></a>JSX语法</h2><p>就是符合xml规范的JS语法，语法格式相对来说，要比HTML严谨的多</p><h2 id="使用jsx语法"><a href="#使用jsx语法" class="headerlink" title="使用jsx语法"></a>使用jsx语法</h2><ul><li>安装babel插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-core babel-loader babel-plugin-transform-runtime babel-preset-env babel-preset-stage-0 -D</span><br><span class="line"></span><br><span class="line">cnpm i babel-loader@7.1.5 -D</span><br></pre></td></tr></table></figure><ul><li>安装能够识别转换jsx的包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure><ul><li>新建<code>.babelrc</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"stage-0"</span>,<span class="string">"react"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 <code>webpack.config.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.js|jsx$/</span>,</span><br><span class="line">            use:<span class="string">'babel-loader'</span>,</span><br><span class="line">            exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsx注意事项"><a href="#jsx注意事项" class="headerlink" title="jsx注意事项"></a>jsx注意事项</h1><ol><li><strong>jsx语法本质:</strong>并不是直接把jsx渲染到页面上，而是内部先转换成了createElement的形式，在渲染的</li><li><strong>在jsx中混合写入js表达式</strong>：在jsx语法中，要把js代码写到<code>{}</code>中</li><li><strong>在jsx中添加类名：</strong>使用<code>className</code>来替代<code>class</code></li><li><strong>在jsx中为label添加for属性：</strong>使用<code>htmlFor</code></li><li>在jsx语法中，标签必须成对出现，如果是单标签，则必须自闭</li></ol><p>当编译引擎，在编译jsx代码的时候，如果遇到了<code>&lt;</code>就会把它当做html代码去编译，如果遇到了<code>{}</code>就会作为普通js代码去编译</p><h1 id="React中创建组件"><a href="#React中创建组件" class="headerlink" title="React中创建组件"></a>React中创建组件</h1><h2 id="使用构造函数来创建组件"><a href="#使用构造函数来创建组件" class="headerlink" title="使用构造函数来创建组件"></a>使用构造函数来创建组件</h2><h3 id="声明组件"><a href="#声明组件" class="headerlink" title="声明组件"></a>声明组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//注意，不论在vue还是react中，组件props永远都是只读的，不能被重新赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>HELLO--&#123;props.name&#125;--&#123;props.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Hello &#123;...li&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>组件名称必须大写</li><li>组件传参可以使用<code>...</code>展开运算符进行传参</li><li>可以将组件封装到单独的js文件中，但是必须引入<code>React</code>对象</li></ol><h3 id="关于路径配置"><a href="#关于路径配置" class="headerlink" title="关于路径配置"></a>关于路径配置</h3><ol><li>如果引入文件需要省略后缀名可以在webpack中做如下配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">    extensions:[<span class="string">'.js'</span>,<span class="string">'.jsx'</span>,<span class="string">'.json'</span>],<span class="comment">//表示，这几个文件的后缀名可以省略不写，会按照书写顺序来解析</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>关于引用路径中的<code>@</code>符号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias:&#123;</span><br><span class="line">    <span class="string">'@'</span>:path.join(__dirname,<span class="string">'./src'</span>)<span class="comment">//这样，@就表示项目根目录中src的这一层路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Class类来创建组件"><a href="#使用Class类来创建组件" class="headerlink" title="使用Class类来创建组件"></a>使用Class类来创建组件</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>movie组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span>&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>组件内可以直接通过<code>this.props</code>接受父组件传递的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span> &#123;<span class="attr">...li</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>这个<code>this.state</code>就相当于vue中的<code>data(){return{}}</code><br>状态和<code>props</code>相比，是可以更改的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            msg:<span class="string">"大家好"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.name&#125;---&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span> &#123;<span class="attr">...li</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h2 id="两种组件方式的对比"><a href="#两种组件方式的对比" class="headerlink" title="两种组件方式的对比"></a>两种组件方式的对比</h2><blockquote><p>注意：使用class关键字创建的组件，有自己的私有数据this.state和生命周期<br>注意：使用function创建的组件，只有props，没有自己的私有属性和声明周期</p></blockquote><ol><li>用构造函数创造出来的组件叫做<code>无状态组件</code></li><li>用class关键字创造出来的组件，叫做<code>有状态组件</code></li><li>什么情况下使用有状态组件？什么情况下使用无状态组件？<ul><li>如果一个组件需要有自己的私有数据，推荐使用class</li><li>如果一个组件不需要有私有数据，则推荐使用构造函数</li><li>React官方说，无状态组件，由于没有自己的state和声明周期，所以运行效率会比有状态组件稍微高一些</li></ul></li></ol><blockquote><p>有状态组件和无状态组件之间的本质区别就是：有无state属性，有无声明周期函数</p></blockquote><ol start="4"><li>组件中的<code>props</code>和<code>state/data</code>之前的区别<ul><li>props中的数据都是外界传递进来的</li><li>state、data中的数据，都是组件私有的；</li><li>props中的数据都是只读，不能重新赋值</li><li>state/data中的数据，都是可读可写的</li></ul></li></ol><h1 id="CSS模块化"><a href="#CSS模块化" class="headerlink" title="CSS模块化"></a>CSS模块化</h1><h2 id="CSS行内式"><a href="#CSS行内式" class="headerlink" title="CSS行内式"></a><code>CSS</code>行内式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>'<span class="attr">red</span>',<span class="attr">fontWeight:200</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启用css-modules"><a href="#启用css-modules" class="headerlink" title="启用css-modules"></a>启用css-modules</h2><ol><li>修改<code>webpack.config.js</code>这个配置文件，为<code>css-loader</code>添加参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:&#123;<span class="string">'style-loader'</span>,<span class="string">'css-loader-modules&#125;&#125;</span></span><br><span class="line"><span class="string">//为.css后缀名的样式表启动CSS模块化=</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在需要的组件中，<code>import</code> 导入样式表，并接口模块化的CSS样式对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cssObj <span class="keyword">from</span> <span class="string">'../css/CmtList.css'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在需要HTML标签上，使用<code>className</code>指定模块化的样式</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><img src="/2019/01/08/n_reactBase/1.bmp" alt="1542077018582"><br><img src="/2019/01/08/n_reactBase/2.bmp" alt="1542077018582"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="/2019/01/08/n_reactBase/3.bmp" alt="1542077018582"><br><img src="/2019/01/08/n_reactBase/4.bmp" alt="1542077018582"></p><h1 id="React中绑定事件的注意点"><a href="#React中绑定事件的注意点" class="headerlink" title="React中绑定事件的注意点"></a>React中绑定事件的注意点</h1><p><img src="/2019/01/08/n_reactBase/5.bmp" alt="1542077018582"><br><img src="/2019/01/08/n_reactBase/6.bmp" alt="1542077018582"></p><h1 id="使用ref获取DOM元素应用"><a href="#使用ref获取DOM元素应用" class="headerlink" title="使用ref获取DOM元素应用"></a>使用ref获取DOM元素应用</h1><p>和vue差不多，vue为页面上的元素提供了<code>ref</code>的属性，如果想要获取元素引用，则需要<code>this.$refs</code>引用名称</p><p>在React中，也有<code>ref</code>如果获取元素的应用<code>this.$refs</code>应用名称</p><h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><p><img src="/2019/01/08/n_reactBase/7.bmp" alt="1542077018582"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React简介&quot;&gt;&lt;a href=&quot;#React简介&quot; class=&quot;headerlink&quot; title=&quot;React简介&quot;&gt;&lt;/a&gt;React简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;React起源于Facebook的内部项目，因为该公司对市场上所有的JavaScript
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
      <category term="Framework" scheme="http://yoursite.com/categories/JavaScript-Advanced/Framework/"/>
    
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
</feed>
