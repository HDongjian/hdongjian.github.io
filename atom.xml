<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H-Dongjian</title>
  
  <subtitle>前端小学生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-21T05:45:44.919Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>H-Dongjian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于图片处理的唠唠叨叨</title>
    <link href="http://yoursite.com/2019/01/21/dealwith_pic/"/>
    <id>http://yoursite.com/2019/01/21/dealwith_pic/</id>
    <published>2019-01-21T02:21:50.496Z</published>
    <updated>2019-01-21T05:45:44.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下代码是以vue语法为主，如果使用其他框架，请更改语法</p></blockquote><h1 id="图片上传并获取图片方法"><a href="#图片上传并获取图片方法" class="headerlink" title="图片上传并获取图片方法"></a>图片上传并获取图片方法</h1><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>本方法是获取图片的文件流，通过formData方法处理图片参数以文件流方式传递到后台（同样支持文件）;</p><ol><li><p>为<code>input</code>绑定<code>change</code>事件，并绑定<code>accept</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/jpg,image/png,image/svg"</span> @<span class="attr">change</span>=<span class="string">"uploadImg($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>change</code>方法获取图片</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uploadImg(e) &#123;</span><br><span class="line">    <span class="keyword">var</span> event = e ? e : <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> obj = event.srcElement ? event.srcElement : event.target;</span><br><span class="line">    <span class="comment">//obj.files[0]为获取的图片文件流</span></span><br><span class="line">    <span class="comment">// getObjectURL方法上传图片方法</span></span><br><span class="line">    <span class="keyword">var</span> srcs = <span class="keyword">this</span>.getObjectURL(obj.files[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//清除input的方法，防止change事件不触发</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.input.value = <span class="string">""</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="获取上传的图片"><a href="#获取上传的图片" class="headerlink" title="获取上传的图片"></a>获取上传的图片</h2><p>如果在图片上传之前需要预览图片，可以通过以下方法获取图片，<code>url</code>绑定到<code>img</code>标签即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getObjectURL(file) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.createObjectURL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.createObjectURL(file)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.URL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.URL.createObjectURL(file)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.webkitURL != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        url = <span class="built_in">window</span>.webkitURL.createObjectURL(file)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断图片链接是否有效"><a href="#判断图片链接是否有效" class="headerlink" title="判断图片链接是否有效"></a>判断图片链接是否有效</h1><ul><li>场景：如果后台返回图片链接，如果有效则展示，无效的话不展示</li><li>原理：通过img标签引入图片，可以通过<code>img</code>的<code>onload</code>（有效）和<code>onerror</code>（无效）回调来区分</li></ul><blockquote><p>注意回调方法是异步的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> checkImgExists(imgurl) &#123;</span><br><span class="line">    <span class="keyword">var</span> ImgObj = <span class="keyword">new</span> Image();</span><br><span class="line">    ImgObj.src = imgurl;</span><br><span class="line"></span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    image.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h1><h2 id="图片压缩-1"><a href="#图片压缩-1" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>方法有点长，懒得分了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param &#123;文件&#125; file </span></span><br><span class="line"><span class="comment">    * @param &#123;配置属性&#125; options </span></span><br><span class="line"><span class="comment">    * @param &#123;回调函数&#125; callback </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">loopPhotoCompress(file, options, callback) &#123;</span><br><span class="line">    options.size = <span class="number">1</span>;<span class="comment">//此处的单位为MB</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> imgtype = <span class="string">'image/jpeg'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用FileReader读取文件</span></span><br><span class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 将图片读取为base64</span></span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> base64 = evt.target.result;</span><br><span class="line">        <span class="comment">// 创建图片对象</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="comment">// 用图片对象加载读入的base64</span></span><br><span class="line">        img.src = base64;</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>,</span><br><span class="line">                canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>),</span><br><span class="line">                ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">            canvas.setAttribute(<span class="string">'width'</span>, that.width);</span><br><span class="line">            canvas.setAttribute(<span class="string">'height'</span>, that.height);</span><br><span class="line">            <span class="comment">// 将图片画入canvas</span></span><br><span class="line">            ctx.drawImage(that, <span class="number">0</span>, <span class="number">0</span>, that.width, that.height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 压缩到指定体积以下（M）</span></span><br><span class="line">            <span class="keyword">if</span> (options.size) &#123;</span><br><span class="line">                <span class="keyword">var</span> scale = <span class="number">0.9</span>;</span><br><span class="line">                (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">scale</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (base64.length / <span class="number">1024</span> / <span class="number">1024</span> &gt; options.size &amp;&amp; scale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        base64 = canvas.toDataURL(imgtype, scale);</span><br><span class="line">                        scale = scale - <span class="number">0.1</span>;</span><br><span class="line">                        f(scale);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback(self.convertBase64UrlToBlob(base64, file));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)(scale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.scale) &#123;</span><br><span class="line">                <span class="comment">// 按比率压缩</span></span><br><span class="line">                base64 = canvas.toDataURL(imgtype, options.scale);</span><br><span class="line">                callback(self.convertBase64UrlToBlob(base64, file));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="base64转file文件流"><a href="#base64转file文件流" class="headerlink" title="base64转file文件流"></a>base64转file文件流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将以base64的图片url数据转换为Blob</span></span><br><span class="line"><span class="comment">    * @param urlData</span></span><br><span class="line"><span class="comment">    *用url方式表示的base64图片数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">convertBase64UrlToBlob(urlData, file) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = urlData.split(<span class="string">','</span>),</span><br><span class="line">        mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = atob(arr[<span class="number">1</span>]),</span><br><span class="line">        n = bstr.length,</span><br><span class="line">        u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], file.name, &#123; <span class="attr">type</span>: file.type &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片增加马赛克"><a href="#图片增加马赛克" class="headerlink" title="图片增加马赛克"></a>图片增加马赛克</h1><ul><li>获取图片写入到<code>canvas</code>，通过检测鼠标的落下，移动、抬起事件，获取矩形</li><li>通过<code>getImageData</code>方法获取图片像素点数组</li><li>通过改变数据中像素点的颜色（不同像素点交换颜色）<code>setXY</code>方法</li></ul><blockquote><p><code>getImageData</code>此方法对于跨域图片，浏览器会进行拦截，服务器需要设置允许跨域访问</p></blockquote><p>文件：<a href="/2019/01/21/dealwith_pic/toMosic.vue">图片增加马赛克</a></p>]]></content>
    
    <summary type="html">
    
      图片处理方法集锦，包括图片上传、图片压缩、图片增加马赛克等方法
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="Pic Deal" scheme="http://yoursite.com/tags/Pic-Deal/"/>
    
  </entry>
  
  <entry>
    <title>Date的那些事</title>
    <link href="http://yoursite.com/2019/01/21/dealwith_time/"/>
    <id>http://yoursite.com/2019/01/21/dealwith_time/</id>
    <published>2019-01-21T02:12:31.499Z</published>
    <updated>2019-01-21T05:45:52.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateToString</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (date &amp;&amp; date <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> yyyy = date.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> mm = date.getMonth() &lt; <span class="number">9</span> ? <span class="string">"0"</span> + (date.getMonth() + <span class="number">1</span>) : (date.getMonth() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> dd = date.getDate() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getDate() : date.getDate();</span><br><span class="line">    <span class="keyword">var</span> hh = date.getHours() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getHours() : date.getHours();</span><br><span class="line">    <span class="keyword">var</span> min = date.getMinutes() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getMinutes() : date.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> ss = date.getSeconds() &lt; <span class="number">10</span> ? <span class="string">"0"</span> + date.getSeconds() : date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.concat(yyyy).concat(<span class="string">'-'</span>).concat(mm).concat(<span class="string">'-'</span>).concat(dd).concat(<span class="string">'-'</span>).concat(ss);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模拟moment插件"><a href="#模拟moment插件" class="headerlink" title="模拟moment插件"></a>模拟moment插件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 格式化时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">myMoment = <span class="function">(<span class="params">date = <span class="keyword">new</span> <span class="built_in">Date</span>(</span>).<span class="params">getTime</span><span class="params">()</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.date = <span class="keyword">new</span> <span class="built_in">Date</span>(date)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输入格式化格式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">formate = <span class="function">(<span class="params">formatStr = <span class="string">'YYYY-MM-DD HH:mm:ss'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">this</span>.date</span><br><span class="line">    <span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line">    <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.getDate()</span><br><span class="line">    <span class="keyword">const</span> week = date.getDay()</span><br><span class="line">    <span class="keyword">const</span> hour = date.getHours()</span><br><span class="line">    <span class="keyword">const</span> minute = date.getMinutes()</span><br><span class="line">    <span class="keyword">const</span> second = date.getSeconds()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> formatStr.replace(<span class="regexp">/Y&#123;2,4&#125;|M&#123;1,2&#125;|D&#123;1,2&#125;|d&#123;1,4&#125;|H&#123;1,2&#125;|m&#123;1,2&#125;|s&#123;1,2&#125;/g</span>, (match) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YY'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(year).slice(<span class="number">-2</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YYY'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'YYYY'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(year)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(month)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'MM'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(month).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(day)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DD'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(day).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(week)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'dd'</span>:</span><br><span class="line">                <span class="keyword">return</span> weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'ddd'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'周'</span> + weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'dddd'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'星期'</span> + weeks[week]</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'H'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(hour)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'HH'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(hour).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(minute)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'mm'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(minute).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(second)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'ss'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>(second).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> match</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取当前日期的周边"><a href="#获取当前日期的周边" class="headerlink" title="获取当前日期的周边"></a>获取当前日期的周边</h1><h2 id="今天"><a href="#今天" class="headerlink" title="今天"></a>今天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showToDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    M = <span class="built_in">Number</span>(Nowdate.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Nowdate.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + Nowdate.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="明天"><a href="#明天" class="headerlink" title="明天"></a>明天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTomorrow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tom = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    tom.setDate(tom.getDate() + <span class="number">1</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(tom.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> tom.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + tom.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本周第一天"><a href="#本周第一天" class="headerlink" title="本周第一天"></a>本周第一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showWeekFirstDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> WeekFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate - (Nowdate.getDay() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(WeekFirstDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> WeekFirstDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + WeekFirstDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本周最后一天"><a href="#本周最后一天" class="headerlink" title="本周最后一天"></a>本周最后一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showWeekLastDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> WeekFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate - (Nowdate.getDay() - <span class="number">1</span>) * <span class="number">86400000</span>);</span><br><span class="line">    <span class="keyword">var</span> WeekLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>((WeekFirstDay / <span class="number">1000</span> + <span class="number">6</span> * <span class="number">86400</span>) * <span class="number">1000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(WeekLastDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Nowdate.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + WeekLastDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本月第一天"><a href="#本月第一天" class="headerlink" title="本月第一天"></a>本月第一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMonthFirstDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> MonthFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate.getFullYear(), Nowdate.getMonth(), <span class="number">1</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(MonthFirstDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> MonthFirstDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + MonthFirstDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本月最后一天"><a href="#本月最后一天" class="headerlink" title="本月最后一天"></a>本月最后一天</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMonthLastDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Nowdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> MonthNextFirstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(Nowdate.getFullYear(), Nowdate.getMonth() + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> MonthLastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(MonthNextFirstDay - <span class="number">86400000</span>);</span><br><span class="line">    M = <span class="built_in">Number</span>(MonthLastDay.getMonth()) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> MonthLastDay.getFullYear() + <span class="string">"-"</span> + M + <span class="string">"-"</span> + MonthLastDay.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      关于Date方法的运用，格式化，模拟moment插件基本方法，获取当月第一天，当周第一天等方法
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="DateTime" scheme="http://yoursite.com/tags/DateTime/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的面向对象</title>
    <link href="http://yoursite.com/2019/01/18/oop_base/"/>
    <id>http://yoursite.com/2019/01/18/oop_base/</id>
    <published>2019-01-18T05:40:59.163Z</published>
    <updated>2019-01-21T05:48:07.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象（oop）"><a href="#面向对象（oop）" class="headerlink" title="面向对象（oop）"></a>面向对象（oop）</h1><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="number">12</span>, <span class="string">'张三'</span>))</span><br></pre></td></tr></table></figure><h3 id="构造器–constructor"><a href="#构造器–constructor" class="headerlink" title="构造器–constructor"></a>构造器–constructor</h3><ul><li><p><strong>构造器：</strong>每一个类中都有一个构造器，如果我们程序员没有手动指定构造器，那么可以认为类内部有一个隐形的，看不见的空构造器类似于<code>constructor(){}</code></p></li><li><p><strong>作用：</strong>就是每当new这个类的时候，必然会优先执行构造器中的代码</p></li></ul><h3 id="静态方法-amp-静态属性"><a href="#静态方法-amp-静态属性" class="headerlink" title="静态方法&amp;静态属性"></a>静态方法&amp;静态属性</h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用</p><ul><li>构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonC</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">PersonC.a = <span class="number">1</span>;</span><br><span class="line">PersonC.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Class类</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> a = <span class="number">12</span></span><br><span class="line">    <span class="keyword">static</span> b()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态方法或者静态属性无法通过实例之后的对象来调用，因为这是挂载到类或者构造函数上面的，只能通过<code>Person.a</code>或者<code>PersonC.a</code>来获取或者调用</p><h3 id="实例方法-amp-实例属性"><a href="#实例方法-amp-实例属性" class="headerlink" title="实例方法&amp;实例属性"></a>实例方法&amp;实例属性</h3><p>通过new出来的实例，访问到的属性或者方法，叫做实例方法或者实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonC</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">PersonC.prototype.c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    c()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br></pre></td></tr></table></figure><h3 id="关于super方法"><a href="#关于super方法" class="headerlink" title="关于super方法"></a>关于super方法</h3><p>在以上代码中如果我们在<code>Chiness</code>中值只调用配置<code>constructor</code>函数，就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// missing super() call in constructor</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//Chiness &#123;age: undefined, name: undefined&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果我们调用了，不会报错，但是实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code></p><p>就会提醒我们调用super方法</p><ol><li><p>为什么必须调用<code>super</code>?</p><p>答：如果一个子类，通过extends关键字继承了父类，那么，子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p></li></ol><p>  <strong>根据以上说法，如果想在构造器中使用this也必须是在super调用之后</strong></p><ol start="2"><li><p><code>super</code>方法是什么?</p><p>答:<code>super</code>是一个函数，而且它是父类的构造器，子类中的<code>super</code>就是其中父类中，<code>constructor</code>构造器的一个引用</p></li><li><p>为什么调用之后实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code>?</p><p>答:<code>super</code>是一个函数，而且它是父类的构造器,所以如果只调用，不传递参数，所以实例对象中的<code>age</code>和<code>name</code>属性的值为<code>undefined</code></p></li></ol><ol start="4"><li>正确用法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age,name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>))</span><br></pre></td></tr></table></figure><h3 id="关于子类独有属性"><a href="#关于子类独有属性" class="headerlink" title="关于子类独有属性"></a>关于子类独有属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chiness</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age,name,id)&#123;</span><br><span class="line">        <span class="keyword">super</span>(age,name)</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Chiness(<span class="number">12</span>,<span class="string">'李四'</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象（oop）&quot;&gt;&lt;a href=&quot;#面向对象（oop）&quot; class=&quot;headerlink&quot; title=&quot;面向对象（oop）&quot;&gt;&lt;/a&gt;面向对象（oop）&lt;/h1&gt;&lt;h1 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;head
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Bug第一弹</title>
    <link href="http://yoursite.com/2019/01/17/bugs_1/"/>
    <id>http://yoursite.com/2019/01/17/bugs_1/</id>
    <published>2019-01-17T09:19:11.071Z</published>
    <updated>2019-01-17T09:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSO拦截登陆后页面报错"><a href="#SSO拦截登陆后页面报错" class="headerlink" title="SSO拦截登陆后页面报错"></a>SSO拦截登陆后页面报错</h2><h3 id="功能场景"><a href="#功能场景" class="headerlink" title="功能场景"></a>功能场景</h3><p>校验登录通过cookie中特定cookie，如果没有，所有请求会报403，通过axios的钩子函数检测异常跳转到指定登录页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求后的钩子函数</span></span><br><span class="line">HTTP.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(location.href.split('?')[0] + '?' + encodeURIComponent(location.href.split('?')[1]))</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">        Cookie.remove(<span class="string">'userData'</span>)</span><br><span class="line">        localStorage.clear();</span><br><span class="line">        sessionStorage.clear();</span><br><span class="line">        <span class="built_in">console</span>.log(location.href)</span><br><span class="line">        <span class="keyword">if</span> (error.response.data.indexOf(<span class="string">'jumpto'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            location.href = error.response.data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>在指定jumpto跳转，后天未将参数中&amp;符号后面的参数带来，导致页面参数不足报错</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解析url路径？参数，通过incode方法解析，去除&amp;符号，页面在通过decode方法解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求后的钩子函数</span></span><br><span class="line">HTTP.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(location.href.split('?')[0] + '?' + encodeURIComponent(location.href.split('?')[1]))</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">        Cookie.remove(<span class="string">'userData'</span>)</span><br><span class="line">        localStorage.clear();</span><br><span class="line">        sessionStorage.clear();</span><br><span class="line">        <span class="built_in">console</span>.log(location.href)</span><br><span class="line">        <span class="keyword">if</span> (error.response.data.indexOf(<span class="string">'jumpto'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (location.href.indexOf(<span class="string">'/approval'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href.split(<span class="string">'?'</span>)[<span class="number">0</span>] + <span class="string">'?'</span> + <span class="built_in">encodeURIComponent</span>(location.href.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                location.href = error.response.data + <span class="string">'&amp;jumpto='</span> + location.href</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            location.href = error.response.data</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="web和app共有页面无法区分设备"><a href="#web和app共有页面无法区分设备" class="headerlink" title="web和app共有页面无法区分设备"></a>web和app共有页面无法区分设备</h2><h3 id="功能场景-1"><a href="#功能场景-1" class="headerlink" title="功能场景"></a>功能场景</h3><p>移动端和app端有相同功能页面，需要判断当前设备，并打开相应页面</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">common.judegWebOrApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> Agents = [<span class="string">"zhushou"</span>, <span class="string">"android"</span>, <span class="string">"iphone"</span>, <span class="string">"symbianos"</span>, <span class="string">"windows phone"</span>, <span class="string">"ipad"</span>, <span class="string">"ipod"</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Agents.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> params = location.href.split(<span class="string">'?'</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> nowPage = location.href.indexOf(<span class="string">'app'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(flag,nowPage)</span><br><span class="line">    <span class="keyword">if</span> (flag &amp;&amp; nowPage &gt;= <span class="number">0</span>) &#123;<span class="comment">//web端</span></span><br><span class="line">        location.href = <span class="string">"/web/approval?"</span>+params;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; nowPage &lt; <span class="number">0</span>) &#123;<span class="comment">//app端</span></span><br><span class="line">        location.href = <span class="string">"/app/approval?"</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现"><a href="#通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现" class="headerlink" title="通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现"></a>通过app的webview加载H5页面在iphone6s和iphoneSE中吸底偶尔不出现</h2><h3 id="bug原因"><a href="#bug原因" class="headerlink" title="bug原因"></a>bug原因</h3><p>在浏览器中测试没有问题，经过测试，在webview中，获取的高度iphone6s和iphoneSE获取的页面高度比真实高度高64px，导致吸底消失</p><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><p>判断是否是iphone手机，并判断宽度，符合iphone6s以及iphonese尺寸的，采取设置top值而不是botom值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.clientWidth ? <span class="built_in">document</span> : <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="keyword">var</span> height = docEl.clientHeight;</span><br><span class="line"><span class="keyword">var</span> width = docEl.clientWidth;</span><br><span class="line"><span class="keyword">var</span> reduce = <span class="number">98</span> / <span class="number">30</span> * width / <span class="number">25</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.xiBot = <span class="keyword">this</span>.$refs.botTab;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.xiBot) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (width == <span class="number">320</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.xiBot.style.top = <span class="number">548</span> - reduce + <span class="string">'px'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">375</span> &amp;&amp; height &lt; <span class="number">690</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.xiBot.style.top = <span class="number">647</span> - reduce + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><h2 id="webview中ios系统页面不出现"><a href="#webview中ios系统页面不出现" class="headerlink" title="webview中ios系统页面不出现"></a>webview中ios系统页面不出现</h2><h3 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h3><p>在app中内嵌网页，安卓端没问题，在ios上会出现偶数次打开页面空白现象，但是页面中去除本身app头部的方法已经执行，也就是说页面正常加载，但是页面呈现空白；</p><h3 id="bug原因-1"><a href="#bug原因-1" class="headerlink" title="bug原因"></a>bug原因</h3><p>在vue的router.beforeEach钩子函数中调用了函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 路由拦截（钩子）*/</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//重置到页面顶端</span></span><br><span class="line">  <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//去除桔子堆头部</span></span><br><span class="line">  api.appDelHeader();</span><br><span class="line">  <span class="comment">//判断路径是否是403和选择地址页面</span></span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">'/403'</span> || to.path === <span class="string">'/FoodAddress'</span>) &#123;</span><br><span class="line">    next();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断是否校验checkCode</span></span><br><span class="line">  <span class="keyword">if</span> (api.mall.on) &#123;</span><br><span class="line">    login.checkLogin(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">//失败时候的回调</span></span><br><span class="line">      next(<span class="string">'/403'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;, () =&gt; &#123;<span class="comment">//成功的回调</span></span><br><span class="line">      <span class="keyword">if</span> (!api.checkUA() &amp;&amp; api.mall.isCheckUA) &#123;</span><br><span class="line">        next(<span class="string">'/403'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (localStorage.getItem(<span class="string">'arriveAddress'</span>) &amp;&amp; localStorage.getItem(<span class="string">'menuId'</span>)) &#123; <span class="comment">// 已选择了默认区域</span></span><br><span class="line">        next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'重新获取地址'</span>)</span><br><span class="line">        getArea();<span class="comment">//就是这个方法，实参未传</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得区域列表</span></span><br><span class="line"><span class="keyword">const</span> getArea = <span class="function"><span class="keyword">function</span> (<span class="params">next, to</span>) </span>&#123;</span><br><span class="line">  api.get(&#123;</span><br><span class="line">    data: &#123; <span class="attr">flag</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    url: <span class="string">"/area/queryList"</span>,</span><br><span class="line">    object: Vue,</span><br><span class="line">    errorIfo: <span class="string">"获取区域失败"</span>,</span><br><span class="line">    then: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// data = null;</span></span><br><span class="line">      <span class="keyword">if</span> (data &amp;&amp; data.menuId &amp;&amp; data.arriveAddress) &#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'menuId'</span>, data.menuId);</span><br><span class="line">        localStorage.setItem(<span class="string">'arriveAddress'</span>, data.arriveAddress)</span><br><span class="line">        localStorage.setItem(<span class="string">'floorId'</span>, data.floorId)<span class="comment">//localStorage保存楼层信息</span></span><br><span class="line">        <span class="keyword">if</span> (to.path == <span class="string">'/confirmPrepareMeal'</span>) &#123;</span><br><span class="line">          next();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next(<span class="string">'/HomeIndex'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next(<span class="string">'/FoodAddress'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面问题应该导致报错，但是web端测试没问题，安卓没问题，ios偶尔出现，很奇怪</p><h2 id="时间控件国际化无法重新渲染"><a href="#时间控件国际化无法重新渲染" class="headerlink" title="时间控件国际化无法重新渲染"></a>时间控件国际化无法重新渲染</h2><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><p>时间控件可以使用中英文，但是一经渲染，后期无法局部更新，导致点击切换语言按钮时候无法更改控件内容</p><h3 id="解决措施-1"><a href="#解决措施-1" class="headerlink" title="解决措施"></a>解决措施</h3><p>检测中英文切换操作，采用if重新渲染时间控件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$i18n.locale'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataPicker = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.dataPicker = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.showData = <span class="keyword">this</span>.$t(<span class="string">'message.myAppoint.today'</span>);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="ios时间处理失效"><a href="#ios时间处理失效" class="headerlink" title="ios时间处理失效"></a>ios时间处理失效</h2><h3 id="问题场景-1"><a href="#问题场景-1" class="headerlink" title="问题场景"></a>问题场景</h3><p>提交表单需要校验时间，如果时间小于当前时间，则默认取当前时间，此时需要时间戳对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择时间完成</span></span><br><span class="line">chooseTime(time) &#123;</span><br><span class="line">  <span class="keyword">this</span>.cancelTime(time);</span><br><span class="line">  <span class="keyword">this</span>.modalData.timeModal = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.initialCache(<span class="string">"ok"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//控制时间大小</span></span><br><span class="line">cancelTime(time) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.setTimeToSeconds(time) - <span class="keyword">this</span>.setTimeToSeconds() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = time;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">setTimeToSeconds(time) &#123;</span><br><span class="line">  <span class="comment">// var seconds = this.$moment(time).format('YYYY-MM-DD HH:mm');</span></span><br><span class="line">  <span class="comment">// return parseInt(new Date(seconds).getTime());</span></span><br><span class="line">  <span class="keyword">if</span> (time) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="bug原因-2"><a href="#bug原因-2" class="headerlink" title="bug原因"></a>bug原因</h3><p>new Date(‘时间字符串’)，ios对于时间字符串格式支持较少，不支持2018-02-02此格式的数据，支持/不支持-，导致时间戳校验失败</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择时间完成</span></span><br><span class="line">chooseTime(time) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(time)</span><br><span class="line">  time = <span class="keyword">this</span>.$moment(time).format(<span class="string">'YYYY/MM/DD HH:mm:ss'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(time)</span><br><span class="line">  <span class="keyword">this</span>.cancelTime(time);</span><br><span class="line">  <span class="keyword">this</span>.modalData.timeModal = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.initialCache(<span class="string">"ok"</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//控制时间大小</span></span><br><span class="line">cancelTime(time) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.setTimeToSeconds(time) - <span class="keyword">this</span>.setTimeToSeconds() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = time;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheData.visitingTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//设置时间</span></span><br><span class="line">setTimeToSeconds(time) &#123;</span><br><span class="line">  <span class="comment">// var seconds = this.$moment(time).format('YYYY-MM-DD HH:mm');</span></span><br><span class="line">  <span class="comment">// return parseInt(new Date(seconds).getTime());</span></span><br><span class="line">  <span class="keyword">if</span> (time) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="超小字符实现方式"><a href="#超小字符实现方式" class="headerlink" title="超小字符实现方式"></a>超小字符实现方式</h2><h3 id="问题场景-2"><a href="#问题场景-2" class="headerlink" title="问题场景"></a>问题场景</h3><p>设计图要求一个按钮字体大小为10px，但是谷歌浏览器最小字符为12px</p><h3 id="实现场景"><a href="#实现场景" class="headerlink" title="实现场景"></a>实现场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.repeat-post &#123;</span><br><span class="line">    border: 1px solid #FC9153;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    height: <span class="number">25</span>px;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    width: <span class="number">65</span>px;</span><br><span class="line">    color: #FC9153;</span><br><span class="line">    transform: scale(<span class="number">.8</span>,<span class="number">.9</span>);<span class="comment">//采用缩放属性实现</span></span><br><span class="line">    transform-origin: left;</span><br></pre></td></tr></table></figure><h2 id="安卓键盘遮挡输入框"><a href="#安卓键盘遮挡输入框" class="headerlink" title="安卓键盘遮挡输入框"></a>安卓键盘遮挡输入框</h2><h3 id="问题场景-3"><a href="#问题场景-3" class="headerlink" title="问题场景"></a>问题场景</h3><p>安卓在获取焦点弹起键盘会自动将也页面上滑，将input框置于可视位置，但是如果body有滚动条的情况下，则input框位置靠下就会被遮挡</p><h3 id="解决措施-2"><a href="#解决措施-2" class="headerlink" title="解决措施"></a>解决措施</h3><p>在input获取焦点的情况下现将页面上移到顶部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//滚动条到初始状态</span><br><span class="line">scollTopZero() &#123;</span><br><span class="line">    document.body.scrollTop = 0;</span><br><span class="line">    document.documentElement.scrollTop = 0;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="取餐时间内无法取餐"><a href="#取餐时间内无法取餐" class="headerlink" title="取餐时间内无法取餐"></a>取餐时间内无法取餐</h2><h3 id="问题场景-4"><a href="#问题场景-4" class="headerlink" title="问题场景"></a>问题场景</h3><p>正常订餐时间是00：00到下午16：30，但是在0点到8点区间无法点餐；<br>问题原因：后台返回的当前时间currentDate是一个日期字符串，与北京时区不同，有8个小时的时间差，前台处理的时候只是取了日期，导致当天8点之前的日期是昨天的时期</p><h3 id="解决措施-3"><a href="#解决措施-3" class="headerlink" title="解决措施"></a>解决措施</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Gray.prototype.toSeconds = <span class="function"><span class="keyword">function</span> (<span class="params">time, currentTime</span>) </span>&#123;</span><br><span class="line">  time = moment(time).format(<span class="string">'HH:mm:ss'</span>);</span><br><span class="line">  currentTime = moment(currentTime).format(<span class="string">'YYYY/MM/DD'</span>);</span><br><span class="line">  <span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(currentTime + <span class="string">' '</span> + time).getTime();</span><br><span class="line">  <span class="keyword">return</span> time2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示时间和取餐时间不一致"><a href="#显示时间和取餐时间不一致" class="headerlink" title="显示时间和取餐时间不一致"></a>显示时间和取餐时间不一致</h2><h3 id="问题场景-5"><a href="#问题场景-5" class="headerlink" title="问题场景"></a>问题场景</h3><p>后台提示的下单时间是00：00到下午4：30 在EP部分有一个的电脑时间显示有误，其他人没有问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thu Mar <span class="number">22</span> <span class="number">2018</span> <span class="number">21</span>:<span class="number">21</span>:<span class="number">47</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><h3 id="解决措施-4"><a href="#解决措施-4" class="headerlink" title="解决措施"></a>解决措施</h3><p>导致此问题原因为该人电脑时区设置的是美国，导致浏览器解析new Date的时候和正常时区不一致<br>将电脑时区调整好即可</p><h2 id="IOS系统中div盒子内设置滚动条，偶尔会滑动失效"><a href="#IOS系统中div盒子内设置滚动条，偶尔会滑动失效" class="headerlink" title="IOS系统中div盒子内设置滚动条，偶尔会滑动失效"></a>IOS系统中div盒子内设置滚动条，偶尔会滑动失效</h2><h3 id="问题场景-6"><a href="#问题场景-6" class="headerlink" title="问题场景"></a>问题场景</h3><p>在餐品页面内，有餐品列表，偶尔会出现滑动失效的问题，在苹果手机</p><h3 id="解决措施-5"><a href="#解决措施-5" class="headerlink" title="解决措施"></a>解决措施</h3><ul><li>采用body整体布局</li><li>使用iscroll插件解决</li><li>将此盒子设置为fixed定位</li></ul><h2 id="iphonx的兼容问题"><a href="#iphonx的兼容问题" class="headerlink" title="iphonx的兼容问题"></a>iphonx的兼容问题</h2><h3 id="问题场景-7"><a href="#问题场景-7" class="headerlink" title="问题场景"></a>问题场景</h3><p>一个侧边栏，点击从右侧划出的时候iphonex底部有空白，只有这个是这样的</p><h3 id="解决措施-6"><a href="#解决措施-6" class="headerlink" title="解决措施"></a>解决措施</h3><p>布局问题，原来次侧边栏和遮挡层在一个div中，点击的时候显示此div，并给遮挡层和侧边栏加入动画效果；<br>现在取消外层div即可</p>]]></content>
    
    <summary type="html">
    
      记录几个2017年项目中遇到的几个小问题，主要是安卓ios兼容，web以及移动端之间的问题
    
    </summary>
    
      <category term="Bugs" scheme="http://yoursite.com/categories/Bugs/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新】关于Hexo优化</title>
    <link href="http://yoursite.com/2019/01/16/about_hexo/"/>
    <id>http://yoursite.com/2019/01/16/about_hexo/</id>
    <published>2019-01-16T07:44:31.385Z</published>
    <updated>2019-01-21T05:43:07.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li><li>hexo p == hexo publish</li><li>hexo g == hexo generate#生成</li><li>hexo s == hexo server #启动服务预览</li><li>hexo d == hexo deploy#部署</li></ul><h1 id="增加站内搜索功能"><a href="#增加站内搜索功能" class="headerlink" title="增加站内搜索功能"></a>增加站内搜索功能</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在自己博客根目录下（我的目录：D:\workspace\hexo），执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>修改根目录下的_config.yml（我的目录：D:\workspace\hexo_config.yml），在最底部添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><p>修改主体下的themes\next_config.yml配置文件（我的目录：D:\workspace\hexo\themes\next_config.yml），搜索local_search，修改enable为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>开启本地server<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><h1 id="增加博客置顶功能（自定义排序）"><a href="#增加博客置顶功能（自定义排序）" class="headerlink" title="增加博客置顶功能（自定义排序）"></a>增加博客置顶功能（自定义排序）</h1><h2 id="修改node-modules下代码"><a href="#修改node-modules下代码" class="headerlink" title="修改node_modules下代码"></a>修改node_modules下代码</h2><p>找到<code>node_modules/hexo-generator-index/lib/generator.js</code>文件</p><p>将内部代码替换成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">var</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在文章添加 top 标签可以设置置顶顺序<code>顺序根据top的值来决定</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名</span><br><span class="line">date: 文章发布时间</span><br><span class="line">tags: 文章标签</span><br><span class="line">top: <span class="number">100</span>(文章置顶)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="Next主题设定代码高亮格式"><a href="#Next主题设定代码高亮格式" class="headerlink" title="Next主题设定代码高亮格式"></a>Next主题设定代码高亮格式</h1><p>需要改动的有hexo的配置文件<code>_config.yml</code>，以及next主题的配置文件<code>themes/next/_config.yml</code>文件</p><h2 id="更改hexo的配置文件"><a href="#更改hexo的配置文件" class="headerlink" title="更改hexo的配置文件"></a>更改hexo的配置文件</h2><p>查找<code>highlight</code>关键字，更改一下属性为true<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure></p><h2 id="更改next主题配置文件"><a href="#更改next主题配置文件" class="headerlink" title="更改next主题配置文件"></a>更改next主题配置文件</h2><p>搜索<code>highlight_theme</code>关键字，这个属性有四个值：</p><ul><li>normal  ：默认值</li><li>night   ：黑色</li><li>night eighties ：个人感觉跟第二个差不太多</li><li>night blue     ： 底部是蓝色，跟sublime text3默认配色差不多</li><li>night bright   ： 有点闪瞎眼的感觉</li></ul><p>具体使用哪个看个人喜好吧，本人night</p><h1 id="增加显示文章更新时间"><a href="#增加显示文章更新时间" class="headerlink" title="增加显示文章更新时间"></a>增加显示文章更新时间</h1><p>在next主题的配置文件<code>themes/next/_config.yml</code>文件中搜索<code>post_meta</code>关键字，将属性<code>updated_at</code>该为<code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;hexo n “我的博客” == hexo new “我的博客” #新建文章&lt;/li&gt;
&lt;li&gt;hexo p =
      
    
    </summary>
    
      <category term="Surround" scheme="http://yoursite.com/categories/Surround/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>初识React</title>
    <link href="http://yoursite.com/2019/01/08/n_reactBase/"/>
    <id>http://yoursite.com/2019/01/08/n_reactBase/</id>
    <published>2019-01-08T01:33:02.594Z</published>
    <updated>2019-01-21T05:47:51.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h1><ul><li>React起源于Facebook的内部项目，因为该公司对市场上所有的JavaScript MVC框架，都不满意，就决定自己写一套，用来架设Instagram(照片交友)的网站，做出来以后，发现这套东西很好用，就在2013年5月开源了；</li><li>Angular1 2009年谷歌</li><li>由于React的设计思想独特，属于革命性的创新，性能出众，代码逻辑却非常简单，所以，越来越多的人开始关注和使用，认为他可能将来是Web开发的主流工具</li><li>清楚两个概念<ol><li>library（库）：小而巧的库，有点事船小好调头，可以很方便的从一个库切换到另外的库，但是代码几乎不会改变；</li><li>framework（框架）：大而全的是框架，框架提供了一整套的解决方案，所以，如果在项目中间，想切换到另外的框架，往往是比较困难的；</li></ol></li></ul><h1 id="前端的三大主流框架"><a href="#前端的三大主流框架" class="headerlink" title="前端的三大主流框架"></a>前端的三大主流框架</h1><ul><li>Angular.js：出来的较早的前端框架，学习曲线比较陡，NG1学起来比较麻烦，NG2-NG5开始，进行了一系列的改革，也提供了组件化开发的概念，从NG2开始，也支持使用了TS进行编辑；</li><li>Vue.js：最火（关注的人比较多）的一门前端框架，它是中国人开发的，对我们来说，文档比较友好一些；</li><li>React.js:最流行（用的人比较多）的一门框架，因为它的设计很优秀；</li></ul><h1 id="React与Vue的对比"><a href="#React与Vue的对比" class="headerlink" title="React与Vue的对比"></a>React与Vue的对比</h1><h2 id="组件化方面"><a href="#组件化方面" class="headerlink" title="组件化方面"></a>组件化方面</h2><ol><li>什么是模块化：从代码的角度来进行分析的，把一些可复用的代码，抽离为单个的模块，便于项目的维护和开发；</li><li>什么是组件化：是从UI界面的角度来进行分析的，把一些可复用的UI元素，抽离为单独的组件，便于醒目的维护和开发；</li><li>组件化的好处：随着项目规模的增大，手里的组件越来越多，很方便的能把现有的组件，拼接为一个完整的页面；</li><li>Vue是如何实现组件化的：通过.vue文件；</li><li>React如何实现组件化：一般都是通过JS来实现的</li></ol><h2 id="开发团队方面"><a href="#开发团队方面" class="headerlink" title="开发团队方面"></a>开发团队方面</h2><ul><li>React是由FaceBook前端官方团队进行维护和更新的，因此，React的维护开发团队，技术实力比较雄厚=</li><li>Vue：第一版，主要是由作者尤雨溪专门进行维护的，当Vue更新到2.x版本之后，也有了以尤雨溪为主的开源小团队，进行维护和开发</li></ul><h2 id="社区方面"><a href="#社区方面" class="headerlink" title="社区方面"></a>社区方面</h2><ul><li>在社区方面，React由于诞生的比较早，所以社区比较强大，一些常见的问题，坑，最优的解决方案，文档，博客，在社区中都是很方便的就能找到；</li><li>Vue是近两年才火起来的，所以他的社区性对于React来说要小一些，可能有的一些坑，没人踩过；</li></ul><h2 id="移动APP开发体验方面"><a href="#移动APP开发体验方面" class="headerlink" title="移动APP开发体验方面"></a>移动APP开发体验方面</h2><ul><li>Vue，结合Weex这门技术，提供了迁移到移动端APP开发的体验</li><li>React 结合ReactNative也提供了无缝迁移到移动App的开发体验</li></ul><h1 id="为什么要学习React"><a href="#为什么要学习React" class="headerlink" title="为什么要学习React"></a>为什么要学习React</h1><ol><li>设计很优秀，一切基于JS并且实现了组件化的思想</li><li>开发团队实力强悍，不必担心断更的情况；</li><li>社区强大，很多问题都能找到直接的解决方案</li><li>提供了无缝转到ReactNative的开发体验，让我们的技术能力得到了拓展，增强了我们的核心竞争力</li><li>很多企业中，前端项目的技术选型采用的是React.js</li></ol><h1 id="React中的几个核心概念"><a href="#React中的几个核心概念" class="headerlink" title="React中的几个核心概念"></a>React中的几个核心概念</h1><h2 id="虚拟DOM（Vitual-Document-Object-Model）"><a href="#虚拟DOM（Vitual-Document-Object-Model）" class="headerlink" title="虚拟DOM（Vitual Document Object Model）"></a>虚拟DOM（Vitual Document Object Model）</h2><ul><li><strong>Dom的本质</strong> 浏览器中的概念，用JS对象来表示页面上的元素，并提供了操作DOM对象的API；</li><li><strong>React中的虚拟DOM</strong> 是框架中的概念，是程序员用JS对象来模拟页面中的DOM和DOM嵌套；</li><li><strong>虚拟DOM的目的</strong> 为了实现页面中，DOM元素的高效更新</li><li><strong>Dom和虚拟DOM的区别</strong><ul><li>DOM：浏览器中提供的概念，用JS对象，表示页面中的元素，并提供了操作元素的API</li><li>虚拟DOM：是框架中的概念，是开发框架的程序员，手动用JS对象来模拟DOM元素和嵌套关系；<ul><li>本质：用JS对象来模拟DOM元素和嵌套关系</li><li>目的：是为了实现页面元素的高效更新；</li></ul></li></ul></li></ul><h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><ul><li><p><strong>tree diff</strong> 新旧两颗DOM树，逐层对比的过程，就是Tree Diff,当整颗DOM逐层对比完毕，则所有需要被按时更新的元素，必然能够找到</p></li><li><p><strong>component diff</strong> 在进行Tree Diff的时候，每一层，组件级别的对比，叫做Component Diff;</p><ul><li>如果对比前后，组件的类型相同，则暂时认为此组件不需要被更新；</li><li>如果对比之后，组件类型不同，则暂时认为此组件不需要被更新</li></ul></li><li><p><strong>element diff</strong> 在进行组件对比的会后，如果两个组件类型相同，则需要进行元素的对比，这叫做element diff；</p></li></ul><h1 id="创建基本的webpack4-x项目"><a href="#创建基本的webpack4-x项目" class="headerlink" title="创建基本的webpack4.x项目"></a>创建基本的webpack4.x项目</h1><ol><li>运行<code>npm init -y</code> 快速初始化项目</li><li>在根目录创建<code>src</code>源代码以及<code>dist</code>产品目录</li><li>在src下创建<code>index.html</code>和<code>main.js</code>(入口文件)</li><li>执行命令安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cnpm i webpack wepack-cli webpack-dev-server html-webpack-plugin -D</span><br></pre></td></tr></table></figure><ol start="4"><li>新建 <code>webpack.config.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'./dist/bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">"./src/index.html"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>执行命令 <code>webpack-dev-server</code></li></ol><h1 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h1><h2 id="JSX语法-1"><a href="#JSX语法-1" class="headerlink" title="JSX语法"></a>JSX语法</h2><p>就是符合xml规范的JS语法，语法格式相对来说，要比HTML严谨的多</p><h2 id="使用jsx语法"><a href="#使用jsx语法" class="headerlink" title="使用jsx语法"></a>使用jsx语法</h2><ul><li>安装babel插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-core babel-loader babel-plugin-transform-runtime babel-preset-env babel-preset-stage-0 -D</span><br><span class="line"></span><br><span class="line">cnpm i babel-loader@7.1.5 -D</span><br></pre></td></tr></table></figure><ul><li>安装能够识别转换jsx的包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure><ul><li>新建<code>.babelrc</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>:[<span class="string">"env"</span>,<span class="string">"stage-0"</span>,<span class="string">"react"</span>],</span><br><span class="line">    <span class="string">"plugins"</span>:[<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 <code>webpack.config.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">        &#123;</span><br><span class="line">            test:<span class="regexp">/\.js|jsx$/</span>,</span><br><span class="line">            use:<span class="string">'babel-loader'</span>,</span><br><span class="line">            exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsx注意事项"><a href="#jsx注意事项" class="headerlink" title="jsx注意事项"></a>jsx注意事项</h1><ol><li><strong>jsx语法本质:</strong>并不是直接把jsx渲染到页面上，而是内部先转换成了createElement的形式，在渲染的</li><li><strong>在jsx中混合写入js表达式</strong>：在jsx语法中，要把js代码写到<code>{}</code>中</li><li><strong>在jsx中添加类名：</strong>使用<code>className</code>来替代<code>class</code></li><li><strong>在jsx中为label添加for属性：</strong>使用<code>htmlFor</code></li><li>在jsx语法中，标签必须成对出现，如果是单标签，则必须自闭</li></ol><p>当编译引擎，在编译jsx代码的时候，如果遇到了<code>&lt;</code>就会把它当做html代码去编译，如果遇到了<code>{}</code>就会作为普通js代码去编译</p><h1 id="React中创建组件"><a href="#React中创建组件" class="headerlink" title="React中创建组件"></a>React中创建组件</h1><h2 id="使用构造函数来创建组件"><a href="#使用构造函数来创建组件" class="headerlink" title="使用构造函数来创建组件"></a>使用构造函数来创建组件</h2><h3 id="声明组件"><a href="#声明组件" class="headerlink" title="声明组件"></a>声明组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//注意，不论在vue还是react中，组件props永远都是只读的，不能被重新赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>HELLO--&#123;props.name&#125;--&#123;props.age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Hello &#123;...li&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>组件名称必须大写</li><li>组件传参可以使用<code>...</code>展开运算符进行传参</li><li>可以将组件封装到单独的js文件中，但是必须引入<code>React</code>对象</li></ol><h3 id="关于路径配置"><a href="#关于路径配置" class="headerlink" title="关于路径配置"></a>关于路径配置</h3><ol><li>如果引入文件需要省略后缀名可以在webpack中做如下配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolve:&#123;</span><br><span class="line">    extensions:[<span class="string">'.js'</span>,<span class="string">'.jsx'</span>,<span class="string">'.json'</span>],<span class="comment">//表示，这几个文件的后缀名可以省略不写，会按照书写顺序来解析</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>关于引用路径中的<code>@</code>符号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias:&#123;</span><br><span class="line">    <span class="string">'@'</span>:path.join(__dirname,<span class="string">'./src'</span>)<span class="comment">//这样，@就表示项目根目录中src的这一层路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Class类来创建组件"><a href="#使用Class类来创建组件" class="headerlink" title="使用Class类来创建组件"></a>使用Class类来创建组件</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>movie组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span>&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>组件内可以直接通过<code>this.props</code>接受父组件传递的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span> &#123;<span class="attr">...li</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>这个<code>this.state</code>就相当于vue中的<code>data(){return{}}</code><br>状态和<code>props</code>相比，是可以更改的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            msg:<span class="string">"大家好"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.name&#125;---&#123;this.state.msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Movie</span> &#123;<span class="attr">...li</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Movie</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h2 id="两种组件方式的对比"><a href="#两种组件方式的对比" class="headerlink" title="两种组件方式的对比"></a>两种组件方式的对比</h2><blockquote><p>注意：使用class关键字创建的组件，有自己的私有数据this.state和生命周期<br>注意：使用function创建的组件，只有props，没有自己的私有属性和声明周期</p></blockquote><ol><li>用构造函数创造出来的组件叫做<code>无状态组件</code></li><li>用class关键字创造出来的组件，叫做<code>有状态组件</code></li><li>什么情况下使用有状态组件？什么情况下使用无状态组件？<ul><li>如果一个组件需要有自己的私有数据，推荐使用class</li><li>如果一个组件不需要有私有数据，则推荐使用构造函数</li><li>React官方说，无状态组件，由于没有自己的state和声明周期，所以运行效率会比有状态组件稍微高一些</li></ul></li></ol><blockquote><p>有状态组件和无状态组件之间的本质区别就是：有无state属性，有无声明周期函数</p></blockquote><ol start="4"><li>组件中的<code>props</code>和<code>state/data</code>之前的区别<ul><li>props中的数据都是外界传递进来的</li><li>state、data中的数据，都是组件私有的；</li><li>props中的数据都是只读，不能重新赋值</li><li>state/data中的数据，都是可读可写的</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React简介&quot;&gt;&lt;a href=&quot;#React简介&quot; class=&quot;headerlink&quot; title=&quot;React简介&quot;&gt;&lt;/a&gt;React简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;React起源于Facebook的内部项目，因为该公司对市场上所有的JavaScript
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
      <category term="Framework" scheme="http://yoursite.com/categories/JavaScript-Advanced/Framework/"/>
    
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>玲珑金管家-后台管理系统</title>
    <link href="http://yoursite.com/2018/12/12/l_back/"/>
    <id>http://yoursite.com/2018/12/12/l_back/</id>
    <published>2018-12-12T07:38:11.553Z</published>
    <updated>2019-01-21T05:46:42.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>通过vue-cli实现基本项目的搭建</p><h3 id="自定义配置方面"><a href="#自定义配置方面" class="headerlink" title="自定义配置方面"></a>自定义配置方面</h3><h4 id="打包命令区分环境"><a href="#打包命令区分环境" class="headerlink" title="打包命令区分环境"></a>打包命令区分环境</h4><ol><li>package.json中设置打包命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"uat"</span>: <span class="string">"node build/uat.js"</span>,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>新建打包配置文件</p></li><li><p>在webpack.prod.conf配置不同的环境变量</p></li><li><p>在config里面新建相对应的环境变量</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"uat"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在项目中使用process.env.NODE_ENV来获取不同的环境变量；</li></ol><h4 id="配置代理地址"><a href="#配置代理地址" class="headerlink" title="配置代理地址"></a>配置代理地址</h4><ol><li><p>在config/index.js里面配置</p></li><li><p>配置方式</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    <span class="string">'/hyacp'</span>: &#123;</span><br><span class="line">        <span class="comment">// '*': &#123;</span></span><br><span class="line">        target: <span class="string">'https://yunyingtest.huanyueguoji.com'</span>,</span><br><span class="line">        <span class="comment">// target: 'http://192.168.1.168:8091/',</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/hyacp'</span>: <span class="string">'/hyacp'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li><p>基本作用</p><ul><li>用于请求后台数据==》调用接口</li><li>解决可能会存在的跨域问题；</li></ul></li></ol><h3 id="vue相关配置"><a href="#vue相关配置" class="headerlink" title="vue相关配置"></a>vue相关配置</h3><h4 id="vue的use方法"><a href="#vue的use方法" class="headerlink" title="vue的use方法"></a>vue的use方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(iView)</span><br></pre></td></tr></table></figure><p>基本原理就是通过模块化外放一个变量，内置有一个install方法，vue调用use方法的时候，可以理解为调用了install，并且将vue实例作为实参传递进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install: <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="axios的相关配置"><a href="#axios的相关配置" class="headerlink" title="axios的相关配置"></a>axios的相关配置</h3><ol><li>通过axios的create方法统一配置axios的配置项</li><li>通过promise封装axios来区别后天返回的成功或失败(在状态值为200的成功)</li><li>在axios的请求钩子函数中统一处理请求数据</li></ol><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>此项目除了登录页，其他页面都是有相同的菜单栏，所以使用路由嵌套的方式<br>在app.vue中为1级路由；<br>在home.vue中为2级路由；</p><h4 id="关于vuex"><a href="#关于vuex" class="headerlink" title="关于vuex"></a>关于vuex</h4><ol><li><p>数据共享；</p></li><li><p>数据发生改变之后，凡是用到这个数据的地方都会发生改变；</p></li><li><p>在咱们项目中vuex的数据：menu的层级数据；</p></li></ol><h5 id="vuex使用步骤"><a href="#vuex使用步骤" class="headerlink" title="vuex使用步骤"></a>vuex使用步骤</h5><ol><li>声明实例化</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>在vue实例化的时候挂载到vue</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>关于四个属性</p><ul><li>status：存放变量（状态）</li><li>mutations：存储更改变量的方法</li><li>action：涉及到异步；</li></ul></li><li><p>获取变量</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    power: <span class="function"><span class="params">state</span> =&gt;</span> state.power,</span><br><span class="line">    shrinked: <span class="function"><span class="params">state</span> =&gt;</span> state.shrinked,</span><br><span class="line">    tabData: <span class="function"><span class="params">state</span> =&gt;</span> state.tabData</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">//通过this.power获取到相应变量</span></span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'pSwiperModal'</span>, <span class="string">'pSwiperPicList'</span>])</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="5"><li>更改变量（状态）<br>通过mapMutations等方法将函数挂载到method下面就可以了直接调用了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...mapMutations([</span><br><span class="line">   <span class="string">'setPowerM'</span>,</span><br><span class="line">   <span class="string">'pathPushM'</span>,</span><br><span class="line">   <span class="string">'setTabList'</span>,</span><br><span class="line">   <span class="string">'setTabChoosed'</span>,</span><br><span class="line">   <span class="string">'setPermList'</span></span><br><span class="line"> ]),</span><br></pre></td></tr></table></figure><h2 id="项目页面搭建"><a href="#项目页面搭建" class="headerlink" title="项目页面搭建"></a>项目页面搭建</h2><h3 id="home-vue"><a href="#home-vue" class="headerlink" title="home.vue"></a>home.vue</h3><p>home文件主要有layout.vue组成，包括左侧菜单，右侧头部，右侧主要内容，这些主要有插槽来实现的</p><h4 id="vue插槽"><a href="#vue插槽" class="headerlink" title="vue插槽"></a>vue插槽</h4><ol><li>确定插槽位置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">'logo'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置插槽的主要内容<br>template、组件、div都可以作为插槽，主要设置slot属性即可<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">e-menu</span> <span class="attr">slot</span>=<span class="string">'menu'</span> <span class="attr">:openNames</span>=<span class="string">'openNames'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">e-menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="左侧菜单"><a href="#左侧菜单" class="headerlink" title="左侧菜单"></a>左侧菜单</h4><ul><li><p>这个是有ivew的menu功能实现的</p></li><li><p>最多实现三级菜单</p></li><li><p>数据由后台接口或者menu.js的all属性（关闭权限之后）提供</p></li></ul><h5 id="数据渲染步骤"><a href="#数据渲染步骤" class="headerlink" title="数据渲染步骤"></a>数据渲染步骤</h5><ul><li><p>在router/index.js中判断权限开关是否打开</p></li><li><p>打开的情况下请求接口获取权限list数据，使用方法分出层级结构，将数据赋值给menu.js中的list属性</p></li><li><p>在关闭的情况下，直接获取menu.js的all属性的值，赋值给menu.js的list属性</p></li><li><p>在home.vue中获取menu.js的值并通过vuex保存；</p></li><li><p>在menu.vue中获取vuex中的数据，渲染页面</p></li></ul><h3 id="menu-vue"><a href="#menu-vue" class="headerlink" title="menu.vue"></a>menu.vue</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol><li>在右侧打开一系列菜单</li><li>保存菜单中的操作；</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li>新建一个vue文件(menu.vue)用来展示选项卡；</li><li>新建一个list数据(vuex)用来存放选项卡数据；</li><li>新建一个标志位用来判断当前那个选项卡展示(vuex:choosed)；</li><li>点击菜单需要为list增加数据并且改变标志位的值；<ul><li>获取点击菜单的key判断在一开打的选项卡中有无该key值</li><li>有，直接将choosed的值改为该key值；</li><li>没有，将list中push该菜单，并且改变choosed的值；</li><li>不管又或者没有，都需要获取该菜单的fakId来记录哪一个菜单被打开(openNames)；</li></ul></li><li>点击关闭选项卡功能的时候，为list删除数据并且改变标志位的值；<ul><li>获取点击的选项卡的index值；</li><li>通过方法从list数据中删除该选项卡；</li><li>判断如果删的此index还在选中此index值</li><li>如果index值不在，选中index-1的值；</li></ul></li><li>需要在本地以及vuex中缓存数据；<ul><li>删除也好或者增加也好都是通过调用vuex的方法来实现的</li><li>并且更改vuex数据的同时更改session中的数据；</li><li>在session中存数据的目的是页面刷新之后能够记录打开的选项卡</li><li>在home.vue中会先去session中获取数据然后存储到vuex中</li></ul></li><li>在展示当前选中组件的时候，需要找一个文件注册所有的组件:config/components.js</li><li>在展示选项卡标题部分需要对于超出页面宽度的滑动处理；</li><li>点击选项卡改变显示<ul><li>点击选项卡获取此key值fakid</li><li>然后改变choosed的值和fakId来记录哪一个菜单被打开</li></ul></li></ol><h3 id="阻止架构"><a href="#阻止架构" class="headerlink" title="阻止架构"></a>阻止架构</h3><ul><li>权限管理<ul><li>负责的是所有的菜单，按钮，接口的访问权限</li></ul></li><li>角色管理<ul><li>权限匹配到每个角色身上</li></ul></li><li>员工管理<ul><li>匹配相应的角色和部门</li></ul></li><li>部门管理<ul><li>有一个城市的属性</li><li>作用是为每一个员工增加一个城市的属性</li></ul></li></ul><h3 id="风控管理"><a href="#风控管理" class="headerlink" title="风控管理"></a>风控管理</h3><p>整个权限控制</p><ol><li>菜单是由后台接口返回的权限list数据+breadcrumbs.js的本地配置来实现的<ul><li>首先从后台获取数据之后做层级处理</li><li>渲染左侧菜单</li><li>打开以及关闭选项卡的时候，是获取到点击的目录key值，循环breadcrumbs.js数据，找到相同key值push到tabData.list中</li><li>breadcrumb数据中有一个action用来区分相同组件不同菜单的；</li></ul></li><li>打开风控详情部分<ul><li>这个不同于菜单，这个页面是不存在与权限树中的</li><li>当打开多个详情页面时，使用由一些id组成的对象转化的字符串来作为选中的key值；</li></ul></li><li>列表的按钮以及详情中的tab权限控制<ul><li>在menu.js中为风控页面配置相应的key值</li><li>循环遍历后台返回的权限树，新建一个由所有权限key组成的list；</li><li>当我们判断该按钮或者tab菜单是否展示的时候，首先找到这个菜单或者tab相对应的key，然后去list去找，有，展示，没有则不展示</li></ul></li><li>详情-审核决策页面<ul><li>除了上述说的由后台返回的list还有在不同情况下展示按钮的控制</li><li>主要是由detailStatus来控制的</li></ul></li></ol><h4 id="实地和背调操作"><a href="#实地和背调操作" class="headerlink" title="实地和背调操作"></a>实地和背调操作</h4><ol><li>先用接口获取checkbox列表渲染弹窗</li><li>checkbox里面有一个其它选项，选择之后可以自定义添加类型</li><li>类型有文件和图片两种可选（发起补件的情况下只有图片类型）</li></ol><h4 id="考察结果"><a href="#考察结果" class="headerlink" title="考察结果"></a>考察结果</h4><ol><li>先用接口获取需要提交的文件列表并且区分image和input类型</li><li>通过循环处理resultGetData来储存提交好的图片和文字</li><li>上传图片进行压缩处理小于1M</li><li>上传成功之后将图片以及文字信息处理成list并转化成字符串以imgdata传给后台</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目构建&quot;&gt;&lt;a href=&quot;#项目构建&quot; class=&quot;headerlink&quot; title=&quot;项目构建&quot;&gt;&lt;/a&gt;项目构建&lt;/h2&gt;&lt;h3 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Project" scheme="http://yoursite.com/categories/Project/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式进阶</title>
    <link href="http://yoursite.com/2018/12/03/regular_advanced/"/>
    <id>http://yoursite.com/2018/12/03/regular_advanced/</id>
    <published>2018-12-03T01:27:45.007Z</published>
    <updated>2019-01-21T05:48:16.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于分组"><a href="#关于分组" class="headerlink" title="关于分组"></a>关于分组</h2><p>分组在正则中用的还是比较广的，我所理解的分组 就是一对括号（） ，每一对括号 就代表了一个分组，分组可以分为：捕获性分组和非捕获性分组</p><h2 id="捕获性分组"><a href="#捕获性分组" class="headerlink" title="捕获性分组"></a>捕获性分组</h2><h3 id="关于捕获性分组"><a href="#关于捕获性分组" class="headerlink" title="关于捕获性分组"></a>关于捕获性分组</h3><p>字面意思就是可以捕获的分组类型，比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d)(-)/</span>.test(<span class="string">'1-'</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>) <span class="comment">//-</span></span><br></pre></td></tr></table></figure><p>捕获性分组会在 比如$1, match exec这样的函数中以第二项，第三项的形式得到相应分组的结果</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var reg = /test(\d+)/;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/test(\d+)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'new test001 test002'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); <span class="comment">//["test001", "001", index: 4, input: "new test001 test002"]</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">RegExp</span>)</span><br></pre></td></tr></table></figure><h2 id="非捕获性分组–"><a href="#非捕获性分组–" class="headerlink" title="非捕获性分组–(?:)"></a>非捕获性分组–(?:)</h2><p>非捕获性分组也就是 有些地方需要用到一对括号，但是又不想让他成为一个捕获性分组也就是不想让这个分组被类似 macth exec 这样的函数所获取到通常在括号内部的前面加上?: 也就是 (?:pattern)这样就变成了一个非捕获性分组,比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d)(?:-)/</span>.test(<span class="string">'1-'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>)<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>)<span class="comment">//空值</span></span><br></pre></td></tr></table></figure><h2 id="非捕获性分组–断言"><a href="#非捕获性分组–断言" class="headerlink" title="非捕获性分组–断言"></a>非捕获性分组–断言</h2><p>javascript只支持零宽先行断言,所以关于JS中的正则表达式的断言，说的一般就是零宽，<br>而零宽先行断言又可以分为正向零宽先行断言，和负向零宽先行断言。</p><h3 id="零宽度断言"><a href="#零宽度断言" class="headerlink" title="零宽度断言"></a>零宽度断言</h3><p>零宽断言正如它的名字一样，是一种零宽度的匹配，它匹配到的内容不会保存到匹配结果中去，最终匹配结果只是一个位置而已。</p><p>作用是给指定位置添加一个限定条件，用来规定此位置之前或者之后的字符必须满足限定条件才能使正则中的字表达式匹配成功。</p><h3 id="正向零宽断言"><a href="#正向零宽断言" class="headerlink" title="正向零宽断言"></a>正向零宽断言</h3><h4 id="代表符号"><a href="#代表符号" class="headerlink" title="代表符号"></a>代表符号</h4><p>符号：?=</p><h4 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h4><ol><li>简单了解</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abZW863"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab(?=[A-Z])/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// "ab"</span></span><br></pre></td></tr></table></figure><p>在以上代码中，正则表达式的语义是:匹配后面跟随任意一个大写字母的字符串”ab”。最终匹配结果是”ab”，因为零宽断言”(?=[A-Z])”并不匹配任何字符，只是用来规定当前位置的后面必须是一个大写字母。</p><ol start="2"><li>案例进阶</li></ol><p>如果在上述案例的基础上我想要匹配上ZW应该怎么写；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abZW863"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab(?=[A-Z]+)[A-Z]+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">//"abZW"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>案例3</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"&lt;div&gt;antzone"</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^(?=&lt;)&lt;[^&gt;]+&gt;\w+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">//"&lt;div&gt;antzone"</span></span><br></pre></td></tr></table></figure><p>解析过程：</p><ul><li>首先^符号表示位置，从0开始匹配，匹配成功，让后将控制权交给(?=&lt;)</li><li>由于^是零宽度，所以(?=&lt;)还是从0开始匹配，要求第一个位置的必须是&lt;,所以也成功</li><li>由于(?=&lt;)也是零宽度，&lt;还是从0开始匹配，第一个&lt;成功；</li><li>后面就没啥好说的了；</li></ul><h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><h4 id="代表符号-1"><a href="#代表符号-1" class="headerlink" title="代表符号"></a>代表符号</h4><p>符号：?!</p><h4 id="案例解析-1"><a href="#案例解析-1" class="headerlink" title="案例解析"></a>案例解析</h4><ol><li>案例1</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abZW863"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab(?![A-Z])/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>正则表达式的语义是:匹配后面不跟随任意一个大写字母的字符串”ab”。正则表达式没能匹配任何字符，因为在字符串中，ab的后面跟随有大写字母。</p><ol start="2"><li>案例2</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"abZW863ab88"</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/ab(?![A-Z])/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br></pre></td></tr></table></figure><ul><li>首先由正则表达式的字符”a”获取控制权，从位置0处开始匹配，匹配字符”a”成功</li><li>然后控制权转交给”b”，从位置1处开始匹配，配字符”b”成功，然后控制权转交给”(?[A-Z])”，它从位置2处开始匹配，它要求所在位置的右边不能够是任意一个大写字母，而位置的右边是大写字母”Z”,匹配失败</li><li>然后控制权又重新交给字符”a”，并从位置1处开始尝试，匹配失败，然后控制权再次交给字符”a”，从位置2处开始尝试匹配</li><li>依然失败，如此往复尝试，直到从位置7处开始尝试匹配成功，然后将控制权转交给”b”,然后从位置8处开始尝试匹配，匹配成功，然后再将控制权转交给”(?[A-Z])”，它从位置9处开始尝试匹配，它规定它所在的位置右边不能够是大写字母，匹配成功，但是它并不会真正匹配ab后面的字符，所以最终匹配结果是”ab”。</li></ul><ol start="3"><li>案例3</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><h2 id="关于贪婪模式和非贪婪模式"><a href="#关于贪婪模式和非贪婪模式" class="headerlink" title="关于贪婪模式和非贪婪模式"></a>关于贪婪模式和非贪婪模式</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。 </p><p>属于贪婪模式的量词，也叫做匹配优先量词，包括： </p><p>“{m,n}”、“{m,}”、“?”、“*”和“+”。 </p><p>在一些使用NFA引擎的语言中，在匹配优先量词后加上“?”，即变成属于非贪婪模式的量词，也叫做忽略优先量词，包括： </p><p>“{m,n}?”、“{m,}?”、“??”、“*?”和“+?”。 </p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'abcadc'</span>.match(<span class="regexp">/a.+c/g</span>)) <span class="comment">//["abcadc"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abcadc'</span>.match(<span class="regexp">/a.+?c/g</span>)) <span class="comment">// ["abc", "adc"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于分组&quot;&gt;&lt;a href=&quot;#关于分组&quot; class=&quot;headerlink&quot; title=&quot;关于分组&quot;&gt;&lt;/a&gt;关于分组&lt;/h2&gt;&lt;p&gt;分组在正则中用的还是比较广的，我所理解的分组 就是一对括号（） ，每一对括号 就代表了一个分组，分组可以分为：捕获性分组和非
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Reg" scheme="http://yoursite.com/tags/Reg/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式基础</title>
    <link href="http://yoursite.com/2018/11/30/regular-base/"/>
    <id>http://yoursite.com/2018/11/30/regular-base/</id>
    <published>2018-11-30T02:50:04.373Z</published>
    <updated>2019-01-21T05:48:21.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于正则表达式"><a href="#关于正则表达式" class="headerlink" title="关于正则表达式"></a>关于正则表达式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。</p><p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc123def"</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[0-9]+/</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.match(patt1));</span><br></pre></td></tr></table></figure><h3 id="为什么要用正则表达式"><a href="#为什么要用正则表达式" class="headerlink" title="为什么要用正则表达式"></a>为什么要用正则表达式</h3><p>典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。</p><p>通过使用正则表达式，可以：</p><ul><li><p>测试字符串内的模式。<br>  例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</p></li><li><p>替换文本。<br>  可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</p></li><li><p>基于模式匹配从字符串中提取子字符串。<br>  可以查找文档内或输入域内特定的文本。</p></li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><h3 id="常用元字符汇总表"><a href="#常用元字符汇总表" class="headerlink" title="常用元字符汇总表"></a>常用元字符汇总表</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>表示出了\n以外任意的一个单个的字符串；</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等</td></tr><tr><td>\S</td><td>匹配任何非空白字符</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’</td></tr></tbody></table><h3 id="特殊的元字符-–限定符"><a href="#特殊的元字符-–限定符" class="headerlink" title="特殊的元字符 –限定符"></a>特殊的元字符 –限定符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或者多次。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或者多次。</td></tr><tr><td>？</td><td>匹配前面的子表达式零次或者一次。</td></tr><tr><td>{n}</td><td>匹配确定的n次。</td></tr><tr><td>{n,}</td><td>至少匹配n次。</td></tr><tr><td>{n,m}</td><td>最少匹配n次，且最多能匹配m次。</td></tr></tbody></table><h3 id="其他特殊符号"><a href="#其他特殊符号" class="headerlink" title="其他特殊符号"></a>其他特殊符号</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>[]</td><td>查找方括号之间的任何字符,可以理解为一个范围，或者表示一个单独字符</td></tr><tr><td>[a-z]</td><td>表示小写字母</td></tr><tr><td>[A-Z]</td><td>表示大写字母</td></tr><tr><td>[0-9]</td><td>表示数字</td></tr><tr><td>[a-zA-Z0-9]</td><td>表示所有数字和字母</td></tr><tr><td>[\u4e00-\u9fa5]</td><td>校验中文</td></tr><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符：转义</td></tr><tr><td>^</td><td>表示以什么开始或者取反</td></tr><tr><td>$</td><td>表示以什么结束</td></tr><tr><td>竖线</td><td>指明两项之间的一个选择（优先级最低）</td></tr><tr><td>()</td><td>小括号：提升优先级别的；作用：分组 从最左边算起</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/./</span>.test(<span class="string">'除了换行以外的任意字符'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.*/</span>.test(<span class="string">''</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/.+/</span>.test(<span class="string">''</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/b|(ara)/</span>.test(<span class="string">'abra'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/^b|(ara)$/</span>.test(<span class="string">'abra'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[a-z]&#123;2,3&#125;/</span>.test(<span class="string">'ar'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\w&#123;2&#125;/</span>.test(<span class="string">'abc23'</span>))</span><br></pre></td></tr></table></figure><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>正则表达式是描述字符模式的对象。</p><p>正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="关于参数"><a href="#关于参数" class="headerlink" title="关于参数"></a>关于参数</h4><ul><li>pattern（模式） 描述了表达式的模式</li><li>modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配</li></ul><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行对大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt=<span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,modifiers);</span><br></pre></td></tr></table></figure><h4 id="使用字面量"><a href="#使用字面量" class="headerlink" title="使用字面量"></a>使用字面量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h4><p>test() 方法用于检测一个字符串是否匹配某个模式.<br>如果字符串中有匹配的值返回 true ，否则返回 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^\d&#123;5&#125;$/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'12345'</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'123456'</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a>exec()方法</h4><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><p>如果字符串中有匹配的值返回该匹配值，否则返回 null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d/</span>.exec(<span class="string">'adf12'</span>))</span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>返回正则表达式的字符串值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="regexp">/\d/</span>.toString();</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// /\d/</span></span><br></pre></td></tr></table></figure><h3 id="支持正则的String方法"><a href="#支持正则的String方法" class="headerlink" title="支持正则的String方法"></a>支持正则的String方法</h3><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Mr Blue has a blue house and a blue car"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/blue/</span>, <span class="string">"red"</span>))</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/blue/g</span>, <span class="string">"red"</span>))</span><br></pre></td></tr></table></figure><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1212adfvafed'</span>.search(<span class="regexp">/\d/</span>)) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><p>可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"The rain in SPAIN stays mainly in the plain"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.match(<span class="regexp">/ain/gi</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>用于把一个字符串分割成字符串数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"The rain in SPAIN stays mainly in the plain"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.match(<span class="regexp">/ain/gi</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于正则表达式&quot;&gt;&lt;a href=&quot;#关于正则表达式&quot; class=&quot;headerlink&quot; title=&quot;关于正则表达式&quot;&gt;&lt;/a&gt;关于正则表达式&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Reg" scheme="http://yoursite.com/tags/Reg/"/>
    
  </entry>
  
  <entry>
    <title>wepy基本使用</title>
    <link href="http://yoursite.com/2018/11/29/n_wcwepy/"/>
    <id>http://yoursite.com/2018/11/29/n_wcwepy/</id>
    <published>2018-11-29T05:39:05.728Z</published>
    <updated>2019-01-21T05:47:51.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-wepy-介绍"><a href="#1-wepy-介绍" class="headerlink" title="1. wepy-介绍"></a>1. wepy-介绍</h1><p>&nbsp; &nbsp; <strong>WePY</strong> (发音: /‘wepi/)是一款腾讯团队于2016年11月发布的小程序组件化框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。</p><p><a href="https://tencent.github.io/wepy/index.html" target="_blank" rel="noopener">官网</a></p><h2 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1. 特性"></a>1.1. 特性</h2><ul><li>类Vue开发风格</li><li>支持自定义组件开发</li><li>支持引入NPM包</li><li>支持<a href="https://github.com/wepyjs/wepy/wiki/wepy%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Promise" target="_blank" rel="noopener">Promise</a></li><li>支持ES2015+特性，如<a href="https://github.com/wepyjs/wepy/wiki/wepy%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8async-await" target="_blank" rel="noopener">Async Functions</a></li><li>支持多种编译器，Less/Sass/Stylus/PostCSS、Babel/Typescript、Pug</li><li>支持多种插件处理，文件压缩，图片压缩，内容替换等</li><li>支持 Sourcemap，ESLint等</li><li>小程序细节优化，如请求列队，事件优化等</li></ul><h2 id="1-2-优秀案例"><a href="#1-2-优秀案例" class="headerlink" title="1.2. 优秀案例"></a>1.2. 优秀案例</h2><p>&nbsp; &nbsp; 腾讯疫苗查询小程序、 腾讯翻译君小程序、 腾讯地图小程序、 玩转故宫小程序、 手机充值+、 手机余额查询、 手机流量充值优惠、 友福图书馆（开源）、 素洁商城（开源）、 NewsLite（开源）、 西安找拼车（开源）、 深大的树洞（开源）、 求知微阅读（开源）、 给你的 iPhone X 换个发型、 天天跟我买、 坚橙、 群脱单、 米淘联盟、 帮助圈、 众安保险福利、 阅邻二手书、 趣店招聘、 满熊阅读（开源： 微信小程序、支付宝小程序）、 育儿柚道、 平行进口报价内参、 GitHub掘金版、 班级群管、 鲜花说小店、 逛人备忘、 英语助手君、 花花百科、 独角兽公司、 爱羽客羽毛球、 斑马小店、 小小羽球、 培恩医学、 农资优选、 公务员朝夕刷题、 七弦琴小助手、 七弦琴大数据、 爽到家小程序、 应用全球排行（开源）、 we川大（开源）、 聊会儿、 … </p><h2 id="1-3-前置知识"><a href="#1-3-前置知识" class="headerlink" title="1.3. 前置知识"></a>1.3. 前置知识</h2><ul><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">node</a>&amp;<a href="https://www.npmjs.com.cn/" target="_blank" rel="noopener">npm</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue</a></li><li>es6</li><li><a href="">微信小程序</a></li></ul><h1 id="2-快速项目搭建"><a href="#2-快速项目搭建" class="headerlink" title="2. 快速项目搭建"></a>2. 快速项目搭建</h1><h2 id="2-1-全局安装"><a href="#2-1-全局安装" class="headerlink" title="2.1. 全局安装"></a>2.1. 全局安装</h2><p>WePY的安装或更新都通过<code>npm</code>进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-cli -g</span><br></pre></td></tr></table></figure><h2 id="2-2-创建空项目"><a href="#2-2-创建空项目" class="headerlink" title="2.2. 创建空项目"></a>2.2. 创建空项目</h2><blockquote><p>1.7.0版本之前的请查询官网完成创建</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy init empty my-project</span><br></pre></td></tr></table></figure><h2 id="2-3-编译并监控项目"><a href="#2-3-编译并监控项目" class="headerlink" title="2.3. 编译并监控项目"></a>2.3. 编译并监控项目</h2><p>等待创建成果后，进入到项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  my-project</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>编译并监控项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy build --watch</span><br></pre></td></tr></table></figure><p>此时，可以看到目录下多了一个<code>dist</code>文件夹，该文件夹便是经过<code>wepy</code>编译后的小程序源代码，也就是我们可以用小程序开发者工具直接监控的项目代码。</p><h2 id="2-4-WePY项目的目录结构"><a href="#2-4-WePY项目的目录结构" class="headerlink" title="2.4. WePY项目的目录结构"></a>2.4. WePY项目的目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├─dist                   小程序文件夹</span><br><span class="line">│  └─pages               小程序页面文件夹</span><br><span class="line">│          index.js      首页的js文件</span><br><span class="line">│          index.json    首页的配置文件</span><br><span class="line">│          index.wxml    首页的标签文件   </span><br><span class="line">│          index.wxss    首页的样式文件</span><br><span class="line">│—node_modules           node包           </span><br><span class="line">│─src                    wepy的项目源代码</span><br><span class="line">│   │  app.wpy           wepy的小程序的全局组件</span><br><span class="line">│   │                    </span><br><span class="line">│   └─pages              wepy的页面组件文件夹</span><br><span class="line">│           index.wpy    wepy的小程序的首页组件</span><br><span class="line">│  .editorconfig         代码格式的配置文件</span><br><span class="line">│  .gitignore            告诉git哪些文件需要忽略</span><br><span class="line">│  .prettierrc           代码格式化的配置文件</span><br><span class="line">│  .wepycache            wepy项目的缓存文件 防止build时 重复编译npm目录</span><br><span class="line">│  .wepyignore           wepy编译工具的忽略清单</span><br><span class="line">│  package-lock.json     npm的项目描述文件</span><br><span class="line">│  package.json          npm的项目描述文件</span><br><span class="line">│  project.config.json   小程序项目内的配置文件</span><br><span class="line">│  wepy.config.js        wepy的编译配置文件</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp; <strong>dist</strong>为小程序运行目录，因此千万不要手动去编辑或者修改!!</p><h1 id="3-开发环境配置"><a href="#3-开发环境配置" class="headerlink" title="3. 开发环境配置"></a>3. 开发环境配置</h1><h2 id="3-1-小程序开发者工具配置"><a href="#3-1-小程序开发者工具配置" class="headerlink" title="3.1. 小程序开发者工具配置"></a>3.1. 小程序开发者工具配置</h2><p>由于统一使用<code>wepy</code>进行开发，因此关于开发者工具的配置也需要直接在<code>wepy</code>项目中直接进行配置。通过<code>project.config.json</code>即可进行配置，默认不需要修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;description&quot;: &quot;project description&quot;,</span><br><span class="line">  &quot;setting&quot;: &#123;</span><br><span class="line">    &quot;urlCheck&quot;: true,</span><br><span class="line">    &quot;es6&quot;: false,</span><br><span class="line">    &quot;postcss&quot;: false,</span><br><span class="line">    &quot;minified&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;compileType&quot;: &quot;miniprogram&quot;,</span><br><span class="line">  &quot;appid&quot;: &quot;touristappid&quot;,</span><br><span class="line">  &quot;projectname&quot;: &quot;Project name&quot;,</span><br><span class="line">  &quot;miniprogramRoot&quot;: &quot;./dist&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>es6</code>: 对应<code>关闭ES6转ES5</code>选项，<strong>关闭</strong>。 重要：未关闭会运行报错。</p><p><code>postcss</code>: 对应<code>关闭上传代码时样式自动补全</code>选项，<strong>关闭</strong>。 重要：某些情况下漏掉此项也会运行报错。</p><p><code>minified</code>: 对应<code>关闭代码压缩上传</code>选项，<strong>关闭</strong>。重要：开启后，会导致真机computed, props.sync 等等属性失效。</p><p><code>urlCheck</code>: 对应<code>不检查安全域名</code>选项，<strong>开启</strong>。 如果已配置好安全域名则建议关闭。</p><h2 id="3-2-代码高亮配置"><a href="#3-2-代码高亮配置" class="headerlink" title="3.2. 代码高亮配置"></a>3.2. 代码高亮配置</h2><p>wepy推荐开发者使用较为成熟的编辑器来代替 <strong>微信开发者工具</strong> ， <strong>微信开发者工具</strong> 只用来做显示界面使用。</p><p>这里推荐 使用<strong>vs code</strong> ，如需要其他编辑器，<a href="https://tencent.github.io/wepy/document.html#/?id=%e4%bb%a3%e7%a0%81%e9%ab%98%e4%ba%ae" target="_blank" rel="noopener">其他编辑器配置</a></p><ol><li><p>在 Code 里先安装 Vue 的语法高亮插件 <code>Vetur</code>。</p></li><li><p>打开任意 <code>.wpy</code> 文件。</p></li><li><p>点击右下角的选择语言模式，默认为<code>纯文本</code>。</p></li><li><p>在弹出的窗口中选择 <code>.wpy 的配置文件关联...</code>。</p></li><li><p>在<code>选择要与 .wpy 关联的语言模式</code> 中选择 <code>Vue</code>。</p></li></ol><h2 id="3-3-启用promise"><a href="#3-3-启用promise" class="headerlink" title="3.3. 启用promise"></a>3.3. 启用promise</h2><p>因为不想陷入异步的回调地狱中，所以在一些复杂的业务当中，我们推荐使用 promise 或者 async-function 来代替传统的回调。因此需要在项目中单独进行配置。</p><h3 id="3-3-1-进入项目根目录，安装polyfill"><a href="#3-3-1-进入项目根目录，安装polyfill" class="headerlink" title="3.3.1. 进入项目根目录，安装polyfill"></a>3.3.1. 进入项目根目录，安装polyfill</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-async-function --save</span><br></pre></td></tr></table></figure><h3 id="3-3-2-在app-wpy中导入polyfill"><a href="#3-3-2-在app-wpy中导入polyfill" class="headerlink" title="3.3.2. 在app.wpy中导入polyfill"></a>3.3.2. 在app.wpy中导入polyfill</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">'wepy-async-function'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-在app-wpy中开启promise"><a href="#3-3-3-在app-wpy中开启promise" class="headerlink" title="3.3.3. 在app.wpy中开启promise"></a>3.3.3. 在app.wpy中开启promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">app</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.use(<span class="string">'promisify'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-wepy-config-js"><a href="#3-4-wepy-config-js" class="headerlink" title="3.4. wepy.config.js"></a>3.4. wepy.config.js</h2><p>&nbsp;&nbsp;wepy项目编译的配置文件</p><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>target</td><td>wepy编译后的生成目录</td></tr><tr><td>wpyExt</td><td>wepy组件的后缀名，默认为wepy，可以指定为vue</td></tr><tr><td>eslint</td><td>是否开启eslint的验证</td></tr><tr><td>cliLogs</td><td>开启控制台打印</td></tr><tr><td>compilers</td><td>编译sass，js等文件的配置</td></tr><tr><td>plugins</td><td>插件</td></tr><tr><td>appConfig</td><td>全局变量，可以在组件中通过 wepy.$appConfig访问</td></tr></tbody></table><h1 id="4-小程序页面结构和wepy组件结构对比"><a href="#4-小程序页面结构和wepy组件结构对比" class="headerlink" title="4. 小程序页面结构和wepy组件结构对比"></a>4. 小程序页面结构和wepy组件结构对比</h1><h2 id="4-1-wepy组件的编译图解"><a href="#4-1-wepy组件的编译图解" class="headerlink" title="4.1. wepy组件的编译图解"></a>4.1. wepy组件的编译图解</h2><p>wepy组件编译的流程如图所示，我们在学习wepy组件前，最好提前了解一下。</p><p><img src="/2018/11/29/n_wcwepy/1541084631532.png" alt="1541084631532"></p><h2 id="4-2-小程序页面结构"><a href="#4-2-小程序页面结构" class="headerlink" title="4.2. 小程序页面结构"></a>4.2. 小程序页面结构</h2><p>小程序页面结构分为4个部分</p><ul><li>wxml 标签文件</li><li>wxss 样式文件</li><li>JavaScript 逻辑文件</li><li>json 配置文件</li></ul><h2 id="4-3-wepy组件结构"><a href="#4-3-wepy组件结构" class="headerlink" title="4.3. wepy组件结构"></a>4.3. wepy组件结构</h2><p>wepy组件默认后缀名为 <code>.wpy</code>,该文件里面包含有了 <strong>样式</strong>、<strong>标签</strong>和<strong>逻辑部分</strong> 如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 样式 */</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">/* 标签 */</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> /* 逻辑 */</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  config = &#123;</span></span><br><span class="line"><span class="javascript">    navigationBarTitleText: <span class="string">'test'</span></span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">  onLoad() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-app-wpy文件"><a href="#5-app-wpy文件" class="headerlink" title="5. app.wpy文件"></a>5. app.wpy文件</h1><p><code>wpy</code>文件分为3个部分，分别是 样式 <code>style</code>，标签 <code>template</code>，还有 脚本 <code>javascript</code>。下面挨个来讲解</p><h2 id="5-1-style"><a href="#5-1-style" class="headerlink" title="5.1. style"></a>5.1. style</h2><p>在<code>app.wpy</code> 文件的<code>style</code>中，控制的是全局的样式。它有如下特点</p><ol><li><p>设置的样式可以在所有的页面文件中使用</p></li><li><p>通过<code>lang</code>关键字可以设置 <code>css</code>,<code>less</code>,<code>scss</code> 等预处理器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以使用 <code>//</code>等作为注释（小程序中的wxss中直接写<code>//</code>是不支持的）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">view</span> &#123;</span><br><span class="line">  // color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以通过<code>style</code>标签中的<code>src</code>关键字导入另外的第三方样式文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./styles/base.css"</span>&gt;</span><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5-2-template"><a href="#5-2-template" class="headerlink" title="5.2. template"></a>5.2. template</h2><p>   template为标签部分，由于app.wpy最终是要编译为小程序中的<code>app.js</code>文件的，因此该<code>template</code>无特别用法</p><h2 id="5-3-JavaScript"><a href="#5-3-JavaScript" class="headerlink" title="5.3. JavaScript"></a>5.3. JavaScript</h2><p>   <code>app.wpy</code>中的<code>javascript</code>为脚本部分，继承自<code>wepy.app</code> 它经过编译后，最终会生成两个文件，分别是 <code>app.js</code> 和 <code>app.json</code>。 主要有以下特点</p><ol><li><p>代码风格类似<code>vue</code>，es6的语法。 继承自 <code>wepy.app</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">app</span> </span>&#123;</span><br><span class="line">  config = &#123;</span><br><span class="line">    pages: [<span class="string">'pages/index'</span>],</span><br><span class="line">    <span class="built_in">window</span>: &#123;</span><br><span class="line">      backgroundTextStyle: <span class="string">'light'</span>,</span><br><span class="line">      navigationBarBackgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">      navigationBarTitleText: <span class="string">'WeChat'</span>,</span><br><span class="line">      navigationBarTextStyle: <span class="string">'black'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  onLaunch() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'on launch'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>default class</code>内，<code>config</code>字段对应的是小程序中 <code>app.json</code>的内容  <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">全局配置</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">  pages: [<span class="string">'pages/index'</span>],</span><br><span class="line">  <span class="built_in">window</span>: &#123;</span><br><span class="line">    backgroundTextStyle: <span class="string">'light'</span>,</span><br><span class="line">    navigationBarBackgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">    navigationBarTitleText: <span class="string">'WeChat'</span>,</span><br><span class="line">    navigationBarTextStyle: <span class="string">'black'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>和<code>config</code>同层级，可以定义小程序的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html" target="_blank" rel="noopener">App注册事件</a> 和全局变量 <code>globalData</code>等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;...  &#125;;</span><br><span class="line"></span><br><span class="line">onLaunch() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'on launch'</span>);</span><br><span class="line">&#125;</span><br><span class="line">onShow()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"on show"</span>);</span><br><span class="line">&#125;</span><br><span class="line">globalData=&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-index-wpy"><a href="#6-index-wpy" class="headerlink" title="6. index.wpy"></a>6. index.wpy</h1><h2 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1. 介绍"></a>6.1. 介绍</h2><p>页面组件<code>wpy</code>的文件结构类似 <code>app.wpy</code>结构，也是由三个部分组成 标签 <code>template</code> ，样式 <code>style</code>和脚本<code>javascript</code>  继承自 <code>wepy.page</code>。其中 脚本 <code>javascript</code>经过编译后，也是会生成两个文件。分别是小程序中的页面<code>javascript</code>和页面<code>json</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>config</td><td>页面配置对象，对应于原生的<code>page.json</code>文件，类似于<code>app.wpy</code>中的config</td></tr><tr><td>data</td><td>页面渲染数据对象，存放可用于页面模板绑定的渲染数据</td></tr><tr><td>methods</td><td>wxml事件处理函数对象，存放响应wxml中所捕获到的事件的函数，如<code>bindtap</code>、<code>bindchange</code></td></tr><tr><td>生命周期函数</td><td>小程序页面<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#生命周期回调函数" target="_blank" rel="noopener">生命周期函数</a>，如onLoad、<code>onReady</code>等，以及其它自定义的方法与属性</td></tr><tr><td>computed</td><td>计算属性</td></tr><tr><td>watch</td><td>监控数据</td></tr><tr><td>自定义数据</td><td>可以自定义内部使用的数据</td></tr><tr><td>自定义函数</td><td>可以自定义内部需要使用的函数</td></tr><tr><td>components</td><td>页面组件列表对象，声明页面所引入的组件列表</td></tr><tr><td>events</td><td>WePY组件事件处理函数对象，存放响应组件之间通过<code>$broadcast</code>、<code>$emit</code>、<code>$invoke</code>所传递的事件的函数</td></tr><tr><td>mixins</td><td>声明页面引入的Minxin</td></tr></tbody></table><h2 id="6-2-数据绑定"><a href="#6-2-数据绑定" class="headerlink" title="6.2. 数据绑定"></a>6.2. 数据绑定</h2><p>在wepy中，数据绑定的类似vue的风格，也是通过 <code></code> 来绑定，<code>this.mydata=&#39;hello wepy&#39;</code>来修改。</p><p><strong>注意，如在异步里修改数据，需要手动调用 <code>this.$apply();</code> 来触发数据更新</strong></p><p><strong>代码</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;mydata&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  data=&#123;</span></span><br><span class="line"><span class="javascript">        mydata:<span class="string">"hello wepy"</span></span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  onLoad() &#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">this</span>.mytitle = <span class="string">'你好wepy'</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-事件"><a href="#6-3-事件" class="headerlink" title="6.3. 事件"></a>6.3. 事件</h2><p>页面中，绑定事件的方式变为更为简单了。并且，可以实现在事件中传递参数。通过@来绑定，可以省略小程序中的关键字 <code>bind</code>。如 <code>bindtap</code> 变为 <code>@tap</code>。</p><p>而且，可以通过添加事件后缀来指定对应的事件类型，如：</p><ul><li><code>.default</code>: 绑定小程序冒泡型事件，如<code>bindtap</code>，<code>.default</code>后缀可省略不写；</li><li><code>.stop</code>: 绑定小程序捕获型事件，如<code>catchtap</code>；</li><li><code>.user</code>: 绑定用户自定义组件事件，通过<code>$emit</code>触发。<strong>注意，如果用了自定义事件，则events中对应的监听函数不会再执行。</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span> @<span class="attr">tap</span>=<span class="string">"myTap(123)"</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  methods = &#123;</span></span><br><span class="line"><span class="undefined">    myTap(data) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-component-wpy"><a href="#7-component-wpy" class="headerlink" title="7. component.wpy"></a>7. component.wpy</h1><p>组件文件，结构上大体和<code>页面.wpy</code>类似，区别在于组件是继承自 <code>wepy.component</code>,并且它拥有自己的属性设置，插槽等。关于一些小程序自身的组件基本属性，可以通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">小程序组件</a> 来进行查阅。这里主要讲解如何<strong>使用自定义组件</strong>和<strong>组件传参</strong>。</p><h2 id="7-1-使用自定义组件"><a href="#7-1-使用自定义组件" class="headerlink" title="7.1. 使用自定义组件"></a>7.1. 使用自定义组件</h2><h3 id="7-1-1-声明组件"><a href="#7-1-1-声明组件" class="headerlink" title="7.1.1. 声明组件"></a>7.1.1. 声明组件</h3><ol><li><p>新建组件  <code>Myheader.wpy</code></p></li><li><p>编辑组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> @<span class="attr">tap</span>=<span class="string">"myTap"</span> &gt;</span>组件中的文字<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">"wepy"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHeader</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span>   </span>&#123;</span></span><br><span class="line"><span class="undefined">  methods=&#123;</span></span><br><span class="line"><span class="undefined">    myTap()&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"组件被点击了"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"parentEvent"</span>,&#123;&#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-1-2-使用组件"><a href="#7-1-2-使用组件" class="headerlink" title="7.1.2. 使用组件"></a>7.1.2. 使用组件</h3><ol><li><p>在页面文件中引入组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">'../components/MyHeader'</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>class</code>中声明引入的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components = &#123;</span><br><span class="line">   MyHeader</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></li><li><p>template中使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;container&quot;  &gt;</span><br><span class="line">    &lt;MyHeader&gt;&lt;/MyHeader&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-2-props组件传值"><a href="#7-2-props组件传值" class="headerlink" title="7.2. props组件传值"></a>7.2. props组件传值</h2><p>页面和组件之间的传值可以通过 props实现。分为三种：</p><ol><li><strong>静态传值</strong> 父组件传递到子组件的值，不会再被父组件改变。只能传递字符串</li><li>动态传值 使用 <code>.sync</code>修饰符来将父组件的数据绑定到子组件上，单向绑定。<code>父 -&gt; 子</code></li><li>动态传值 使用 <code>.sync</code> 和 子组件中的<code>twoWay: true</code> 实现双向绑定 <code>父 &lt;-&gt; 子</code></li></ol><h3 id="7-2-1-静态传值"><a href="#7-2-1-静态传值" class="headerlink" title="7.2.1. 静态传值"></a>7.2.1. 静态传值</h3><p>组件 <code>MyHeader</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> &gt;</span>&#123;&#123;parentTitle&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ....</span></span></span><br><span class="line"><span class="undefined">  props=&#123;</span></span><br><span class="line"><span class="javascript">    parentTitle:<span class="built_in">String</span> <span class="comment">// 静态传值</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyHeader</span> <span class="attr">parentTitle</span>=<span class="string">"父组件中的title"</span> &gt;</span><span class="tag">&lt;/<span class="name">MyHeader</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-单向绑定"><a href="#7-2-2-单向绑定" class="headerlink" title="7.2.2. 单向绑定"></a>7.2.2. 单向绑定</h3><p>组件 <code>MyHeader</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> &gt;</span>&#123;&#123;parentTitle&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ....</span></span></span><br><span class="line"><span class="undefined">    props=&#123;</span></span><br><span class="line"><span class="undefined">    parentTitle:&#123;</span></span><br><span class="line"><span class="javascript">      type:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>:<span class="literal">null</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件  使用 <code>.sync</code> 修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyHeader</span> <span class="attr">:parentTitle.sync</span>=<span class="string">"父组件中的title"</span> &gt;</span><span class="tag">&lt;/<span class="name">MyHeader</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">'../components/MyHeader'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  data=&#123;</span></span><br><span class="line"><span class="javascript">    title:<span class="string">"父中的组件"</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  onLoad() &#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.title=<span class="string">"被修改了"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$apply();</span></span><br><span class="line"><span class="undefined">    &#125;, 2000);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-双向绑定"><a href="#7-2-3-双向绑定" class="headerlink" title="7.2.3. 双向绑定"></a>7.2.3. 双向绑定</h3><p>父组件和子组件上同时加上配置便可实现 组件中的数据双向绑定。</p><p>组件 <code>MyHeader</code>  加上配置   <code>twoWay: true</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> @<span class="attr">tap</span>=<span class="string">"myTap"</span> &gt;</span>子组件 &#123;&#123;parentTitle&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">"wepy"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHeader</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span>   </span>&#123;</span></span><br><span class="line"><span class="undefined">  props=&#123;</span></span><br><span class="line"><span class="undefined">    parentTitle:&#123;</span></span><br><span class="line"><span class="javascript">      type:<span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">      twoWay:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  methods=&#123;</span></span><br><span class="line"><span class="undefined">    myTap()&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.parentTitle=<span class="string">"组件中修改了"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件 中继续使用 <code>.sync</code> 修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">   父组件上的数据：   &#123;&#123;title&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyHeader:parentTitle.sync="title"</span> &gt;</span><span class="tag">&lt;/<span class="name">MyHeader</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">'../components/MyHeader'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">page</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  components = &#123;</span></span><br><span class="line"><span class="undefined">    MyHeader</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">  data=&#123;</span></span><br><span class="line"><span class="javascript">    title:<span class="string">"父中的组件"</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  onLoad() &#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.title=<span class="string">"父组件中修改了"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$apply();</span></span><br><span class="line"><span class="undefined">    &#125;, 2000);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-组件通信"><a href="#7-3-组件通信" class="headerlink" title="7.3. 组件通信"></a>7.3. 组件通信</h2><p>组件之间的通信，都通过事件触发的形式来实现。主要有以下三种</p><ol><li>父组件向子组件通信   <code>$broadcast</code> </li><li>子组件向父组件通信 <code>$emit</code></li><li>页面或组件对另一个组件中的方法的直接调用 <code>$invoke</code></li></ol><h3 id="7-3-1-broadcast"><a href="#7-3-1-broadcast" class="headerlink" title="7.3.1. $broadcast"></a>7.3.1. $broadcast</h3><p>$broadcast 负责由父组件向子组件传播事件。</p><p>流程如下</p><p><img src="/2018/11/29/n_wcwepy/1541215202749.png" alt="1541215202749"></p><p><strong>使用方式</strong>：</p><p>父组件中 触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$broadcast(<span class="string">"子组件中的事件名"</span>,..参数)</span><br></pre></td></tr></table></figure><p>子组件中，在<code>events</code>字段内监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events=&#123;</span><br><span class="line">    事件名(...args)&#123;</span><br><span class="line">        // 执行逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-2-emit"><a href="#7-3-2-emit" class="headerlink" title="7.3.2. $emit"></a>7.3.2. $emit</h3><p>$emit 负责由子组件向父组件触发事件 。</p><p><strong>流程如下</strong> 方向和 $broadcast 相反</p><p><img src="/2018/11/29/n_wcwepy/1541215658454.png" alt="1541215658454"></p><p><strong>使用方式</strong></p><p>子组件中触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&quot;parentFn&quot;,1,3,4,5);</span><br></pre></td></tr></table></figure><p>父组件 <code>events</code> 字段中监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events = &#123;</span><br><span class="line"> parentFn(...args)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"父组件事件触发"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-3-3-invoke"><a href="#7-3-3-invoke" class="headerlink" title="7.3.3. $invoke"></a>7.3.3. $invoke</h3><p><code>$invoke</code>是一个页面或组件对另一个组件中的方法的直接调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面中的调用</span></span><br><span class="line"><span class="keyword">this</span>.$invoke(<span class="string">'ComA'</span>, <span class="string">'someMethod'</span>, <span class="string">'someArgs'</span>);</span><br><span class="line"><span class="comment">// 组件中的调用</span></span><br><span class="line"><span class="keyword">this</span>.$invoke(<span class="string">'./../ComB/ComG'</span>, <span class="string">'someMethod'</span>, <span class="string">'someArgs'</span>);</span><br></pre></td></tr></table></figure><p>如同文件夹下，在页面index中，A 组件想要调用B组件内的方法</p><p><strong>index.wpy</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">B</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>A.wpy</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"wxml"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> @<span class="attr">tap</span>=<span class="string">"myTap"</span>&gt;</span>组件1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">'./B'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  methods = &#123;</span></span><br><span class="line"><span class="undefined">    myTap() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$invoke(<span class="string">'B'</span>, <span class="string">'show'</span>, <span class="string">'A的呼叫'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">  components=&#123;</span></span><br><span class="line"><span class="undefined">    B</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>B.wpy</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"wxml"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> &gt;</span>组件0<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  methods = &#123;</span></span><br><span class="line"><span class="undefined">    show(msg) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"触发  "</span> +msg);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-3-3-1-组件自定义事件"><a href="#7-3-3-1-组件自定义事件" class="headerlink" title="7.3.3.1. 组件自定义事件"></a>7.3.3.1. 组件自定义事件</h4><p>可以通过使用<code>.user</code>修饰符为自定义组件绑定事件，如：<a href="mailto:`@customEvent.user" target="_blank" rel="noopener">`@customEvent.user</a>=”myFn”`</p><p>其中，<code>@</code>表示事件修饰符，<code>customEvent</code> 表示事件名称，<code>.user</code>表示事件后缀。</p><p>目前总共有三种事件后缀：</p><ul><li><code>.default</code>: 绑定小程序冒泡型事件，如<code>bindtap</code>，<code>.default</code>后缀可省略不写；</li><li><code>.stop</code>: 绑定小程序捕获型事件，如<code>catchtap</code>；</li><li><code>.user</code>: 绑定用户自定义组件事件，通过<code>$emit</code>触发。<strong>注意，如果用了自定义事件，则events中对应的监听函数不会再执行。</strong></li></ul><h2 id="7-4-插槽slot"><a href="#7-4-插槽slot" class="headerlink" title="7.4. 插槽slot"></a>7.4. 插槽slot</h2><p>插槽slot可以允许我们在页面中往组件的内部动态的插入标签结构</p><p>slot有两种使用方式，单个slot和多个slot 当使用多个slot时，只需要指定唯一的<code>name</code>属性即可。</p><p>在<code>Panel</code>组件中有以下模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span>默认标题<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父组件中使用<code>Panel</code>子组件时，可以这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">panel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>新的标题<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>新的内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">panel</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-拦截器"><a href="#8-拦截器" class="headerlink" title="8. 拦截器"></a>8. 拦截器</h1><p>可以使用WePY提供的全局拦截器对原生API的请求进行拦截。</p><h2 id="8-1-在app-wpy中定义全局拦截器"><a href="#8-1-在app-wpy中定义全局拦截器" class="headerlink" title="8.1. 在app.wpy中定义全局拦截器"></a>8.1. 在app.wpy中定义全局拦截器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">app</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="comment">// this is not allowed before super()</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// 拦截request请求</span></span><br><span class="line">        <span class="keyword">this</span>.intercept(<span class="string">'request'</span>, &#123;</span><br><span class="line">            <span class="comment">// 发出请求时的回调函数</span></span><br><span class="line">            config (p) &#123;</span><br><span class="line">                <span class="comment">// 对所有request请求中的OBJECT参数对象统一附加时间戳属性</span></span><br><span class="line">                p.timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'config request: '</span>, p);</span><br><span class="line">                <span class="comment">// 必须返回OBJECT参数对象，否则无法发送请求到服务端</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求成功后的回调函数</span></span><br><span class="line">            success (p) &#123;</span><br><span class="line">                <span class="comment">// 可以在这里对收到的响应数据对象进行加工处理</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request success: '</span>, p);</span><br><span class="line">                <span class="comment">// 必须返回响应数据对象，否则后续无法对响应数据进行处理</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">//请求失败后的回调函数</span></span><br><span class="line">            fail (p) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request fail: '</span>, p);</span><br><span class="line">                <span class="comment">// 必须返回响应数据对象，否则后续无法对响应数据进行处理</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求完成时的回调函数(请求成功或失败都会被执行)</span></span><br><span class="line">            complete (p) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request complete: '</span>, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-使用内置的wepy发送请求"><a href="#8-2-使用内置的wepy发送请求" class="headerlink" title="8.2. 使用内置的wepy发送请求"></a>8.2. 使用内置的wepy发送请求</h2><p>通过 <code>wepy.request</code>的方式来发送请求 如：</p><blockquote><p>记得要先开启 wepy对promise 和 async 方法的支持。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> movies = <span class="keyword">await</span> wepy.request(&#123; <span class="attr">url</span>: <span class="string">"http://api.apiopen.top/searchAuthors?name=李白"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(movies);</span><br></pre></td></tr></table></figure><h1 id="9-循环标签repeat"><a href="#9-循环标签repeat" class="headerlink" title="9. 循环标签repeat"></a>9. 循环标签repeat</h1><p>当需要循环渲染WePY组件时，必须使用WePY定义的辅助标签<code>&lt;repeat&gt;</code></p><p>默认项为 <code>item</code> 索引为 <code>index</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repeat</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> <span class="attr">key</span>=<span class="string">"index"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repeat</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-wepy-介绍&quot;&gt;&lt;a href=&quot;#1-wepy-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. wepy-介绍&quot;&gt;&lt;/a&gt;1. wepy-介绍&lt;/h1&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &lt;strong&gt;WePY&lt;/strong&gt; (发音:
      
    
    </summary>
    
      <category term="Framework" scheme="http://yoursite.com/categories/Framework/"/>
    
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="Wepy" scheme="http://yoursite.com/tags/Wepy/"/>
    
  </entry>
  
  <entry>
    <title>MVVM框架进阶与实现--解析版</title>
    <link href="http://yoursite.com/2018/11/28/n_h_vue/"/>
    <id>http://yoursite.com/2018/11/28/n_h_vue/</id>
    <published>2018-11-28T08:02:55.218Z</published>
    <updated>2019-01-21T05:47:51.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue基本思路"><a href="#Vue基本思路" class="headerlink" title="Vue基本思路"></a>Vue基本思路</h2><ul><li>创建vue对象：构造函数或者class类</li><li>声明data层数据（data,methods）</li><li>创建dom对象（#app）（告诉vue解析那一部分的dom对象）（view层）</li><li>创建compile：解析view层<ul><li>解析指令：v-text等</li><li>解析文本</li></ul></li><li>创建observer对象:劫持data层;</li><li>创建watcher层<ul><li>连接compile和observer作用</li></ul></li></ul><h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h2><h3 id="创建文本碎片"><a href="#创建文本碎片" class="headerlink" title="创建文本碎片"></a>创建文本碎片</h3><ul><li>所有操作dom在文本碎片中进行</li><li>处理结束之后放到body里面，再由浏览器进行解析；</li><li>可以避免一定程度的回流和重绘</li></ul><h3 id="compile方法解析node节点"><a href="#compile方法解析node节点" class="headerlink" title="compile方法解析node节点"></a>compile方法解析node节点</h3><ul><li>注意区分元素节点和文本节点</li><li>进行递归操作：解析下一层的node</li></ul><h4 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h4><ul><li>主要解析指令</li><li>是在元素节点处进行递归解析</li><li>主要解析有”v-“开头指令</li><li>需要尤其注意v-on:click绑定事件特殊处理</li></ul><h4 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h4><ul><li>主要解析文本中包含此种形式的数据</li></ul><h5 id="正则分组"><a href="#正则分组" class="headerlink" title="正则分组"></a>正则分组</h5><p>参考文件</p><h4 id="解析完毕"><a href="#解析完毕" class="headerlink" title="解析完毕"></a>解析完毕</h4><p>解析完毕之后要将文本碎片放回body中</p><h2 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h2><ul><li>主要作用通过Object.defineProperty检测data中所有的属性</li><li>此处依旧注意递归操作;</li></ul><h2 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h2><h3 id="连接observer和compile"><a href="#连接observer和compile" class="headerlink" title="连接observer和compile"></a>连接observer和compile</h3><ul><li>如果需要使页面更新,需要在compile中的指令解析的时候;</li><li>如果需要检测数据改变,需要在observer中的数据劫持的set中进行;</li></ul><p>所以就需要</p><ul><li>在更改dom对象值的时候使用watcher检测:声明watcher对象；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'text'</span>) &#123;</span><br><span class="line">    node.textContent = <span class="keyword">this</span>.getVmValue(expr)</span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="keyword">this</span>.$vm, expr, (newAalue, oldValue) =&gt; &#123;</span><br><span class="line">        node.textContent = newAalue;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果需要更改调用回调：在watcher内部需要一个方法来调用callback；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">update() &#123;</span><br><span class="line">      <span class="keyword">let</span> oldValue = <span class="keyword">this</span>.oldValue;</span><br><span class="line">      <span class="keyword">let</span> newValue = <span class="keyword">this</span>.getVMValue(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr)</span><br><span class="line">      <span class="keyword">if</span> (oldValue !== newValue) &#123;</span><br><span class="line">          <span class="keyword">this</span>.cb(newValue, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>需要知道在什么时候调用update：数据改变的时候-也就是observer中的set方法调用的时候</li></ul><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>我们是在compile中实例化的watcher，需要在observer中调用watcher中的updata方法</li><li>而且每一个数据在compile过程中，可能不只有一个watcher对象</li></ul><p>data.msg==&gt;=&gt;v-test=&gt;v-html;</p><ul><li>data中的每一个key，都需要一个对象挂载上他自己的watcher对象</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="需要在observer中劫持data中的每一个属性的时候，声明一个Dep（挂载此属性下watcher）对象"><a href="#需要在observer中劫持data中的每一个属性的时候，声明一个Dep（挂载此属性下watcher）对象" class="headerlink" title="需要在observer中劫持data中的每一个属性的时候，声明一个Dep（挂载此属性下watcher）对象"></a>需要在observer中劫持data中的每一个属性的时候，声明一个Dep（挂载此属性下watcher）对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><h4 id="需要每个watcher在实例化的时候把自己放到Dep中的一个属性里面：；"><a href="#需要每个watcher在实例化的时候把自己放到Dep中的一个属性里面：；" class="headerlink" title="需要每个watcher在实例化的时候把自己放到Dep中的一个属性里面：；"></a>需要每个watcher在实例化的时候把自己放到Dep中的一个属性里面：；</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs = [];<span class="comment">//就是这个</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>先把watcher挂载到一个对象上面，要求在observer中也能拿到：window可以，此处用的是dep本身；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dep.target = <span class="keyword">this</span>;<span class="comment">//此处的this就是watcher实例化之后的对象</span></span><br></pre></td></tr></table></figure></li><li><p>在wathcer中调用获取oldValue的时候就会触发get方法，此时把我们挂载到Dep中的watcher放到dep中的subs数组中</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br></pre></td></tr></table></figure><h4 id="解析总结"><a href="#解析总结" class="headerlink" title="解析总结"></a>解析总结</h4><p>整个完成之后data中的每一个属性都会有自己一个Dep,Dep中的subs包含着凡是用到过此属性的所有watcher；</p><h4 id="在data发生改变之后"><a href="#在data发生改变之后" class="headerlink" title="在data发生改变之后"></a>在data发生改变之后</h4><ul><li>首先触发的是observer中的set方法；</li><li>调用dep中的发布函数：notify</li><li>发布函数会通知subs中的所有watcher调用自身的update函数</li><li>watcher中的updata会触发回调，改变元素的值；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue基本思路&quot;&gt;&lt;a href=&quot;#Vue基本思路&quot; class=&quot;headerlink&quot; title=&quot;Vue基本思路&quot;&gt;&lt;/a&gt;Vue基本思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建vue对象：构造函数或者class类&lt;/li&gt;
&lt;li&gt;声明data层数据（data
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
      <category term="Framework" scheme="http://yoursite.com/categories/JavaScript-Advanced/Framework/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>mpvue基本使用</title>
    <link href="http://yoursite.com/2018/11/27/n_wcmyvue/"/>
    <id>http://yoursite.com/2018/11/27/n_wcmyvue/</id>
    <published>2018-11-27T06:30:24.579Z</published>
    <updated>2019-01-21T05:47:51.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-mpvue-介绍"><a href="#1-mpvue-介绍" class="headerlink" title="1. mpvue-介绍"></a>1. mpvue-介绍</h1><p><strong>mpvue</strong> 是美团团队开发的语法类似 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 的小程序的前端框架</p><ul><li><a href="http://mpvue.com/" target="_blank" rel="noopener">官网</a></li><li><a href="http://mpvue.com/mpvue/" target="_blank" rel="noopener">开发文档</a></li></ul><h2 id="1-1-主要特性"><a href="#1-1-主要特性" class="headerlink" title="1.1. 主要特性"></a>1.1. 主要特性</h2><p>主要有以下特性</p><ul><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 <code>Vue.js</code> 开发体验</li><li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li><li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload</li><li>支持使用 npm 外部依赖</li><li>使用 <code>Vue.js</code> 命令行工具 vue-cli 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力</li></ul><h2 id="1-2-优秀案例"><a href="#1-2-优秀案例" class="headerlink" title="1.2. 优秀案例"></a>1.2. 优秀案例</h2><p><img src="/2018/11/27/n_wcmyvue/1542077018582.png" alt="1542077018582"></p><h2 id="1-3-前置知识"><a href="#1-3-前置知识" class="headerlink" title="1.3. 前置知识"></a>1.3. 前置知识</h2><ul><li>前端基本功 <code>html</code> + <code>css</code> + <code>javascript</code></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></li><li>es6</li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/" target="_blank" rel="noopener">微信小程序</a></li></ul><h3 id="1-3-1-代码示例"><a href="#1-3-1-代码示例" class="headerlink" title="1.3.1. 代码示例"></a>1.3.1. 代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;,</span><br><span class="line">  onShow () &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a, <span class="string">'小程序触发的 onshow'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-启动项目"><a href="#2-启动项目" class="headerlink" title="2. 启动项目"></a>2. 启动项目</h1><h2 id="2-1-全局安装vue脚手架工具"><a href="#2-1-全局安装vue脚手架工具" class="headerlink" title="2.1. 全局安装vue脚手架工具"></a>2.1. 全局安装vue脚手架工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure><h2 id="2-2-创建项目"><a href="#2-2-创建项目" class="headerlink" title="2.2. 创建项目"></a>2.2. 创建项目</h2><p>mpvue 提供了开发企业级的模板 <a href="http://mpvue.com/mpvue/quickstart/" target="_blank" rel="noopener">quickstart</a> 和 页面级的模板 <a href="http://mpvue.com/mpvue/simple/" target="_blank" rel="noopener">simple</a>。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init mpvue/mpvue-quickstart my-project</span><br></pre></td></tr></table></figure><h2 id="2-3-安装依赖"><a href="#2-3-安装依赖" class="headerlink" title="2.3. 安装依赖"></a>2.3. 安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="2-4-修改微信入口地址"><a href="#2-4-修改微信入口地址" class="headerlink" title="2.4. 修改微信入口地址"></a>2.4. 修改微信入口地址</h2><p>由于 mpvue中的 小程序入口路径和打包编译后的路劲  对应不上，因此需要我们手动的修改下 入口路径。</p><p>修改 <code>project.config.json</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 源代码</span><br><span class="line">&quot;miniprogramRoot&quot;: &quot;./dist/&quot;,</span><br><span class="line"></span><br><span class="line">// 修改为</span><br><span class="line">&quot;miniprogramRoot&quot;: &quot;./dist/wx/&quot;,</span><br></pre></td></tr></table></figure><h2 id="2-5-启动项目"><a href="#2-5-启动项目" class="headerlink" title="2.5. 启动项目"></a>2.5. 启动项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="2-6-使用小程序开发者工具打开"><a href="#2-6-使用小程序开发者工具打开" class="headerlink" title="2.6. 使用小程序开发者工具打开"></a>2.6. 使用小程序开发者工具打开</h2><p>编译成功后，可以看到在 <code>dist/wx</code>内有我们熟悉的小程序代码文件，此时，使用小程序开发者工具直接打开 项目的根目录(因为直接在配置文件中配置过 <code>/dist/wx/</code>入口路径  )</p><p><img src="/2018/11/27/n_wcmyvue/1542164654872.png" alt="1542164654872"></p><h1 id="3-项目目录结构"><a href="#3-项目目录结构" class="headerlink" title="3. 项目目录结构"></a>3. 项目目录结构</h1><p>编译成功后，可以看到如下的项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─build               打包构建相关配置文件</span><br><span class="line">├─config                 用于打包的一些变量文件</span><br><span class="line">├─dist               小程序页面文件</span><br><span class="line">├─src                    mpvue源代码</span><br><span class="line">├─static               一些静态资源</span><br><span class="line">└─test               测试相关</span><br><span class="line">│  .babelrc          js的编译配置</span><br><span class="line">│  .editorconfig     编辑器风格</span><br><span class="line">│  .gitignore          git文件忽略清单</span><br><span class="line">│  .postcssrc.js         转换css到wxss的</span><br><span class="line">│  index.html          入口模板</span><br><span class="line">│  package-lock.jsonnode包版本说明文件</span><br><span class="line">│  package.json     项目描述文件</span><br><span class="line">│  project.config.json小程序开发者工具配置文件</span><br><span class="line">│  README.md             项目说明文档</span><br></pre></td></tr></table></figure><h1 id="4-生命周期图示"><a href="#4-生命周期图示" class="headerlink" title="4. 生命周期图示"></a>4. 生命周期图示</h1><p>mpvue的生命周期结合了 <a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">vue</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html" target="_blank" rel="noopener">小程序</a>的生命周期</p><h2 id="4-1-vue-生命周期"><a href="#4-1-vue-生命周期" class="headerlink" title="4.1. vue 生命周期"></a>4.1. vue 生命周期</h2><ul><li><p>beforeCreate</p><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</p></li><li><p>created</p><p>在实例创建完成后被立即调用，<code>$el</code> 属性目前不可见，data中的数据可以使用</p></li><li><p>beforeMount</p><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p></li><li><p>mounted</p><p>示例和对应的dom都被创建后开始调用，子组件不一定全部被挂载，如要确保，使用 <a href="https://cn.vuejs.org/v2/api/#vm-nextTick" target="_blank" rel="noopener">vm.$nextTick</a> 来代替。$el可用。</p></li><li><p>beforeUpdate</p><p>数据更新时调用,这里适合在更新之前访问现有的 DOM，data中的数据更新了，但是视图还没有更新</p></li><li><p>updated</p><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁时会被调用，data中的数据更新了，视图也更新了</p></li><li><p>activated</p><p>keep-alive 组件激活时调用</p></li><li><p>deactivated</p><p>keep-alive 组件停用时调用</p></li><li><p>beforeDestroy</p><p>实例销毁之前调用。在这一步，实例仍然完全可用</p></li><li><p>destroyed</p><p>Vue 实例销毁后调用，Vue 实例指示的所有东西都会解绑定，所有的事件监听器和所有的子实例都会被销毁</p></li></ul><h2 id="4-2-小程序生命周期"><a href="#4-2-小程序生命周期" class="headerlink" title="4.2. 小程序生命周期"></a>4.2. 小程序生命周期</h2><p><strong>app 部分：</strong></p><ul><li><p>onLaunch</p><p>小程序初始化时被调用</p></li><li><p>onShow</p><p>当小程序启动，或从后台进入前台显示被调用</p></li><li><p>onHide</p><p>当小程序从前台进入后台</p></li></ul><p><strong>page 部分：</strong></p><ul><li><p>onLoad</p><p>页面加载完毕被调用</p></li><li><p>onShow</p><p>页面开始显示时被调用</p></li><li><p>onReady，</p><p>页面初次渲染完成被调用</p></li><li><p>onHide</p><p>页面隐藏时被调用</p></li><li><p>onUnload</p><p>页面卸载被调用</p></li><li><p>onPullDownRefresh</p><p>用户下拉动作开始时被调用</p></li><li><p>onReachBottom</p><p>页面上拉触底时被调用</p></li><li><p>onShareAppMessage</p><p>用户点击右上角分享时被调用</p></li><li><p>onPageScroll</p><p>页面滚动时被调用</p></li><li><p>onTabItemTap,</p><p>当前是 tab 页时，点击 tab 时触发 </p></li></ul><h2 id="4-3-mpvue-生命周期图示"><a href="#4-3-mpvue-生命周期图示" class="headerlink" title="4.3. mpvue-生命周期图示"></a>4.3. mpvue-生命周期图示</h2><ul><li><code>mpvue</code>会在小程序 onReady 后，再去触发 vue mounted 生命周期</li><li>不建议使用小程序的生命周期钩子</li></ul><p><img src="/2018/11/27/n_wcmyvue/./n_wcmyvue/lifecycle.jpg" alt="lifecycle"></p><h1 id="5-mpvue-标签映射"><a href="#5-mpvue-标签映射" class="headerlink" title="5. mpvue 标签映射"></a>5. mpvue 标签映射</h1><p>由于<strong>web</strong>中的标签和小程序中的标签存在差异，因此 mpvue内部提供了对应的标签转换，可以让开发者专注于业务本身，省去了记忆新标签的成本。</p><table><thead><tr><th>web标签</th><th>小程序标签</th><th>备注</th></tr></thead><tbody><tr><td>div</td><td>view[_div]</td><td></td></tr><tr><td>p</td><td>view[_p]</td><td></td></tr><tr><td>span</td><td>label</td><td></td></tr><tr><td>a</td><td>navigator</td><td>属性参照小程序的navigator</td></tr><tr><td>img</td><td>image</td><td>属性参照小程序的image</td></tr><tr><td>ul</td><td>view[_ul]</td><td></td></tr><tr><td>ol</td><td>view[_ol]</td></tr></tbody></table><h1 id="6-mpvue-语法"><a href="#6-mpvue-语法" class="headerlink" title="6. mpvue 语法"></a>6. mpvue 语法</h1><h2 id="6-1-数据绑定"><a href="#6-1-数据绑定" class="headerlink" title="6.1. 数据绑定"></a>6.1. 数据绑定</h2><p>mpvue绑定数据的方式大部分和vue一样。</p><h3 id="6-1-1-支持的语法"><a href="#6-1-1-支持的语法" class="headerlink" title="6.1.1. 支持的语法"></a>6.1.1. 支持的语法</h3><ul><li><code>Mustache</code>(双大括号) 文本插值</li><li><code>v-text</code>属性的方式绑定</li><li>标签内属性方式绑定 <code>:attr=&quot;value&quot;</code></li><li><code>v-model</code>也是支持的</li></ul><h3 id="6-1-2-不支持的语法"><a href="#6-1-2-不支持的语法" class="headerlink" title="6.1.2. 不支持的语法"></a>6.1.2. 不支持的语法</h3><ul><li><code>v-html</code> 因为小程序内部不支持动态标签 （会被解释为<code>rich-text</code>标签）</li><li><code>v-once</code> 暂时不支持</li></ul><h3 id="6-1-3-代码示例"><a href="#6-1-3-代码示例" class="headerlink" title="6.1.3. 代码示例"></a>6.1.3. <strong>代码示例</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.0 支持的语法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 双括号 --&gt;</span></span><br><span class="line">&#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- v-text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- :hidden --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">:hidden</span>=<span class="string">"false"</span> &gt;</span>显示与隐藏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.0 不支持的错误 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-html</span>=<span class="string">"htmlmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-once --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-once</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-JavaScript-渲染表达式"><a href="#6-2-JavaScript-渲染表达式" class="headerlink" title="6.2. JavaScript 渲染表达式"></a>6.2. JavaScript 渲染表达式</h2><p>目前可以使用的有 <code>+ - * % ?: ! == === &gt; &lt; [] .</code>，剩下的还待完善。</p><p> 但写在 @event 里面的表达式是都支持的，因为这部分的计算放在了 <code>vdom</code> 里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这种就不支持，建议写 computed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 但写在 @event 里面的表达式是都支持的，因为这部分的计算放在了 vdom 里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"clickHandle(item, index, $event)"</span>&gt;</span>&#123;&#123; item.value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-computed-和-watch"><a href="#6-3-computed-和-watch" class="headerlink" title="6.3. computed 和 watch"></a>6.3. computed 和 watch</h2><h3 id="6-3-1-computed"><a href="#6-3-1-computed" class="headerlink" title="6.3.1. computed"></a>6.3.1. computed</h3><p>对于任何复杂逻辑，都应当使用<strong>计算属性</strong></p><p>使用方式和vue中一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">reversedMessage: function () &#123;</span><br><span class="line">  return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-2-watch"><a href="#6-3-2-watch" class="headerlink" title="6.3.2. watch"></a>6.3.2. watch</h3><p><code>watch</code>相比于<code>computed</code>可以让我们做更多的事情。</p><p>使用方式和vue中一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  msg(newValue, oldValue) &#123;</span><br><span class="line">    console.log(&quot;watch被触发了&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-条件渲染"><a href="#6-4-条件渲染" class="headerlink" title="6.4. 条件渲染"></a>6.4. 条件渲染</h2><h3 id="6-4-1-v-if"><a href="#6-4-1-v-if" class="headerlink" title="6.4.1. v-if"></a>6.4.1. v-if</h3><p>支持 <code>v-if v-else 和 v-else if</code>指令。</p><p><code>v-if</code> 指令的显示和隐藏是通过 增加和删除节点实现。频繁操作性能损耗大。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"false"</span>&gt;</span>if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"true"</span>&gt;</span> v-else-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>v-else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2-v-show"><a href="#6-4-2-v-show" class="headerlink" title="6.4.2. v-show"></a>6.4.2. v-show</h3><p>用法大致一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"true"</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5-列表渲染"><a href="#6-5-列表渲染" class="headerlink" title="6.5. 列表渲染"></a>6.5. 列表渲染</h2><h3 id="6-5-1-v-for"><a href="#6-5-1-v-for" class="headerlink" title="6.5.1. v-for"></a>6.5.1. v-for</h3><ul><li><code>v-for</code> 可以循环 数组和对象等可迭代的对象。</li><li><code>mpvue</code>中，<strong>嵌套列表渲染，必须指定不同的索引！</strong></li></ul><p><strong>数组</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"(card, index) in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, itemIndex) in card"</span>&gt;</span></span><br><span class="line">          &#123;&#123;item.value&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></span><br><span class="line"> &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>嵌套列表渲染</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"(card, index) in list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, itemIndex) in card"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-6-Class-与-Style-绑定"><a href="#6-6-Class-与-Style-绑定" class="headerlink" title="6.6. Class 与 Style 绑定"></a>6.6. Class 与 Style 绑定</h2><p>动态设置样式</p><h3 id="6-6-1-class-支持的语法"><a href="#6-6-1-class-支持的语法" class="headerlink" title="6.6.1. class 支持的语法:"></a>6.6.1. class 支持的语法:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span>444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span>555<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-6-2-style-支持的语法"><a href="#6-6-2-style-支持的语法" class="headerlink" title="6.6.2. style 支持的语法:"></a>6.6.2. style 支持的语法:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span>666<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">"[&#123; color: activeColor, fontSize: fontSize + 'px' &#125;]"</span>&gt;</span>777<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-6-3-不支持的语法"><a href="#6-6-3-不支持的语法" class="headerlink" title="6.6.3. 不支持的语法"></a>6.6.3. 不支持的语法</h3><ul><li>不支持 <a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener">官方文档：Class 与 Style 绑定</a> 中的 <code>classObject</code> 和 <code>styleObject</code> 语法。</li><li>不支持在组件上使用 Class 与 Style 绑定</li></ul><h1 id="7-事件"><a href="#7-事件" class="headerlink" title="7. 事件"></a>7. 事件</h1><p>几乎全支持 <a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">vue中的事件处理器</a></p><h2 id="7-1-绑定方式"><a href="#7-1-绑定方式" class="headerlink" title="7.1. 绑定方式"></a>7.1. 绑定方式</h2><p>使用<code>v-bind</code>或者<code>@</code>关键字来执行绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// v-bind</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">v-bind:click</span>=<span class="string">"clickHandle3"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// @</span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> @<span class="attr">click</span>=<span class="string">"clickHandle3"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-2-事件映射表"><a href="#7-2-事件映射表" class="headerlink" title="7.2. 事件映射表"></a>7.2. 事件映射表</h2><table><thead><tr><th>WEB 事件</th><th>小程序 事件</th><th>备注</th></tr></thead><tbody><tr><td>click</td><td>tap</td><td></td></tr><tr><td>touchstart</td><td>touchstart</td><td></td></tr><tr><td>touchmove</td><td>touchmove</td><td></td></tr><tr><td>touchcancel</td><td>touchcancel</td><td></td></tr><tr><td>touchend</td><td>touchend</td><td></td></tr><tr><td>tap</td><td>tap</td><td></td></tr><tr><td>longtap</td><td>longtap</td><td></td></tr><tr><td>input</td><td>input</td><td></td></tr><tr><td>change</td><td>change</td><td></td></tr><tr><td>submit</td><td>submit</td><td></td></tr><tr><td>blur</td><td>blur</td><td></td></tr><tr><td>focus</td><td>focus</td><td></td></tr><tr><td>reset</td><td>reset</td><td></td></tr><tr><td>confirm</td><td>confirm</td><td></td></tr><tr><td>columnchange</td><td>columnchange</td><td></td></tr><tr><td>linechange</td><td>linechange</td><td></td></tr><tr><td>error</td><td>error</td><td></td></tr><tr><td>scrolltoupper</td><td>scrolltoupper</td><td></td></tr><tr><td>scrolltolower</td><td>scrolltolower</td><td></td></tr><tr><td>scroll</td><td>scroll</td></tr></tbody></table><h2 id="7-3-踩坑注意"><a href="#7-3-踩坑注意" class="headerlink" title="7.3. 踩坑注意"></a>7.3. 踩坑注意</h2><ul><li>列表中没有的原生事件也可以使用例如 bindregionchange 事件直接在 dom 上将bind改为@ </li><li>小程序能力所致，bind 和 catch 事件同时绑定时候，只会触发 bind ,catch 不会被触发，要避免踩坑。</li><li>事件修饰符<ul><li><code>.stop</code> 的使用会阻止冒泡，但是同时绑定了一个非冒泡事件，会导致该元素上的 catchEventName 失效！</li><li><code>.prevent</code> 可以直接干掉，因为小程序里没有什么默认事件，比如submit并不会跳转页面</li><li><code>.capture</code> 支持 <code>1.0.9</code></li><li><code>.self</code> 没有可以判断的标识</li><li><code>.once</code> 也不能做，因为小程序没有 removeEventListener, 虽然可以直接在 handleProxy 中处理，但非常的不优雅，违背了原意，暂不考虑</li></ul></li><li>其他 键值修饰符 等在小程序中压根没键盘，所以。。。</li><li><code>@regionchange</code>,同时这个事件也非常特殊，它的 event type 有 begin 和 end 两个，导致我们无法在<code>handleProxy</code> 中区分到底是什么事件，所以你在监听此类事件的时候同时监听事件名和事件类型既 <code>&lt;map @regionchange=&quot;functionName&quot; @end=&quot;functionName&quot; @begin=&quot;functionName&quot;&gt;&lt;map&gt;</code></li></ul><h1 id="8-表单控件绑定"><a href="#8-表单控件绑定" class="headerlink" title="8. 表单控件绑定"></a>8. 表单控件绑定</h1><p>建议开发过程中直接使用 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html" target="_blank" rel="noopener">微信小程序：表单组件</a> </p><p>如：</p><ul><li><a href="https://github.com/Meituan-Dianping/mpvue/issues/58" target="_blank" rel="noopener">select 组件用 picker 组件进行代替</a></li><li><a href="https://github.com/Meituan-Dianping/mpvue/issues/66" target="_blank" rel="noopener">表单元素 radio 用 radio-group 组件进行代替</a></li></ul><h1 id="9-组件"><a href="#9-组件" class="headerlink" title="9. 组件"></a>9. 组件</h1><p><strong>有且只能使用单文件组件（.vue 组件）的形式进行支持</strong>。详细的使用方式，参照vue中的<a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">组件文档</a></p><h2 id="9-1-定义组件"><a href="#9-1-定义组件" class="headerlink" title="9.1. 定义组件"></a>9.1. 定义组件</h2><p>新建组件文件 <code>card.vue</code> 组件也是分为3个部分。 标签 <code>template</code> 脚本 <code>script</code> 和 样式 <code>style</code></p><p>编辑内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">      &#123;&#123;text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">"卡片组件"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.card &#123;</span></span><br><span class="line"><span class="undefined">  padding: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-使用组件"><a href="#9-2-使用组件" class="headerlink" title="9.2. 使用组件"></a>9.2. 使用组件</h2><p>在某个页面文件中使用组件 <code>card.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">card</span>&gt;</span><span class="tag">&lt;/<span class="name">card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> card <span class="keyword">from</span> <span class="string">'@/components/card'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    card</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-3-组件传值"><a href="#9-3-组件传值" class="headerlink" title="9.3. 组件传值"></a>9.3. 组件传值</h2><p>父组件通过<code>prop</code>来向子组件传递数据。</p><h3 id="9-3-1-父组件"><a href="#9-3-1-父组件" class="headerlink" title="9.3.1. 父组件"></a>9.3.1. 父组件</h3><p>在<code>data</code>中定义数据同时在标签上通过属性的方式传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">card</span> <span class="attr">:text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">card</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- script --&gt;</span></span><br><span class="line">  data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    msg: "mpvue"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-2-子组件"><a href="#9-3-2-子组件" class="headerlink" title="9.3.2. 子组件"></a>9.3.2. 子组件</h3><p>通过props进行接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'text'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-组件通信"><a href="#9-4-组件通信" class="headerlink" title="9.4. 组件通信"></a>9.4. 组件通信</h2><p>主要有三种方式</p><ul><li>子向父 通过<code>$emit</code></li><li>所有的组件之间 通过事件总线 <code>EventBus</code></li><li>企业级的组件通信，建议使用 <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">vuex状态管理方案</a> 来实现，更好维护数据。</li></ul><h3 id="9-4-1-子向父通信"><a href="#9-4-1-子向父通信" class="headerlink" title="9.4.1. 子向父通信"></a>9.4.1. 子向父通信</h3><p>通过 <code>$emit</code>关键字触发</p><p><strong>父组件中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">card2</span> @<span class="attr">parentEvent</span>=<span class="string">"parentHd"</span>&gt;</span><span class="tag">&lt;/<span class="name">card2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">import</span> card2 <span class="keyword">from</span> <span class="string">"@/components/card2.vue"</span>;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      card2</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">     methods: &#123;</span></span><br><span class="line"><span class="undefined">      parentHd(...args) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(args);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"父组件打印纸"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">     &#125;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子组件中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'text'</span>],</span></span><br><span class="line"><span class="undefined">  mounted()&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">"parentEvent"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="undefined">    &#125;, 5000);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-4-2-事件总线-EventBus"><a href="#9-4-2-事件总线-EventBus" class="headerlink" title="9.4.2. 事件总线 EventBus"></a>9.4.2. 事件总线 EventBus</h3><p><code>EventBus</code> 又称为事件总线。它是组件共用的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件。使用起来很方便，但是容器导致代码混乱，不好维护。</p><p><strong>新建总线文件</strong></p><p>在 <code>utils/</code>中新建 js文件 <code>event-bus.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><p><strong>组件中开始触发事件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- template --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card"</span> @<span class="attr">click</span>=<span class="string">"clickHd"</span>&gt;</span> 组件3 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="comment">/* script */</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"../utils/event-bus.js"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      clickHd() &#123;</span></span><br><span class="line"><span class="javascript">        EventBus.$emit(<span class="string">"incremented"</span>, &#123;</span></span><br><span class="line"><span class="undefined">          num: 111,</span></span><br><span class="line"><span class="undefined">          deg: 222</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其他页面监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"@/utils/event-bus.js"</span>;  </span><br><span class="line"></span><br><span class="line">    mounted() &#123;</span><br><span class="line">    EventBus.$on(<span class="string">"incremented"</span>, (&#123;</span><br><span class="line">      num,</span><br><span class="line">      deg</span><br><span class="line">    &#125;) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num, deg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="9-5-不支持的功能"><a href="#9-5-不支持的功能" class="headerlink" title="9.5. 不支持的功能"></a>9.5. 不支持的功能</h2><ul><li>暂不支持在组件引用时，在组件上定义 click 等原生事件、v-show（可用 v-if 代替）和 class style 等样式属性(例：<code>&lt;card class=&quot;class-name&quot;&gt; &lt;/card&gt;</code> 样式是不会生效的)，因为编译到 wxml，小程序不会生成节点，建议写在内部顶级元素上。</li><li>Slot（scoped 暂时还没做支持）</li><li>动态组件</li><li>异步组件</li><li>inline-template</li><li>X-Templates</li><li>keep-alive</li><li>transition</li><li>class</li><li>style</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-mpvue-介绍&quot;&gt;&lt;a href=&quot;#1-mpvue-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. mpvue-介绍&quot;&gt;&lt;/a&gt;1. mpvue-介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;mpvue&lt;/strong&gt; 是美团团队开发的语法类似 
      
    
    </summary>
    
      <category term="Framework" scheme="http://yoursite.com/categories/Framework/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="MpVue" scheme="http://yoursite.com/tags/MpVue/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://yoursite.com/2018/11/27/n_weChat/"/>
    <id>http://yoursite.com/2018/11/27/n_weChat/</id>
    <published>2018-11-27T03:36:33.358Z</published>
    <updated>2019-01-21T05:47:51.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-小程序介绍"><a href="#1-小程序介绍" class="headerlink" title="1. 小程序介绍"></a>1. 小程序介绍</h1><p><a href="https://baike.baidu.com/item/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/20171697?fr=aladdin" target="_blank" rel="noopener">微信小程序 ( Mini Program )</a> ，微信创始人 <a href="https://baike.baidu.com/item/%E5%BC%A0%E5%B0%8F%E9%BE%99/24795" target="_blank" rel="noopener">张小龙</a> ，在2017年1月9日宣布的微信小程序正式上线</p><p><img src="/2018/11/27/n_weChat/zhangxiaolong.jpg" alt="zhangxiaolong"></p><h2 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1. 特点"></a>1.1. 特点</h2><ul><li>触手可及，用完即走</li><li>拥有和原生APP的体验</li><li>用户量大</li><li>面向所有用户开放（企业，组织，个人均可以发布自己的小程序）</li><li>小程序就是套在 <strong>微信里面的原生APP</strong></li></ul><h2 id="1-2-小程序的运行环境"><a href="#1-2-小程序的运行环境" class="headerlink" title="1.2. 小程序的运行环境"></a>1.2. 小程序的运行环境</h2><h3 id="1-2-1-传统原生APP"><a href="#1-2-1-传统原生APP" class="headerlink" title="1.2.1. 传统原生APP"></a>1.2.1. 传统原生APP</h3><p><img src="/2018/11/27/n_weChat/1538030321083.png" alt="1538030321083"></p><hr><h3 id="1-2-2-微信运行环境"><a href="#1-2-2-微信运行环境" class="headerlink" title="1.2.2. 微信运行环境"></a>1.2.2. 微信运行环境</h3><p><img src="/2018/11/27/n_weChat/1538030342461.png" alt="1538030342461"></p><hr><h3 id="1-2-3-微信小程序运行环境"><a href="#1-2-3-微信小程序运行环境" class="headerlink" title="1.2.3. 微信小程序运行环境"></a>1.2.3. 微信小程序运行环境</h3><p><img src="/2018/11/27/n_weChat/1538030356068.png" alt="1538030356068"></p><h3 id="1-2-4-小结"><a href="#1-2-4-小结" class="headerlink" title="1.2.4. 小结"></a>1.2.4. 小结</h3><p>问：</p><blockquote><p>微信小程序和原生APP、微信有什么联系？</p></blockquote><p>答：</p><blockquote><p>微信小程序就是套在微信里的原生APP</p></blockquote><h1 id="2-开发环境的准备"><a href="#2-开发环境的准备" class="headerlink" title="2. 开发环境的准备"></a>2. 开发环境的准备</h1><h2 id="2-1-注册账号"><a href="#2-1-注册账号" class="headerlink" title="2.1. 注册账号"></a>2.1. 注册账号</h2><p>访问<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">注册页面</a>，耐心完成注册即可。</p><h2 id="2-2-获取APPID"><a href="#2-2-获取APPID" class="headerlink" title="2.2. 获取APPID"></a>2.2. 获取APPID</h2><p>由于后期调用微信小程序的接口等功能，需要索取开发者的小程序中的APPID，所以在注册成功后，可登录，然后获取APPID。</p><p><a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">登录</a>，成功后可看到如下界面</p><p><img src="/2018/11/27/n_weChat/1535872286654.png" alt="1535872286654"></p><p>然后复制你的APPID,悄悄的保存起来，不要给别人看到😄。</p><p><img src="/2018/11/27/n_weChat/1535872396313.png" alt="1535872396313"></p><h2 id="2-3-开发工具"><a href="#2-3-开发工具" class="headerlink" title="2.3. 开发工具"></a>2.3. 开发工具</h2><p>严格来说，微信小程序支持所有的开发工具，但是从效率和便利性来说，推荐如下</p><ol><li><p><code>vs code</code>  <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">下载地址</a> </p><ol><li><p>推荐vs code  代码插件 <code>wechat-snippet</code></p><p><img src="/2018/11/27/n_weChat/1538014629590.png" alt="1538014629590"></p></li><li><p>文件图标主题 <code>file-icons</code></p><p><img src="/2018/11/27/n_weChat/1538015114493.png" alt="1538015114493"></p></li></ol></li><li><p>微信自己的<code>微信小程序开发工具</code>   <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">下载地址</a></p></li></ol><h1 id="3-我的第一个微信小程序"><a href="#3-我的第一个微信小程序" class="headerlink" title="3. 我的第一个微信小程序"></a>3. 我的第一个微信小程序</h1><p>下面开始演示如何创建我的第一个微信小程序</p><h2 id="3-1-安装微信小程序开发者工具"><a href="#3-1-安装微信小程序开发者工具" class="headerlink" title="3.1. 安装微信小程序开发者工具"></a>3.1. 安装微信小程序开发者工具</h2><p>下载好微信小程序开发者工具后，直接双击安装，一直点击下一步即可。 安装好后，界面如下</p><p><img src="/2018/11/27/n_weChat/1535873071758.png" alt="1535873071758"></p><h2 id="3-2-选择小程序项目"><a href="#3-2-选择小程序项目" class="headerlink" title="3.2. 选择小程序项目"></a>3.2. 选择小程序项目</h2><p><img src="/2018/11/27/n_weChat/1535873369149.png" alt="1535873369149"></p><h2 id="3-3-新建项目"><a href="#3-3-新建项目" class="headerlink" title="3.3. 新建项目"></a>3.3. 新建项目</h2><p><img src="/2018/11/27/n_weChat/1535873551229.png" alt="1535873551229"></p><h2 id="3-4-创建项目"><a href="#3-4-创建项目" class="headerlink" title="3.4. 创建项目"></a>3.4. 创建项目</h2><p><img src="/2018/11/27/n_weChat/1535874005229.png" alt="1535874005229"></p><h2 id="3-5-成功"><a href="#3-5-成功" class="headerlink" title="3.5. 成功"></a>3.5. 成功</h2><p><img src="/2018/11/27/n_weChat/1535874360363.png" alt="1535874360363"></p><h1 id="4-微信开发工具深入介绍"><a href="#4-微信开发工具深入介绍" class="headerlink" title="4. 微信开发工具深入介绍"></a>4. 微信开发工具深入介绍</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">工具介绍</a></p><p><img src="/2018/11/27/n_weChat/1535874624085.png" alt="1535874624085"></p><h1 id="5-mina框架"><a href="#5-mina框架" class="headerlink" title="5. mina框架"></a>5. mina框架</h1><p>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。</p><p>框架提供了自己的视图层描述语言 <code>WXML</code> 和 <code>WXSS</code>，以及基于 <code>JavaScript</code> 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html" target="_blank" rel="noopener">官网</a></p><h2 id="5-1-小程序文件结构和传统web对比"><a href="#5-1-小程序文件结构和传统web对比" class="headerlink" title="5.1. 小程序文件结构和传统web对比"></a>5.1. 小程序文件结构和传统web对比</h2><table><thead><tr><th>结构</th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>逻辑</td><td>Javascript</td><td>Javascript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table><p>通过以上对比得出，<strong>传统web</strong> 是三层结构。而微信小程序 是四层结构，多了一层 <strong>配置.json</strong></p><h2 id="5-2-基本的项目目录"><a href="#5-2-基本的项目目录" class="headerlink" title="5.2. 基本的项目目录"></a>5.2. 基本的项目目录</h2><p><img src="/2018/11/27/n_weChat/1535877411954.png" alt="1535877411954"></p><h1 id="6-配置介绍"><a href="#6-配置介绍" class="headerlink" title="6. 配置介绍"></a>6. 配置介绍</h1><p>一个小程序应用程序会包括最基本的两种配置文件。一种是全局的 <code>app.json</code> 和 页面自己的 <code>page.json</code></p><p><strong>注意：配置文件中不能出现注释</strong></p><h2 id="6-1-全局配置app-json"><a href="#6-1-全局配置app-json" class="headerlink" title="6.1. 全局配置app.json"></a>6.1. 全局配置app.json</h2><p><code>app.json</code> 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。<strong>普通快速启动项目</strong>里边的 <code>app.json</code> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段的含义</p><ol><li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li><li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li><li>完整的配置信息请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">app.json配置</a></li></ol><h2 id="6-2-page-json"><a href="#6-2-page-json" class="headerlink" title="6.2. page.json"></a>6.2. page.json</h2><p>这里的 <code>page.json</code> 其实用来表示页面目录下的 <code>page.json</code> 这类和小程序页面相关的配置。</p><p>开发者可以独立定义每个页面的一些属性，如顶部颜色、是否允许下拉刷新等等。</p><p>页面的配置只能设置 <code>app.json</code> 中部分 <code>window</code> 配置项的内容，页面中配置项会覆盖 <code>app.json</code> 的 <code>window</code> 中相同的配置项。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如 <code>#000000</code></td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 <code>black</code> / <code>white</code></td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 <code>dark</code> / <code>light</code></td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh" target="_blank" rel="noopener">Page.onPullDownRefresh</a></td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为px。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom" target="_blank" rel="noopener">Page.onReachBottom</a></td></tr><tr><td>disableScroll</td><td>Boolean</td><td>false</td><td>设置为 <code>true</code> 则页面整体不能上下滚动；只在页面配置中有效，无法在 <code>app.json</code> 中设置该项</td></tr></tbody></table><h1 id="7-视图层"><a href="#7-视图层" class="headerlink" title="7. 视图层"></a>7. 视图层</h1><p>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合<a href="https://developers.weixin.qq.com/miniprogram/dev/component/index.html" target="_blank" rel="noopener">基础组件</a>、<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">事件系统</a>，可以构建出页面的结构。</p><h2 id="7-1-数据绑定"><a href="#7-1-数据绑定" class="headerlink" title="7.1. 数据绑定"></a>7.1. 数据绑定</h2><h3 id="7-1-1-普通写法"><a href="#7-1-1-普通写法" class="headerlink" title="7.1.1. 普通写法"></a>7.1.1. 普通写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello MINA!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-2-组件属性"><a href="#7-1-2-组件属性" class="headerlink" title="7.1.2. 组件属性"></a>7.1.2. 组件属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"item-&#123;&#123;id&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    id: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-3-bool类型"><a href="#7-1-3-bool类型" class="headerlink" title="7.1.3. bool类型"></a>7.1.3. bool类型</h3><p><strong>不要直接写 checked=”false”，其计算结果是一个字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">checked</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-2-运算"><a href="#7-2-运算" class="headerlink" title="7.2. 运算"></a>7.2. 运算</h2><h3 id="7-2-1-三元运算"><a href="#7-2-1-三元运算" class="headerlink" title="7.2.1. 三元运算"></a>7.2.1. 三元运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;flag ? true : false&#125;&#125;"</span>&gt;</span> Hidden <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-算数运算"><a href="#7-2-2-算数运算" class="headerlink" title="7.2.2. 算数运算"></a>7.2.2. 算数运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-2-3-逻辑判断"><a href="#7-2-3-逻辑判断" class="headerlink" title="7.2.3. 逻辑判断"></a>7.2.3. 逻辑判断</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;length &gt; 5&#125;&#125;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-4-字符串运算"><a href="#7-2-4-字符串运算" class="headerlink" title="7.2.4. 字符串运算"></a>7.2.4. 字符串运算</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;"hello" + name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    name: <span class="string">'MINA'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-2-5-注意"><a href="#7-2-5-注意" class="headerlink" title="7.2.5. 注意"></a>7.2.5. 注意</h3><p> 花括号和引号之间如果有空格，将最终被解析成为字符串</p><h2 id="7-3-列表渲染"><a href="#7-3-列表渲染" class="headerlink" title="7.3. 列表渲染"></a>7.3. 列表渲染</h2><h3 id="7-3-1-wx-for"><a href="#7-3-1-wx-for" class="headerlink" title="7.3.1. wx:for"></a>7.3.1. wx:for</h3><p>项的变量名默认为 <code>item</code>      <code>wx:for-item</code> 可以指定数组当前元素的变量名</p><p>下标变量名默认为 <code>index</code>    <code>wx:for-index</code> 可以指定数组当前下标的变量名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span></span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [&#123;</span><br><span class="line">      message: <span class="string">'foo'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      message: <span class="string">'bar'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-3-2-wx-for"><a href="#7-3-2-wx-for" class="headerlink" title="7.3.2. wx:for"></a>7.3.2. wx:for</h3><p>渲染一个包含多节点的结构块  block最终不会变成真正的dom元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1, 2, 3]&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-3-wx-key"><a href="#7-3-3-wx-key" class="headerlink" title="7.3.3. wx:key"></a>7.3.3. wx:key</h3><p>提高效率使用的</p><h2 id="7-4-条件渲染"><a href="#7-4-条件渲染" class="headerlink" title="7.4. 条件渲染"></a>7.4. 条件渲染</h2><h3 id="7-4-1-wx-if"><a href="#7-4-1-wx-if" class="headerlink" title="7.4.1. wx:if"></a>7.4.1. wx:if</h3><p>在框架中，使用 <code>wx:if=&quot;&quot;</code> 来判断是否需要渲染该代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;condition&#125;&#125;"</span>&gt;</span> True <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-2-hidden"><a href="#7-4-2-hidden" class="headerlink" title="7.4.2. hidden"></a>7.4.2. hidden</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;condition&#125;&#125;"</span>&gt;</span> True <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似 <code>wx:if</code>  </p><p>频繁切换 用 <code>hidden</code></p><p>不常使用 用 <code>wx:if</code></p><h1 id="8-WXSS"><a href="#8-WXSS" class="headerlink" title="8. WXSS"></a>8. WXSS</h1><p>WXSS(WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式。</p><p>与 CSS 相比，WXSS 扩展的特性有：</p><ul><li>尺寸单位</li><li>样式导入</li></ul><h2 id="8-1-尺寸单位"><a href="#8-1-尺寸单位" class="headerlink" title="8.1. 尺寸单位"></a>8.1. 尺寸单位</h2><ul><li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</li></ul><table><thead><tr><th>设备</th><th>rpx换算px (屏幕宽度/750)</th><th>px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx = 0.42px</td><td>1px = 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx = 0.5px</td><td>1px = 2rpx</td></tr><tr><td>iPhone6 Plus</td><td>1rpx = 0.552px</td><td>1px = 1.81rpx</td></tr></tbody></table><p><strong>建议：</strong> 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。</p><p><strong>注意：</strong> 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。</p><h2 id="8-2-样式导入"><a href="#8-2-样式导入" class="headerlink" title="8.2. 样式导入"></a>8.2. 样式导入</h2><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束。</p><p><strong>示例代码：</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** common.wxss **/</span></span><br><span class="line"><span class="selector-class">.small-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** app.wxss **/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"common.wxss"</span>;</span><br><span class="line"><span class="selector-class">.middle-p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-内联样式"><a href="#8-3-内联样式" class="headerlink" title="8.3. 内联样式"></a>8.3. 内联样式</h2><p>框架组件上支持使用 style、class 属性来控制组件的样式。</p><ul><li>style：静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进 style 中，以免影响渲染速度。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"color:&#123;&#123;color&#125;&#125;;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上<code>.</code>，样式类名之间用空格分隔。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"normal_view"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-1-选择器"><a href="#8-3-1-选择器" class="headerlink" title="8.3.1. 选择器"></a>8.3.1. 选择器</h3><p>目前支持的选择器有：</p><table><thead><tr><th>选择器</th><th>样例</th><th>样例描述</th></tr></thead><tbody><tr><td>.class</td><td><code>.intro</code></td><td>选择所有拥有 class=”intro” 的组件</td></tr><tr><td>#id</td><td><code>#firstname</code></td><td>选择拥有 id=”firstname” 的组件</td></tr><tr><td>element</td><td><code>view</code></td><td>选择所有 view 组件</td></tr><tr><td>element, element</td><td><code>view, checkbox</code></td><td>选择所有文档的 view 组件和所有的 checkbox 组件</td></tr><tr><td>::after</td><td><code>view::after</code></td><td>在 view 组件后边插入内容</td></tr><tr><td>::before</td><td><code>view::before</code></td><td>在 view 组件前边插入内容</td></tr></tbody></table><h3 id="8-3-2-全局样式与局部样式"><a href="#8-3-2-全局样式与局部样式" class="headerlink" title="8.3.2. 全局样式与局部样式"></a>8.3.2. 全局样式与局部样式</h3><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><h1 id="9-基本组件"><a href="#9-基本组件" class="headerlink" title="9. 基本组件"></a>9. 基本组件</h1><blockquote><p>小程序提供了常用的标签组件用于构建页面</p></blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">组件</a></p><h2 id="9-1-view"><a href="#9-1-view" class="headerlink" title="9.1. view"></a>9.1. view</h2><blockquote><p>类似 div</p></blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>hover-class</td><td>String</td><td>none</td><td>指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td></tr></tbody></table><h3 id="9-1-1-代码"><a href="#9-1-1-代码" class="headerlink" title="9.1.1. 代码"></a>9.1.1. 代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hover-class</span>=<span class="string">"h-class"</span>&gt;</span></span><br><span class="line">点击我试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- wxss --&gt;</span></span><br><span class="line">.h-class&#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-text"><a href="#9-2-text" class="headerlink" title="9.2. text"></a>9.2. text</h2><blockquote><p>显示普通的文本 text只能嵌套text</p></blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>Boolean</td><td>false</td><td>文本是否可选</td></tr><tr><td>decode</td><td>Boolean</td><td>false</td><td>是否解码</td></tr></tbody></table><h3 id="9-2-1-代码"><a href="#9-2-1-代码" class="headerlink" title="9.2.1. 代码"></a>9.2.1. 代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span> <span class="attr">decode</span>=<span class="string">"&#123;&#123;false&#125;&#125;"</span>&gt;</span></span><br><span class="line">  普&amp;nbsp;通</span><br><span class="line"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-3-image"><a href="#9-3-image" class="headerlink" title="9.3. image"></a>9.3. image</h2><blockquote><p>图片标签，<strong>image组件默认宽度320px、高度240px</strong></p></blockquote><p><strong>注意：该标签 其实是 web中的 图片标签 和 背景图片的结合！！！ 并且不支持以前的web中的背景图片的写法！！！ </strong></p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址，支持云文件ID（2.2.3起）</td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td></tr><tr><td>lazy-load</td><td>Boolean</td><td>false</td><td>图片懒加载。只针对page与scroll-view下的image有效</td></tr></tbody></table><p><strong>mode 有效值：</strong></p><p>mode 有 13 种模式，其中 4 种是缩放模式，9 种是裁剪模式。</p><table><thead><tr><th>模式</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>缩放</td><td>scaleToFill</td><td>不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td></tr><tr><td>缩放</td><td>aspectFit</td><td>保持纵横比缩放图片，使图片的长边能完全显示出来。</td></tr><tr><td>缩放</td><td>aspectFill</td><td>保持纵横比缩放图片，只保证图片的短边能完全显示出来。</td></tr><tr><td>缩放</td><td>widthFix</td><td>宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td>裁剪</td><td>top</td><td>不缩放图片，只显示图片的顶部区域</td></tr><tr><td>裁剪</td><td>bottom</td><td>不缩放图片，只显示图片的底部区域</td></tr><tr><td>裁剪</td><td>center</td><td>不缩放图片，只显示图片的中间区域</td></tr><tr><td>裁剪</td><td>left</td><td>不缩放图片，只显示图片的左边区域</td></tr><tr><td>裁剪</td><td>right</td><td>不缩放图片，只显示图片的右边区域</td></tr><tr><td>裁剪</td><td>top left</td><td>不缩放图片，只显示图片的左上边区域</td></tr><tr><td>裁剪</td><td>top right</td><td>不缩放图片，只显示图片的右上边区域</td></tr><tr><td>裁剪</td><td>bottom left</td><td>不缩放图片，只显示图片的左下边区域</td></tr><tr><td>裁剪</td><td>bottom right</td><td>不缩放图片，只显示图片的右下边区域</td></tr></tbody></table><h2 id="9-4-swiper"><a href="#9-4-swiper" class="headerlink" title="9.4. swiper"></a>9.4. swiper</h2><blockquote><p>微信内置有轮播图组件</p></blockquote><p><strong>默认宽度 100% 高度 150px</strong></p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>indicator-dots</td><td>Boolean</td><td>false</td><td>是否显示面板指示点</td></tr><tr><td>indicator-color</td><td>Color</td><td>rgba(0, 0, 0, .3)</td><td>指示点颜色</td></tr><tr><td>indicator-active-color</td><td>Color</td><td>#000000</td><td>当前选中的指示点颜色</td></tr><tr><td>autoplay</td><td>Boolean</td><td>false</td><td>是否自动切换</td></tr><tr><td>interval</td><td>Number</td><td>5000</td><td>自动切换时间间隔</td></tr></tbody></table><h3 id="9-4-1-swiper"><a href="#9-4-1-swiper" class="headerlink" title="9.4.1. swiper"></a>9.4.1. swiper</h3><p>滑块视图容器。</p><h3 id="9-4-2-swiper-item"><a href="#9-4-2-swiper-item" class="headerlink" title="9.4.2. swiper-item"></a>9.4.2. swiper-item</h3><blockquote><p>滑块</p></blockquote><p><strong>默认宽度和高度都是100%</strong></p><h2 id="9-5-navigator"><a href="#9-5-navigator" class="headerlink" title="9.5. navigator"></a>9.5. navigator</h2><blockquote><p>导航组件 类似超链接标签 </p></blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>String</td><td>self</td><td>在哪个目标上发生跳转，默认当前小程序，可选值self/miniProgram</td></tr><tr><td>url</td><td>String</td><td></td><td>当前小程序内的跳转链接</td></tr><tr><td>open-type</td><td>String</td><td>navigate</td><td>跳转方式</td></tr></tbody></table><p><strong>open-type 有效值：</strong></p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>navigate</td><td>保留当前页面，跳转到应用内的某个页面，但是不能跳到 tabbar 页面</td></tr><tr><td>redirect</td><td>关闭当前页面，跳转到应用内的某个页面，但是不允许跳转到 tabbar 页面。</td></tr><tr><td>switchTab</td><td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td></tr><tr><td>reLaunch</td><td>关闭所有页面，打开到应用内的某个页面</td></tr><tr><td>navigateBack</td><td>关闭当前页面，返回上一页面或多级页面。可通过 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html#getcurrentpages" target="_blank" rel="noopener">getCurrentPages()</a> 获取当前的页面栈，决定需要返回几层</td></tr><tr><td>exit</td><td>退出小程序，target=”miniProgram”时生效</td></tr></tbody></table><h1 id="10-自定义组件"><a href="#10-自定义组件" class="headerlink" title="10. 自定义组件"></a>10. 自定义组件</h1><p>小程序允许我们使用自定义组件的方式来构建页面。</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">自定义组件</a></p><h2 id="10-1-创建自定义组件"><a href="#10-1-创建自定义组件" class="headerlink" title="10.1. 创建自定义组件"></a>10.1. 创建自定义组件</h2><blockquote><p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成</p></blockquote><h3 id="10-1-1-声明组件"><a href="#10-1-1-声明组件" class="headerlink" title="10.1.1. 声明组件"></a>10.1.1. 声明组件</h3><p>首先需要在 <code>json</code> 文件中进行自定义组件声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-2-编辑组件"><a href="#10-1-2-编辑组件" class="headerlink" title="10.1.2. 编辑组件"></a>10.1.2. 编辑组件</h3><p>同时，还要在 <code>wxml</code> 文件中编写组件模板，在 <code>wxss</code> 文件中加入组件样式</p><blockquote><p><strong>注意：在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是自定义组件的内部WXML结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">  &#123;&#123;innerText&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这里的样式只应用于这个自定义组件 */</span></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-3-注册组件"><a href="#10-1-3-注册组件" class="headerlink" title="10.1.3. 注册组件"></a>10.1.3. 注册组件</h3><p>在自定义组件的 <code>js</code> 文件中，需要使用 <code>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">    // 这里定义了innerText属性，属性值可以在组件使用时指定</span><br><span class="line">    innerText: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      value: &apos;default value&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 这里是一些组件内部数据</span><br><span class="line">    someData: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 这里是一个自定义方法</span><br><span class="line">    customMethod: function()&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-2-使用自定义组件"><a href="#10-2-使用自定义组件" class="headerlink" title="10.2. 使用自定义组件"></a>10.2. 使用自定义组件</h2><p>首先要在页面的 <code>json</code> 文件中进行引用声明。还要提供对应的组件名和组件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// 引用声明</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">  // 要使用的组件的名称     // 组件的路径</span><br><span class="line">    &quot;component-tag-name&quot;: &quot;path/to/the/custom/component&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-小程序介绍&quot;&gt;&lt;a href=&quot;#1-小程序介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 小程序介绍&quot;&gt;&lt;/a&gt;1. 小程序介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%BE%AE%
      
    
    </summary>
    
      <category term="Framework" scheme="http://yoursite.com/categories/Framework/"/>
    
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="weChat" scheme="http://yoursite.com/tags/weChat/"/>
    
      <category term="mina" scheme="http://yoursite.com/tags/mina/"/>
    
  </entry>
  
  <entry>
    <title>MVVM框架进阶与实现</title>
    <link href="http://yoursite.com/2018/11/14/n_myVue/"/>
    <id>http://yoursite.com/2018/11/14/n_myVue/</id>
    <published>2018-11-14T07:50:15.913Z</published>
    <updated>2019-01-21T05:47:51.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM框架介绍"><a href="#MVVM框架介绍" class="headerlink" title="MVVM框架介绍"></a>MVVM框架介绍</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>M ：Modal 模型层</li><li>V ：View 视图层</li><li>VM ： ViewModal 视图模型，V和M的桥梁</li></ul><p>MVVM框架实现了数据双向绑定</p><ul><li>当M层数据进行修改时，VM层会检测到变化，并且通知V层进行相应的修改；</li><li>修改V层则会通知M层数据进行修改</li><li>MVVM框架实现了视图和模型层的相互解耦</li></ul><h3 id="几种双向数据绑定的方式"><a href="#几种双向数据绑定的方式" class="headerlink" title="几种双向数据绑定的方式"></a>几种双向数据绑定的方式</h3><ul><li><p>发布-订阅者模式（backbone.js）<br>一般通过pub、sub的方式来实现数据和视图的绑定，但是使用比较麻烦</p></li><li><p>脏值检查（anjular.js）<br>angular.js是通过脏值检测的方式对数据是否有变更，来决定是否更新视图。类似于通过定时器轮训检测数据是否发生了改变；</p></li><li><p>数据劫持<br>vue.js是通过数据劫持结合发布者-订阅者的方式。通过Object.defineProperty()来劫持各个属性的setter、getter，在数据发生变动的时候发布消息给订阅者，触发相应的监听回调</p></li></ul><h3 id="Vue实现思路"><a href="#Vue实现思路" class="headerlink" title="Vue实现思路"></a>Vue实现思路</h3><ul><li>实现一个Compile模板解析器，能够对模板中的指令和插值表达式进行解析，并且赋予不同的操作</li><li>实现一个Observe数据监听器，能够对数据对象的所有属性进行监听</li><li>实现一个Watcher观察者，将Compile的解析结果，与Observer所观察的对象链接起来，建立关系，在Observer观察对象到对象数据变化时，接受通知，同时更新DOM</li><li>创建一个公共的入口对象，接受初始化的配置并且协调上面三个模块，也就是Vue</li></ul><h2 id="Compile实现逻辑"><a href="#Compile实现逻辑" class="headerlink" title="Compile实现逻辑"></a>Compile实现逻辑</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><ul><li>需要基本的html文件，vue.js文件，并且引入并且实例化vue对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> el = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">"hello vue"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(el)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建vue对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(option = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = option.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = option.data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">//compile负责解析模板的内容</span></span><br><span class="line">            <span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Compile模板解析器、</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">      <span class="comment">//允许用户传递的dom对象可以是真实Dom或者是选择器</span></span><br><span class="line">        <span class="keyword">this</span>.el = <span class="keyword">typeof</span> el === <span class="string">'string'</span> ? <span class="built_in">document</span>.querySelector(el) : el;</span><br><span class="line">        <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建文本碎片"><a href="#创建文本碎片" class="headerlink" title="创建文本碎片"></a>创建文本碎片</h3><p>DocumentFragments 是DOM节点。它们不是主DOM树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到DOM树。在DOM树中，文档片段被其所有的子元素所代替。</p><p>因为文档片段存在于内存中，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面回流（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createDocumentFragment" target="_blank" rel="noopener">关于createDocumentFragment方法</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">  <span class="keyword">let</span> fragment = <span class="keyword">this</span>.node2fragment(<span class="keyword">this</span>.el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 核心方法-生成文档碎片</span></span><br><span class="line"><span class="comment">   * @param &#123;根Dom对象&#125; node </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  node2fragment(node) &#123;</span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">      <span class="keyword">let</span> childNodes = node.childNodes;</span><br><span class="line">      <span class="keyword">this</span>.toArray(childNodes).forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">          fragment.appendChild(node);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 工具方法-类数组转化数组</span></span><br><span class="line"><span class="comment">   * @param &#123;类数组&#125; likeArray </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  toArray(likeArray) &#123;</span><br><span class="line">      <span class="keyword">return</span> [].slice.call(likeArray)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="根据类型解析节点"><a href="#根据类型解析节点" class="headerlink" title="根据类型解析节点"></a>根据类型解析节点</h3><ul><li>区分是文本节点还是元素节点来分别解析</li><li>使用递归层层解析</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具方法-类数组转化数组</span></span><br><span class="line"><span class="comment"> * @param &#123;类数组&#125; likeArray </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">toArray(likeArray) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(likeArray)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是元素节点</span></span><br><span class="line"><span class="comment"> * @param &#123;node&#125; node </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">isElementNode(node) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析元素节点"><a href="#解析元素节点" class="headerlink" title="解析元素节点"></a>解析元素节点</h3><ul><li>需要分别解析v-text  v-html v-modal指令</li><li>v-on指令因为类型原因需要特别解析</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析元素节点</span></span><br><span class="line"><span class="comment"> * @param &#123;节点&#125; node  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">compileElement(node) &#123;</span><br><span class="line">    <span class="comment">// 1.获取所有当前节点下的属性</span></span><br><span class="line">    <span class="keyword">let</span> attributes = node.attributes;</span><br><span class="line">    <span class="keyword">this</span>.toArray(attributes).forEach(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> attrName = attr.name;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">            <span class="keyword">let</span> type = attrName.slice(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">let</span> attrValue = attr.value;</span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">'text'</span>) &#123;</span><br><span class="line">                node.textContent = <span class="keyword">this</span>.vm.$data[attrValue];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">'html'</span>) &#123;</span><br><span class="line">                node.textContent = <span class="keyword">this</span>.vm.$data[attrValue];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type === <span class="string">'modal'</span>) &#123;</span><br><span class="line">                node.value = <span class="keyword">this</span>.vm.$data[attrValue];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isEventDirective(type)) &#123;</span><br><span class="line">                <span class="keyword">let</span> eventType = attrName.split(<span class="string">':'</span>)[<span class="number">1</span>];</span><br><span class="line">                node.addEventListener(eventType, <span class="keyword">this</span>.vm.$methods[attrValue].bind(<span class="keyword">this</span>.vm))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析文本节点"><a href="#解析文本节点" class="headerlink" title="解析文本节点"></a>解析文本节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//解析文本节点</span></span><br><span class="line">mustache(node, vm) &#123;</span><br><span class="line">    <span class="keyword">let</span> txt = node.textContent;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+)\&#125;\&#125;/</span>;</span><br><span class="line">    <span class="keyword">if</span> (reg.test(txt)) &#123;</span><br><span class="line">        <span class="keyword">let</span> expr = <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">        node.textContent = txt.replace(reg, <span class="keyword">this</span>.getVMValue(vm, expr))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取VM中的数据</span></span><br><span class="line">getVMValue(vm, expr) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = vm.$data;</span><br><span class="line">    expr.split(<span class="string">'.'</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        data = data[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observer实现逻辑"><a href="#Observer实现逻辑" class="headerlink" title="Observer实现逻辑"></a>Observer实现逻辑</h2><h3 id="关于数据劫持"><a href="#关于数据劫持" class="headerlink" title="关于数据劫持"></a>关于数据劫持</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">关于Object.defineProperty方法</a></p><h4 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h4><p>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</p><h4 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h4><p>当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。默认为 false。</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。<br>默认为 undefined。</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。<br>默认为 undefined。</p><h4 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp = obj.name;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj)</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newValue)</span><br><span class="line">        temp = newValue</span><br><span class="line">        <span class="built_in">console</span>.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="observer实现"><a href="#observer实现" class="headerlink" title="observer实现"></a>observer实现</h3><ul><li>观察者目的是使用数据劫持检测$data下的所有数据（为什么天赐还没成大佬）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Observer(<span class="keyword">this</span>.vm.$data);</span><br></pre></td></tr></table></figure><ul><li><p>使用Object.keys(data)方法获取所有key，并通过Object.defineProperty为所有数据添加绑定（为什么天赐还没成大佬）</p></li><li><p>为了绑定复杂数据，需要进行递归操作（为什么天赐还没成大佬）</p></li><li><p>在set函数中，设置了新的数据，也需要进行监控（为什么天赐还没成大佬）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.walk(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">walk(data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.defineReactive(data, key, data[key])</span><br><span class="line">        <span class="keyword">this</span>.walk(data[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">defineReactive(obj, key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'获取了'</span>, value)</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newvalue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newvalue === value) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'设置了'</span>, newvalue)</span><br><span class="line">            value = newvalue;</span><br><span class="line">            self.walk(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Wacher实现逻辑"><a href="#Wacher实现逻辑" class="headerlink" title="Wacher实现逻辑"></a>Wacher实现逻辑</h2><p>已经实现了页面渲染compile以及数据监听observer，接下来是将数据和页面做一个连接，即是，数据发生改变之后通知compile重新渲染，compile发生改变之后通知observer更改数据，接下来的watcher作为一个连接中心，实现这一部分的功能；</p><h3 id="创建watcher对象"><a href="#创建watcher对象" class="headerlink" title="创建watcher对象"></a>创建watcher对象</h3><h4 id="初始化需要传递三个变量"><a href="#初始化需要传递三个变量" class="headerlink" title="初始化需要传递三个变量"></a>初始化需要传递三个变量</h4><ul><li>vm:vue对象实例</li><li>expr:数据对象</li><li>cb:callback回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(vm, expr, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.expr = expr;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.oldValue = <span class="keyword">this</span>.getVMValue(vm, expr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建更新数据函数"><a href="#创建更新数据函数" class="headerlink" title="创建更新数据函数"></a>创建更新数据函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">update() &#123;</span><br><span class="line">    <span class="keyword">let</span> oldValue = <span class="keyword">this</span>.oldValue;</span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="keyword">this</span>.getVMValue(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr)</span><br><span class="line">    <span class="keyword">if</span> (oldValue !== newValue) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cb(newValue, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例化watcher对象"><a href="#实例化watcher对象" class="headerlink" title="实例化watcher对象"></a>实例化watcher对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析v-text指令</span></span><br><span class="line">text(node, vm, expr) &#123;</span><br><span class="line">    node.textContent = <span class="keyword">this</span>.getVMValue(vm, expr)</span><br><span class="line">    <span class="built_in">window</span>.Watcher = <span class="keyword">new</span> Watcher(vm, expr, (newVlaue, oldValue) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVlaue, <span class="string">'打印newValue'</span>)</span><br><span class="line">        node.textContent = newVlaue</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="获取新值调用update"><a href="#获取新值调用update" class="headerlink" title="获取新值调用update"></a>获取新值调用update</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set(newvalue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newvalue === value) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'设置了'</span>, newvalue)</span><br><span class="line">    value = newvalue;</span><br><span class="line">    <span class="built_in">window</span>.Watcher.update();</span><br><span class="line">    self.walk(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用订阅发布者模式检测数值改变"><a href="#使用订阅发布者模式检测数值改变" class="headerlink" title="使用订阅发布者模式检测数值改变"></a>使用订阅发布者模式检测数值改变</h4><ul><li>声明发布者构造函数</li><li>订阅检测对象</li><li>实例化检测data中的每一个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(watcher) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(watcher)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Dep.target = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.oldValue = <span class="keyword">this</span>.getVMValue(vm, expr);</span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//observer.js</span></span><br><span class="line"></span><br><span class="line">defineReactive(obj, key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get() &#123;</span><br><span class="line">            Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newvalue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newvalue === value) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            value = newvalue;</span><br><span class="line">            dep.notify();</span><br><span class="line">            self.walk(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现双向数据绑定"><a href="#实现双向数据绑定" class="headerlink" title="实现双向数据绑定"></a>实现双向数据绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = expr.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">var</span> data = vm.$data;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            data[v] = <span class="keyword">this</span>.value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            data = data[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="将数据挂载到vue对象中"><a href="#将数据挂载到vue对象中" class="headerlink" title="将数据挂载到vue对象中"></a>将数据挂载到vue对象中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(option = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = option.el;</span><br><span class="line">        <span class="keyword">this</span>.$data = option.data;</span><br><span class="line">        <span class="keyword">this</span>.$methods = option.methods;</span><br><span class="line">        <span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data);</span><br><span class="line">        <span class="keyword">this</span>.porxy(<span class="keyword">this</span>.$data)</span><br><span class="line">        <span class="keyword">this</span>.porxy(<span class="keyword">this</span>.$methods)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">//compile负责解析模板的内容</span></span><br><span class="line">            <span class="keyword">let</span> c = <span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    porxy(data) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, key, &#123;</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                get() &#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                set(newvalue) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data[key] === newvalue) &#123;</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    data[key] = newvalue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVVM框架介绍&quot;&gt;&lt;a href=&quot;#MVVM框架介绍&quot; class=&quot;headerlink&quot; title=&quot;MVVM框架介绍&quot;&gt;&lt;/a&gt;MVVM框架介绍&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
      <category term="Framework" scheme="http://yoursite.com/categories/JavaScript-Advanced/Framework/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Flow&amp;TypeScript</title>
    <link href="http://yoursite.com/2018/10/29/n_flow_typeScript/"/>
    <id>http://yoursite.com/2018/10/29/n_flow_typeScript/</id>
    <published>2018-10-29T01:47:23.859Z</published>
    <updated>2019-01-21T05:43:36.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javscript语言特征介绍"><a href="#Javscript语言特征介绍" class="headerlink" title="Javscript语言特征介绍"></a>Javscript语言特征介绍</h1><p>JavaScript是一种弱类型，动态类型检查的语言</p><h2 id="弱类型和强类型"><a href="#弱类型和强类型" class="headerlink" title="弱类型和强类型"></a>弱类型和强类型</h2><h3 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h3><p>在定义变量的时候，我们可以为变量赋值任何数值，变量的数据类型不是固定死的，这样的类型叫做弱类型</p><h3 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h3><p>在声明变量的时候，一旦给变量赋值，那么变零的数据类型已经确定，之后如果要给该变量赋值其他类型的数据，需要进行强制数据类型转换；</p><h2 id="动态类型和静态类型"><a href="#动态类型和静态类型" class="headerlink" title="动态类型和静态类型"></a>动态类型和静态类型</h2><p>动态类型和静态类型的核心区别：动态类型的类型检查会在代码运行的时候进行，而静态类型检查则是在编译时候进行；</p><h1 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h1><p><a href="https://flow.org" target="_blank" rel="noopener">Flow官网</a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y </span><br><span class="line">npm i flow-bin -D</span><br></pre></td></tr></table></figure><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="声明flow"><a href="#声明flow" class="headerlink" title="声明flow"></a>声明flow</h3><p>需要给文件添加@flow 标记，否则flow不会对文件进行类型检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@flow</span></span><br></pre></td></tr></table></figure><h3 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h3><ul><li>通过注释的方式进行添加（不会改写js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">/*:number */</span> = <span class="number">12</span>;</span><br><span class="line">a = <span class="string">"111"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><ul><li>通过直接给数据添加类型，改写js代码，如果需要正常运行，需要进行babel进行转码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: number = <span class="number">12</span>;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="使用flow进行检查"><a href="#使用flow进行检查" class="headerlink" title="使用flow进行检查"></a>使用flow进行检查</h3><ol><li>在package.json中添加命令</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"flow"</span>: <span class="string">"flow"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建flow配置文件.flowconfig<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run flow init</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用babel对flow进行转码"><a href="#使用babel对flow进行转码" class="headerlink" title="使用babel对flow进行转码"></a>使用babel对flow进行转码</h2><p>如果给数据添加类型声明通过第二种方式，直接修改js代码，那么代码是不能正常运行的；</p><p>我们需要通过babel对代码进行转码之后才能正常进行</p><ol><li>安装bebel以及persets</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-cli babel-preset-flow -D</span><br></pre></td></tr></table></figure><p>新建 .babelrc文件并添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;flow&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置package.json 添加build命令调用babel</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;build&quot;:&quot;babel ./src -d ./dist&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行build命令进行转换</li></ol><h2 id="Flow的数据类型"><a href="#Flow的数据类型" class="headerlink" title="Flow的数据类型"></a>Flow的数据类型</h2><h3 id="类型说明"><a href="#类型说明" class="headerlink" title="类型说明"></a>类型说明</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>number</td><td>数字、NaN、Infinity都是number类型的数据</td></tr><tr><td>string</td><td>字符串</td></tr><tr><td>null</td><td>只有null是null类型的</td></tr><tr><td>void</td><td>undefined在flow中类型就是void</td></tr><tr><td>Array</td><td>数组类型，定义的时候需要使用 Array<t>这种形式，T为指定的类型，说的是特定类型的数据组成的数组</t></td></tr><tr><td>Object</td><td>对象类型，由于对象比较自由，可以规定对象类型的时候有多中写法</td></tr><tr><td>any</td><td>表示任意类型，这个尽量少用，但是有时有很有用</td></tr><tr><td>Functions</td><td>函数类型</td></tr><tr><td>Maybe</td><td>Maybe类型允许我们声明一个包含null和undefined两个潜在类型的值</td></tr><tr><td>或操作</td><td>或操作可以设置一个变量为多种可能的类型</td></tr><tr><td>类型判断</td><td>flow会常识自行腿短某个数据的类型</td></tr></tbody></table><h3 id="部分案例"><a href="#部分案例" class="headerlink" title="部分案例"></a>部分案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@flow</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.数组</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">Array</span> &lt; number &gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.maybe</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">a: ? number</span>) </span>&#123;</span><br><span class="line">    a = a || <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line">test2(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.或 |</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b: number | string = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">b = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.Object</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">obj: &#123; sayHello: (</span>) =&gt; <span class="title">void</span>, <span class="title">name</span>: <span class="title">string</span> &#125;) </span>&#123;</span><br><span class="line">    obj.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>TypeScript是微软公司开发的一种开源的JavaScript超集语言</p><p>JavaScript超集：当前任何JavaScript都是合法的TypeScript代码</p><p>TypeScript主要是为JavaScript提供了类型系统和ES6的语法支持；</p><p>Flow是一个类型检查工具，而TypeScript是一种开发语言</p><p>TypeScript有自己的编译工具，我们写好的TypeScript代码最终通过编译器编译成JavaScript代码进行运行</p><h2 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h2><p>TypeScript代码最终要运行起来，我们需要编译成JavaScript代码，那么TypeScript的命令工具就可以帮我们完成；<br>TypeScript命令行工具安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>以上命令会在全局安装typescript命令，完成之后可以在任何地方执行tsc命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc index.js</span><br></pre></td></tr></table></figure><h2 id="TypeScript配置文件"><a href="#TypeScript配置文件" class="headerlink" title="TypeScript配置文件"></a>TypeScript配置文件</h2><h3 id="生成tsconfig-json文件"><a href="#生成tsconfig-json文件" class="headerlink" title="生成tsconfig.json文件"></a>生成tsconfig.json文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><h3 id="设置配置项"><a href="#设置配置项" class="headerlink" title="设置配置项"></a>设置配置项</h3><ul><li>targe：指的就是将ts代码要转换成那个版本的es5，es3</li><li>module：指的就是将ts代码转换成js代码之后，使用的模块化的标准是什么</li><li>outDir：指的就是ts代码转成js之后，js代码存放的文件夹路径</li><li>rootDir：指的就是要将哪个目录的ts代码进行转换；ts代码的存放路径</li><li>strict：是否要将ts代码转换成严格模式的js代码</li></ul><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -p ./tsconfig.js</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字（Number）"><a href="#数字（Number）" class="headerlink" title="数字（Number）"></a>数字（Number）</h3><p>数字类型可以是普通数字、NaN、Infinity,包括可以赋值二进制，八进制，16进制等（0x:16进制、0b:2进制、0o:8进制）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: number = <span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2: number = <span class="number">0xA12</span>;</span><br><span class="line"><span class="keyword">let</span> n3: number = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> n4: number = <span class="number">0o75</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><p>字符串类型可以使用单引号、双引号以及ES6的模板字符串；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:string = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2:string = <span class="string">"$&#123;str&#125;def"</span></span><br></pre></td></tr></table></figure><h3 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h3><p>数组可以使用两种方式声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr :<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="元祖（Tuple）"><a href="#元祖（Tuple）" class="headerlink" title="元祖（Tuple）"></a>元祖（Tuple）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">'a];</span></span><br></pre></td></tr></table></figure><h3 id="空值-（void）"><a href="#空值-（void）" class="headerlink" title="空值 （void）"></a>空值 （void）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res:<span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o:object =&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2</span><br></pre></td></tr></table></figure><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p>never类型表示的是永不存在的值，例如，never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式；变量也可能是never类型，当它们被永不为真的类型保护所约束时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message:string</span>):<span class="title">never</span></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">message:string</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> error(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infinitloop</span>(<span class="params"></span>):<span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h3><p>enum类型是对JavaScript标准类型的一个补充。可以未一组数值赋予友好的名字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Green,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，从0开始为元素编号，也可以手动为指定成员赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">    Red = <span class="number">1</span>,</span><br><span class="line">    Green = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息，通常这会发生在你清除的知道一个实体具有比他现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉浏览器，类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someVal:<span class="built_in">any</span> = <span class="string">'this is a string'</span>;</span><br><span class="line"><span class="comment">// 断言1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someLen:<span class="built_in">number</span> =(&lt;<span class="built_in">string</span>&gt;someVal).length;</span><br><span class="line"><span class="comment">// 断言2</span></span><br><span class="line"><span class="keyword">let</span> someLe2:<span class="built_in">number</span> =(someVal <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><p>两种方式是等价的，但是当在TypeScript中使用JSX时，只有as语法断言是被允许的；</p><h2 id="TypeScript中的类"><a href="#TypeScript中的类" class="headerlink" title="TypeScript中的类"></a>TypeScript中的类</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>和ES6不同的是，TS中属性必须声明，需要指定类型</li><li>声明好属性之后，属性必须赋值一个默认值或者在构造函数中进行初始化</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span> = <span class="number">12</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承类的时候在constructor调用super方法；</li><li>子类中如果出现和父类同名的方法，则会进行覆盖，调用的会后调用的是子类的方法；</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'12'</span>)</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li>public ：公共，默认</li><li>private：私有的，只能在当前类中进行访问</li><li>protected：受保护的，这能在当前类或者子类中进行访问</li></ul><h3 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h3><p>可以使用readonly关键字将属性设置为只读，只读属性必须在声明时活构造函数里面被初始化</p><h3 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h3><p>可以方便的让我们在一个地方定义并初始化一个成员</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Anmial &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name:<span class="built_in">string</span></span>)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类成员的存取器"><a href="#类成员的存取器" class="headerlink" title="类成员的存取器"></a>类成员的存取器</h3><p>在set的时候可以根据需求判断是否执行操作；</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> People&#123;</span><br><span class="line">    <span class="keyword">private</span> _name:<span class="built_in">string</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">get</span> name():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(value:<span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>._name = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeScript的接口"><a href="#TypeScript的接口" class="headerlink" title="TypeScript的接口"></a>TypeScript的接口</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>接口可以理解为一个约定或者一种规范</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AjaxOptins&#123;</span><br><span class="line">    url:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">type</span>:<span class="built_in">string</span></span><br><span class="line">    data:object</span><br><span class="line">    success(data:object):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options:AjaxOptins</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">"http"</span>,</span><br><span class="line">    <span class="keyword">type</span>:<span class="string">'post'</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    success(data:object)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="接口的可选属性以及只读属性"><a href="#接口的可选属性以及只读属性" class="headerlink" title="接口的可选属性以及只读属性"></a>接口的可选属性以及只读属性</h3><h4 id="可选属性："><a href="#可选属性：" class="headerlink" title="可选属性：?"></a>可选属性：?</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> AjaxOptins&#123;</span><br><span class="line">    url:<span class="built_in">string</span></span><br><span class="line">    <span class="comment">//type加了可选属性，代表，type不是必须的值，是可选的</span></span><br><span class="line">    <span class="keyword">type</span>?:<span class="built_in">string</span></span><br><span class="line">    data:object</span><br><span class="line">    success(data:object):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options:AjaxOptins</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">"http"</span>,</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    success(data:object)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point&#123;</span><br><span class="line">    readonly x:<span class="built_in">number</span></span><br><span class="line">    y:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> poi:Point = &#123;</span><br><span class="line">    x:<span class="number">10</span>,</span><br><span class="line">    y:<span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x为只读属性，重新赋值就会报错</span></span><br><span class="line">poi.x =<span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="接口的额外属性检查"><a href="#接口的额外属性检查" class="headerlink" title="接口的额外属性检查"></a>接口的额外属性检查</h3><p>可以在指定范围以外设置其他属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point&#123;</span><br><span class="line">    readonly x:<span class="built_in">number</span></span><br><span class="line">    y:<span class="built_in">number</span>,</span><br><span class="line">    <span class="comment">//设置了额外的属性检查才可以为下面的增加z属性</span></span><br><span class="line">    [propName:<span class="built_in">string</span>]:<span class="built_in">any</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> poi:Point = &#123;</span><br><span class="line">    x:<span class="number">10</span>,</span><br><span class="line">    y:<span class="number">10</span>,</span><br><span class="line">    z:<span class="number">19</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SumInterface&#123;</span><br><span class="line">    (a:<span class="built_in">number</span>,b:<span class="built_in">number</span>):<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum:SumInterface = <span class="function"><span class="keyword">function</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterFace&#123;</span><br><span class="line">    currentTime:<span class="built_in">Date</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterFace&#123;</span><br><span class="line">    currentTime:<span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h:<span class="built_in">number</span>,m:<span class="built_in">number</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TwoPointP &#123;</span><br><span class="line">    x: <span class="built_in">number</span>,</span><br><span class="line">    y: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ThreePointP <span class="keyword">extends</span> TwoPointP &#123;</span><br><span class="line">    z: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须指定x,y,z三项内容才可以</span></span><br><span class="line"><span class="keyword">let</span> poi2: ThreePointP = &#123;</span><br><span class="line">    z: <span class="number">100</span>,</span><br><span class="line">    x: <span class="number">100</span>,</span><br><span class="line">    y: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承一个类类型，他会继承类的成员但是不包括其实现。就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。接口同样会继承到类的private和protected成员。这意味着当你创建了一个接口继承了一个拥有私有或者被保护的成员的类时，这个接口类型只能被这个类或其子类所实现implement。</p><p>当你有一个庞大的继承结构这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用，除了继承自基类，子类之间不必相关联。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name:<span class="built_in">string</span> =<span class="string">""</span></span><br><span class="line">    eat()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> AnimalInterFace <span class="keyword">extends</span> Animal&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bird <span class="keyword">implements</span> AnimalInterFace &#123;</span><br><span class="line">    name:<span class="built_in">string</span> = <span class="string">"12"</span></span><br><span class="line">    eat()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javscript语言特征介绍&quot;&gt;&lt;a href=&quot;#Javscript语言特征介绍&quot; class=&quot;headerlink&quot; title=&quot;Javscript语言特征介绍&quot;&gt;&lt;/a&gt;Javscript语言特征介绍&lt;/h1&gt;&lt;p&gt;JavaScript是一种弱类型，动
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
      <category term="Flow" scheme="http://yoursite.com/tags/Flow/"/>
    
  </entry>
  
  <entry>
    <title>框架原理与进阶</title>
    <link href="http://yoursite.com/2018/10/25/n_framework/"/>
    <id>http://yoursite.com/2018/10/25/n_framework/</id>
    <published>2018-10-25T03:31:43.489Z</published>
    <updated>2019-01-21T05:47:51.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端工程化工具"><a href="#前端工程化工具" class="headerlink" title="前端工程化工具"></a>前端工程化工具</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="关于模块化"><a href="#关于模块化" class="headerlink" title="关于模块化"></a>关于模块化</h4><p>模块化是一种将系统分离成独立功能部分的方法，可将系统分割成独立的功能部分，严格定义模块接口、模块间具有透明性。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>灵活架构，焦点分离</li><li>方便模块间组合、分解</li><li>方便单个模块功能调试、升级</li><li>多人协作互不干扰</li></ol><h4 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h4><ol><li>script标签</li><li>ComonJS</li><li>AMD</li><li>CMD</li><li>UMD</li><li>ES6</li></ol><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h5><p><a href="https://webpack.js.org" target="_blank" rel="noopener">https://webpack.js.org</a></p><p>基本概念:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 <span class="built_in">JSON</span>、Coffeescript、 LESS 等。</span><br></pre></td></tr></table></figure><p>优势:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、代码拆分</span><br><span class="line"><span class="number">2</span>、Loader</span><br><span class="line"><span class="number">3</span>、智能解析</span><br><span class="line"><span class="number">4</span>、插件系统</span><br><span class="line"><span class="number">5</span>、快速运行</span><br></pre></td></tr></table></figure><p>实战之基本演练:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">打包单个js文件</span><br><span class="line"><span class="number">1</span>、新建一个项目的入口文件entry.js并且在里面写好内容</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一定要切换到项目根目录，使用 </span><br><span class="line">webpack entry.js bundle.js</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、在项目根目录，创建index.html，导入bundle.js文件</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、运行</span><br><span class="line">    </span><br><span class="line">打包具有依赖关系的两个js文件</span><br><span class="line"><span class="number">1</span>、新建两个文件 entry.js <span class="built_in">module</span>.js ，并且在里面写好导出</span><br><span class="line">导入的代码</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一定要切换到项目根目录，使用 </span><br><span class="line">webpack entry.js bundle.js</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、在项目根目录，创建index.html，导入bundle.js文件</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、运行</span><br><span class="line">    </span><br><span class="line"> 打包非js(以后css)文件</span><br><span class="line"><span class="number">1</span>、新建一个site.css文件，里面写上内容</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、一定要切换到项目根目录，使用 </span><br><span class="line">webpack entry.js bundle.js</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、我们需要安装两个load来打包css文件</span><br><span class="line">npm i style-loader css-loader -D</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、使用style-loader &amp; css-loader 来打包css文件</span><br><span class="line"><span class="number">4.1</span>、再导入css的时候，使用style-loader css-loader</span><br><span class="line"><span class="number">4.2</span>、在终端里面对css结尾的文件统一处理</span><br><span class="line">        </span><br><span class="line"> webpack.config.js的使用</span><br><span class="line">作用:简化在终端里面输入的很长的打包指令</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、项目根目录下创建webpack.config.js</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在webpack.config.js中配置</span><br><span class="line">entry</span><br><span class="line">output</span><br><span class="line">loader</span><br></pre></td></tr></table></figure><p><a href="https://github.com/HDongjian/NotesCode/tree/master/01_framework/01_engineeringTools/01_webpack_base" target="_blank" rel="noopener">github案例</a></p><p>实战之和VueJS结合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">webpack + vue 构建项目【实现热更新，看到Hello Vue】</span><br><span class="line"></span><br><span class="line">#### 新建基本的文件和文件夹</span><br><span class="line"><span class="number">1</span>、创建一个项目的根目录</span><br><span class="line">szhmqd18</span><br><span class="line">|--src 项目的源代码目录</span><br><span class="line">|--main.js 项目的入口文件</span><br><span class="line">|--App.vue 根组件【项目启动之后看到的第一个组件】</span><br><span class="line">|--package.json 项目配置文件</span><br><span class="line">npm init -y</span><br><span class="line">|--webpack.config.dev.js 项目开发阶段的配置文件</span><br><span class="line"></span><br><span class="line">#### 在新建的文件中写代码</span><br><span class="line">App.vue</span><br><span class="line">写上hello Vue</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line">导入根组件【使用es6的语法】，渲染根组件【利用Vue】</span><br><span class="line"></span><br><span class="line">webpack.config.dev.js</span><br><span class="line">entry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 利用 webpack-dev-server + html-webpack-plugin 运行我们的项目</span><br><span class="line">webpack-dev-server【只是打包生成了bundle.js】</span><br><span class="line">webpack-dev-server --progress --config webpack.config.dev.js --open --hot</span><br><span class="line"></span><br><span class="line">把上面的指令，放在package.json的scripts中</span><br><span class="line"></span><br><span class="line"><span class="string">"dev"</span>:<span class="string">"webpack-dev-server --progress --config webpack.config.dev.js --open --hot"</span></span><br><span class="line"></span><br><span class="line">html-webpack-plugin【帮我们生成index.html并且自动导入bundle.js】</span><br><span class="line">安装包</span><br><span class="line"></span><br><span class="line">在 webapck.config.dev.js 中配置</span><br></pre></td></tr></table></figure><h5 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h5><p><a href="https://parceljs.org/" target="_blank" rel="noopener">https://parceljs.org/</a></p><p>基本概念:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">极速零配置Web应用打包工具</span><br></pre></td></tr></table></figure><p>优势:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、极速打包</span><br><span class="line"><span class="number">2</span>、将你所有的资源打包</span><br><span class="line"><span class="number">3</span>、自动转换</span><br><span class="line"><span class="number">4</span>、零配置代码分拆</span><br><span class="line"><span class="number">5</span>、热模块替换</span><br><span class="line"><span class="number">6</span>、友好的错误日志</span><br></pre></td></tr></table></figure><p>实战之基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、首先通过 Yarn 或者 npm 安装 Parcel </span><br><span class="line">npm install -g parcel-bundler</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、创建一个 index.html 和 index.js 文件，并且写好代码</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、打包</span><br><span class="line">parcel index.html</span><br><span class="line"><span class="number">4</span>、打开浏览器</span><br><span class="line">    parcel index.html --open</span><br></pre></td></tr></table></figure><p>实战之和VueJS结合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、首先，我们需要安装 Vue 的依赖关系。</span><br><span class="line">npm install --save vue</span><br><span class="line">npm install --save-dev parcel-bundler</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、向 package.json 的 scripts 中添加 start 脚本。</span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"start"</span>: <span class="string">"parcel index.html"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h5><p><a href="https://www.rollupjs.com/guide/zh" target="_blank" rel="noopener">https://www.rollupjs.com/guide/zh</a></p><p>基本概念:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。</span><br></pre></td></tr></table></figure><p>优势:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、静态分析</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、小巧而专一</span><br></pre></td></tr></table></figure><p>实战之打包流行库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、写一个js库</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、使用rollup打包</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端工程化工具&quot;&gt;&lt;a href=&quot;#前端工程化工具&quot; class=&quot;headerlink&quot; title=&quot;前端工程化工具&quot;&gt;&lt;/a&gt;前端工程化工具&lt;/h2&gt;&lt;h3 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
      <category term="Framework" scheme="http://yoursite.com/categories/JavaScript-Advanced/Framework/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Ne" scheme="http://yoursite.com/tags/Ne/"/>
    
  </entry>
  
  <entry>
    <title>初步实现Axios</title>
    <link href="http://yoursite.com/2018/09/11/my-axios/"/>
    <id>http://yoursite.com/2018/09/11/my-axios/</id>
    <published>2018-09-11T02:19:34.364Z</published>
    <updated>2019-01-21T05:44:49.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Axios"><a href="#关于Axios" class="headerlink" title="关于Axios"></a>关于Axios</h3><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止CSRF/XSRF</li></ul><p>本次主要实现浏览器的XMLHttpRequest请求，使用原生方法，使用promise封装实现；</p><h3 id="关于原生Ajax"><a href="#关于原生Ajax" class="headerlink" title="关于原生Ajax"></a>关于原生Ajax</h3><h4 id="初步认识ajax"><a href="#初步认识ajax" class="headerlink" title="初步认识ajax"></a>初步认识ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://localhost:3002/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.readyState)</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.status)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="详细解析"><a href="#详细解析" class="headerlink" title="详细解析"></a>详细解析</h4><h5 id="构建对象"><a href="#构建对象" class="headerlink" title="构建对象"></a>构建对象</h5><p>使用XMLHttpRequest构造函数构造ajax对象，注意此方法在IE有兼容行<br>兼容写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// xhr = new ActiveXObject('Microsoft.XMLHTTP');</span></span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>open方法参数：</p><ul><li>type（post、get）</li><li>url：路径</li><li>async：是否异步：true、false<br>如果是同步情况下，获得文本内容不用使用回调函数，直接xhr.responseText就可以</li></ul><h5 id="发送参数"><a href="#发送参数" class="headerlink" title="发送参数"></a>发送参数</h5><p>send方法</p><ul><li>get请求默认null；</li><li>post请求根据请求数据格式设置不同的请求头</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json:xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br></pre></td></tr></table></figure><h5 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h5><p>处理相应方法为onreadystatechange回调函数</p><p>关于readyState：</p><ul><li>0：xhr对象初始化</li><li>1：执行发送动作</li><li>2：服务端数据已经完全返回</li><li>3：数据正在解析</li><li>4：数据解析完成，可以使用了</li></ul><h4 id="原生封装"><a href="#原生封装" class="headerlink" title="原生封装"></a>原生封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">type, url, param, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//Ajax语法结构</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// xhr = new ActiveXObject('Microsoft.XMLHTTP');</span></span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">'get'</span>) &#123;</span><br><span class="line">        url += <span class="string">'?'</span> + <span class="built_in">encodeURI</span>(param);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(type, url);</span><br><span class="line">    <span class="keyword">var</span> data = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">'post'</span>) &#123;</span><br><span class="line">        <span class="comment">//如果是post提交，需要将参数传给send；</span></span><br><span class="line">        data = param;</span><br><span class="line">        <span class="comment">//设置请求头</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send(data);</span><br><span class="line">    <span class="comment">//处理响应</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = xhr.responseText;</span><br><span class="line">            result = <span class="built_in">JSON</span>.parse(result)</span><br><span class="line">            callback(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于Axios&quot;&gt;&lt;a href=&quot;#关于Axios&quot; class=&quot;headerlink&quot; title=&quot;关于Axios&quot;&gt;&lt;/a&gt;关于Axios&lt;/h3&gt;&lt;p&gt;axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以
      
    
    </summary>
    
      <category term="JavaScript Base" scheme="http://yoursite.com/categories/JavaScript-Base/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>理解闭包、作用域</title>
    <link href="http://yoursite.com/2018/08/22/closure2/"/>
    <id>http://yoursite.com/2018/08/22/closure2/</id>
    <published>2018-08-22T01:44:26.685Z</published>
    <updated>2019-01-21T05:44:35.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="局部作用域和垃圾回收机制"><a href="#局部作用域和垃圾回收机制" class="headerlink" title="局部作用域和垃圾回收机制"></a>局部作用域和垃圾回收机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a();</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    d = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line">c();</span><br><span class="line"><span class="comment">// delete window.d;</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">window</span>.d)</span><br></pre></td></tr></table></figure><p>js的垃圾回收机制(GC:Garbage Collecation)会定期清除无用的变量，释放内存空间，首先释放的就是生命周期结束的变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，所以，在函数执行完之后打印b是会报错的<br>此处说明一下函数c内部的情况，声明变量不加var，为隐式声明，可以理解为window.d = 12；注意虽然是叫隐式声明，但是b此时并不是一个变量，而是window的一个属性，下面会专门找时间把变量和属性的区别描述清楚；</p><h3 id="全局对象的属性和函数声明（这个属于插一曲）"><a href="#全局对象的属性和函数声明（这个属于插一曲）" class="headerlink" title="全局对象的属性和函数声明（这个属于插一曲）"></a>全局对象的属性和函数声明（这个属于插一曲）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">window</span>.f = <span class="number">1213</span></span><br><span class="line"><span class="built_in">console</span>.log(f)</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.e</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.f</span><br><span class="line"><span class="built_in">console</span>.dir(e)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>全局函数声明虽然也是挂载到window下的一个属性，但是函数声明和属性的区别是，函数声明拥有不可删除性，通过delect方法无法删除</p><h3 id="局部作用域和闭包"><a href="#局部作用域和闭包" class="headerlink" title="局部作用域和闭包"></a>局部作用域和闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包案例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">z</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> y = z();</span><br><span class="line"><span class="built_in">console</span>.dir(z)</span><br><span class="line"><span class="built_in">console</span>.log(y())</span><br><span class="line"><span class="built_in">console</span>.log(y())</span><br></pre></td></tr></table></figure><p>调用一次返回值+1；<br>正常函数调用完之后，局部作用域内声明的变量会被清除，但是如果在局部作用域函数有函数引用变量，形成闭包环境，该变量则不会清除，就会挂载到该局部作用域；所以函数调用一次就会增加一次形成一个缓存的作用，这也是为什么闭包会容易造成内存溢出的原因；<br>//即使是局部作用域的函数未清除，全局作用域仍然无法获取该变量；所以这也是自执行函数IFEE能够形成自己独立区域的原因，防止变量污染；</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所谓的块级作用域就是&#123;&#125;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> aa = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(aa) <span class="comment">//1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用var声明变量没有块级作用域，常见的还有for循环中的变量i值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> bb = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(bb) <span class="comment">//1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bb) <span class="comment">//: bb is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用es6的let和const可以生成一个块级作用域，所以之前的自调用函数，可以使用&#123;&#125;代替</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;局部作用域和垃圾回收机制&quot;&gt;&lt;a href=&quot;#局部作用域和垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;局部作用域和垃圾回收机制&quot;&gt;&lt;/a&gt;局部作用域和垃圾回收机制&lt;/h3&gt;&lt;figure class=&quot;highlight javascri
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Closure" scheme="http://yoursite.com/tags/Closure/"/>
    
  </entry>
  
  <entry>
    <title>我的jQuery</title>
    <link href="http://yoursite.com/2018/08/18/mine-jQuery/"/>
    <id>http://yoursite.com/2018/08/18/mine-jQuery/</id>
    <published>2018-08-18T00:34:42.596Z</published>
    <updated>2019-01-21T05:47:10.872Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>这个可能是一篇长博客，打算模拟jQuery的写法已经很长时间了，也看过jQuery的源码，当时看的时候晦涩难懂，基础实在不好，近一年时间一直用框架开发，忽然看到了一条新闻：2018年7月25日，Mislav Marohnić发了一条推文，宣布GitHub.com前端已经前端已经彻底删除了jQuery。而且，还自问自答地解释（低调炫耀），删除jQuery之后也没用其他框架，而是全部依赖原生API。突然才发现，原来jQuery已经距离我也越来越遥远了，这个也算是一种缅怀吧；</p><h3 id="模拟主要思路"><a href="#模拟主要思路" class="headerlink" title="模拟主要思路"></a>模拟主要思路</h3><h4 id="模拟jquery首先看他的主要用法："><a href="#模拟jquery首先看他的主要用法：" class="headerlink" title="模拟jquery首先看他的主要用法："></a>模拟jquery首先看他的主要用法：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>)  <span class="comment">//获取元素</span></span><br><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);  <span class="comment">//绑定事件</span></span><br><span class="line">$(<span class="string">"#btn1"</span>).css()  <span class="comment">//设置css样式</span></span><br><span class="line">$(<span class="string">"#btn1"</span>).text() <span class="comment">//设置或返回所选元素的文本内容</span></span><br><span class="line">$(<span class="string">"#btn1"</span>).html() <span class="comment">//设置或返回所选元素的内容（包括 HTML 标记）</span></span><br></pre></td></tr></table></figure><h4 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h4><ul><li>$是一个方法，参数是id，css，tagName都可以，返回值为dom元素；</li><li>jQuery内部隐式迭代，所以返回值是一个dom集合；</li><li>css，html，click都是方法，挂在到$方法的返回值；<br>综上所述，所谓的$以及调用之后的样子应该是</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一 $是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> doms  <span class="comment">//dom集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二 实现所有方法在一个集合内部</span></span><br><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    css:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    text:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三实现将$函数返回值继承obj，</span></span><br><span class="line"><span class="comment">//继承方法又很多，常用原型链继承的方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">init.prototype = obj;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> init()  <span class="comment">//dom集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四实现返回值内部为所有dom对象的操作</span></span><br><span class="line"><span class="comment">// 借助call和apply特殊的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> [].push.apply(<span class="keyword">this</span>, <span class="built_in">document</span>.querySelectorAll(select))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现主要逻辑代码"><a href="#实现主要逻辑代码" class="headerlink" title="实现主要逻辑代码"></a>实现主要逻辑代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为了以后能方便借用数组的各种方法，提前存到变量中，全局都是用这一个数组，节约空间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">select</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> init(select)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟jQuery中的Sizzle引擎，利用选择器获取元素</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Sizzle</span>(<span class="params">select</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(select);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">select</span>) </span>&#123;</span><br><span class="line">        [].push.apply(<span class="keyword">this</span>, Sizzle(select));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    init.prototype = &#123;</span><br><span class="line">        css: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p>写完之后基本就可以使用了，下次将方法逐个实现；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;这个可能是一篇长博客，打算模拟jQuery的写法已经很长时间了，也看过jQuery的源码，当时看的时候晦涩难懂，基础实在不好，近一年时间一直用框架开
      
    
    </summary>
    
      <category term="HTML/CSS Advanced" scheme="http://yoursite.com/categories/HTML-CSS-Advanced/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>关于递归-树状结构</title>
    <link href="http://yoursite.com/2018/08/17/about-recursion/"/>
    <id>http://yoursite.com/2018/08/17/about-recursion/</id>
    <published>2018-08-17T02:16:36.493Z</published>
    <updated>2019-01-21T05:44:07.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关于需求"><a href="#关于需求" class="headerlink" title="关于需求"></a>关于需求</h4><p>树状结构数据，需要为每一层增加一个索引值，第一层数据1，第二层2，以此类推；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> tree = [&#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>具体结果看下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tree = [ &#123;</span><br><span class="line">    count:<span class="number">1</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">    count:<span class="number">2</span>,</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            count:<span class="number">3</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    count:<span class="number">1</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">    count:<span class="number">2</span>,</span><br><span class="line">        a: <span class="number">1</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            count:<span class="number">3</span>,</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="关于解决思路"><a href="#关于解决思路" class="headerlink" title="关于解决思路"></a>关于解决思路</h4><h5 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h5><p>树状结构需要层层设置，一般想到的就是递归，关于count设置一个全局变量，递归一层，加一次；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i].count = count;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].children) &#123;</span><br><span class="line">            fn1(arr[i].children)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1(arr)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p><p>但是递归的顺序并非我们想要的那种，count++执行的时间和想要的不一致</p><h5 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h5><p>模拟for循环实现结构，考虑再次更改为递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i].count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].children) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; arr[i].children.length; k++) &#123;</span><br><span class="line">            <span class="comment">// console.log(arr)</span></span><br><span class="line">            arr[i].children[k].count = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是实现的基本思路，里面赋值的count可以理解为在for循环这个作用域内，是不改变的，每次递归一次，增加1,通过自执行函数缓存count，每次递归加1</p><p>更改版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i].c = c;</span><br><span class="line">        <span class="keyword">if</span> (arr[i].children) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">                fn(arr[i].children, c += <span class="number">1</span>)</span><br><span class="line">            &#125;)(c)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;关于需求&quot;&gt;&lt;a href=&quot;#关于需求&quot; class=&quot;headerlink&quot; title=&quot;关于需求&quot;&gt;&lt;/a&gt;关于需求&lt;/h4&gt;&lt;p&gt;树状结构数据，需要为每一层增加一个索引值，第一层数据1，第二层2，以此类推；&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="JavaScript Advanced" scheme="http://yoursite.com/categories/JavaScript-Advanced/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Recursive" scheme="http://yoursite.com/tags/Recursive/"/>
    
  </entry>
  
</feed>
